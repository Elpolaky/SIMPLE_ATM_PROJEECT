
ATM Machine.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001410  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005c  00800060  00001410  000014a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  008000bc  008000bc  00001500  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001500  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001530  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000210  00000000  00000000  0000156c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002861  00000000  00000000  0000177c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e1d  00000000  00000000  00003fdd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001703  00000000  00000000  00004dfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000054c  00000000  00000000  00006500  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000afb  00000000  00000000  00006a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000022a1  00000000  00000000  00007547  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  000097e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__ctors_end>
       4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      14:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <__vector_5>
      18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      24:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      28:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      2c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      34:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      40:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      48:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      4c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      54:	07 63       	ori	r16, 0x37	; 55
      56:	42 36       	cpi	r20, 0x62	; 98
      58:	b7 9b       	sbis	0x16, 7	; 22
      5a:	d8 a7       	std	Y+40, r29	; 0x28
      5c:	1a 39       	cpi	r17, 0x9A	; 154
      5e:	68 56       	subi	r22, 0x68	; 104
      60:	18 ae       	std	Y+56, r1	; 0x38
      62:	ba ab       	std	Y+50, r27	; 0x32
      64:	55 8c       	ldd	r5, Z+29	; 0x1d
      66:	1d 3c       	cpi	r17, 0xCD	; 205
      68:	b7 cc       	rjmp	.-1682   	; 0xfffff9d8 <__eeprom_end+0xff7ef9d8>
      6a:	57 63       	ori	r21, 0x37	; 55
      6c:	bd 6d       	ori	r27, 0xDD	; 221
      6e:	ed fd       	.word	0xfded	; ????
      70:	75 3e       	cpi	r23, 0xE5	; 229
      72:	f6 17       	cp	r31, r22
      74:	72 31       	cpi	r23, 0x12	; 18
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	08 00       	.word	0x0008	; ????
      7e:	00 00       	nop
      80:	be 92       	st	-X, r11
      82:	24 49       	sbci	r18, 0x94	; 148
      84:	12 3e       	cpi	r17, 0xE2	; 226
      86:	ab aa       	std	Y+51, r10	; 0x33
      88:	aa 2a       	or	r10, r26
      8a:	be cd       	rjmp	.-1156   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
      8c:	cc cc       	rjmp	.-1640   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
      8e:	4c 3e       	cpi	r20, 0xEC	; 236
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	be ab       	std	Y+54, r27	; 0x36
      96:	aa aa       	std	Y+50, r10	; 0x32
      98:	aa 3e       	cpi	r26, 0xEA	; 234
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	00 08       	sbc	r0, r0
      aa:	41 78       	andi	r20, 0x81	; 129
      ac:	d3 bb       	out	0x13, r29	; 19
      ae:	43 87       	std	Z+11, r20	; 0x0b
      b0:	d1 13       	cpse	r29, r17
      b2:	3d 19       	sub	r19, r13
      b4:	0e 3c       	cpi	r16, 0xCE	; 206
      b6:	c3 bd       	out	0x23, r28	; 35
      b8:	42 82       	std	Z+2, r4	; 0x02
      ba:	ad 2b       	or	r26, r29
      bc:	3e 68       	ori	r19, 0x8E	; 142
      be:	ec 82       	std	Y+4, r14	; 0x04
      c0:	76 be       	out	0x36, r7	; 54
      c2:	d9 8f       	std	Y+25, r29	; 0x19
      c4:	e1 a9       	ldd	r30, Z+49	; 0x31
      c6:	3e 4c       	sbci	r19, 0xCE	; 206
      c8:	80 ef       	ldi	r24, 0xF0	; 240
      ca:	ff be       	out	0x3f, r15	; 63
      cc:	01 c4       	rjmp	.+2050   	; 0x8d0 <__stack+0x71>
      ce:	ff 7f       	andi	r31, 0xFF	; 255
      d0:	3f 00       	.word	0x003f	; ????
      d2:	00 00       	nop
	...

000000d6 <__ctors_end>:
      d6:	11 24       	eor	r1, r1
      d8:	1f be       	out	0x3f, r1	; 63
      da:	cf e5       	ldi	r28, 0x5F	; 95
      dc:	d8 e0       	ldi	r29, 0x08	; 8
      de:	de bf       	out	0x3e, r29	; 62
      e0:	cd bf       	out	0x3d, r28	; 61

000000e2 <__do_copy_data>:
      e2:	10 e0       	ldi	r17, 0x00	; 0
      e4:	a0 e6       	ldi	r26, 0x60	; 96
      e6:	b0 e0       	ldi	r27, 0x00	; 0
      e8:	e0 e1       	ldi	r30, 0x10	; 16
      ea:	f4 e1       	ldi	r31, 0x14	; 20
      ec:	02 c0       	rjmp	.+4      	; 0xf2 <__do_copy_data+0x10>
      ee:	05 90       	lpm	r0, Z+
      f0:	0d 92       	st	X+, r0
      f2:	ac 3b       	cpi	r26, 0xBC	; 188
      f4:	b1 07       	cpc	r27, r17
      f6:	d9 f7       	brne	.-10     	; 0xee <__do_copy_data+0xc>

000000f8 <__do_clear_bss>:
      f8:	20 e0       	ldi	r18, 0x00	; 0
      fa:	ac eb       	ldi	r26, 0xBC	; 188
      fc:	b0 e0       	ldi	r27, 0x00	; 0
      fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
     100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
     102:	a1 3d       	cpi	r26, 0xD1	; 209
     104:	b2 07       	cpc	r27, r18
     106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
     108:	0e 94 83 02 	call	0x506	; 0x506 <main>
     10c:	0c 94 06 0a 	jmp	0x140c	; 0x140c <_exit>

00000110 <__bad_interrupt>:
     110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <EEPROM_Read>:
	
}
/******************************************************************************************************************************************/
/**DESCRIPTION:-
 This Function is used To Read Data On External EEPROM Using I2C Communication*/
void EEPROM_Read ( uint8_t *data) {
     114:	cf 93       	push	r28
     116:	df 93       	push	r29
     118:	ec 01       	movw	r28, r24

	if(I2C_start()==EVENT_OK){															//Send a Starting Bit and Wait For ACK
     11a:	0e 94 64 05 	call	0xac8	; 0xac8 <I2C_start>
     11e:	81 11       	cpse	r24, r1
     120:	0e c0       	rjmp	.+28     	; 0x13e <EEPROM_Read+0x2a>
		if(I2C_addressEvent(0xA0,READ)==AD_R_SENT_ACK_OK){								//Send an Initializer "0b1010" Specified In the Data Sheet  and an Event Type "R/W" and Wait For ACK
     122:	61 e0       	ldi	r22, 0x01	; 1
     124:	80 ea       	ldi	r24, 0xA0	; 160
     126:	0e 94 77 05 	call	0xaee	; 0xaee <I2C_addressEvent>
     12a:	86 30       	cpi	r24, 0x06	; 6
     12c:	41 f4       	brne	.+16     	; 0x13e <EEPROM_Read+0x2a>
			if(I2C_receiveData(data,NACK)== DATA_RECIEVE_NACK_OK){						//Send an Address In the EEPROM  To Start Reading From It		
     12e:	61 e0       	ldi	r22, 0x01	; 1
     130:	ce 01       	movw	r24, r28
     132:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <I2C_receiveData>
     136:	8d 30       	cpi	r24, 0x0D	; 13
     138:	11 f4       	brne	.+4      	; 0x13e <EEPROM_Read+0x2a>
				I2C_stop();
     13a:	0e 94 c8 05 	call	0xb90	; 0xb90 <I2C_stop>
			}
			
		}
	}
	
}
     13e:	df 91       	pop	r29
     140:	cf 91       	pop	r28
     142:	08 95       	ret

00000144 <EEPROM_Read_String>:
/**********************************************************************************************************************************************/
void EEPROM_Read_String(uint8_t * a_STR){
     144:	cf 92       	push	r12
     146:	df 92       	push	r13
     148:	ef 92       	push	r14
     14a:	ff 92       	push	r15
     14c:	0f 93       	push	r16
     14e:	1f 93       	push	r17
     150:	cf 93       	push	r28
     152:	df 93       	push	r29
     154:	7c 01       	movw	r14, r24
     156:	ec 01       	movw	r28, r24
     158:	8c 01       	movw	r16, r24
     15a:	00 5f       	subi	r16, 0xF0	; 240
     15c:	1f 4f       	sbci	r17, 0xFF	; 255
	uint8_t LV_Index_I=0;

	for (LV_Index_I=0;LV_Index_I<16;LV_Index_I++)
	{
		EEPROM_Read(&a_STR[LV_Index_I]);
     15e:	6e 01       	movw	r12, r28
     160:	ce 01       	movw	r24, r28
     162:	0e 94 8a 00 	call	0x114	; 0x114 <EEPROM_Read>
     166:	21 96       	adiw	r28, 0x01	; 1
		
	LCD_Write_Number((uint32_t)a_STR[LV_Index_I]);
     168:	f6 01       	movw	r30, r12
     16a:	60 81       	ld	r22, Z
     16c:	70 e0       	ldi	r23, 0x00	; 0
     16e:	80 e0       	ldi	r24, 0x00	; 0
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	0e 94 21 02 	call	0x442	; 0x442 <LCD_Write_Number>
}
/**********************************************************************************************************************************************/
void EEPROM_Read_String(uint8_t * a_STR){
	uint8_t LV_Index_I=0;

	for (LV_Index_I=0;LV_Index_I<16;LV_Index_I++)
     176:	c0 17       	cp	r28, r16
     178:	d1 07       	cpc	r29, r17
     17a:	89 f7       	brne	.-30     	; 0x15e <EEPROM_Read_String+0x1a>
	LCD_Write_Number((uint32_t)a_STR[LV_Index_I]);
	}
	LV_Index_I=16;
	

LCD_GoTo(2,0);
     17c:	60 e0       	ldi	r22, 0x00	; 0
     17e:	82 e0       	ldi	r24, 0x02	; 2
     180:	0e 94 75 02 	call	0x4ea	; 0x4ea <LCD_GoTo>
     184:	f4 e1       	ldi	r31, 0x14	; 20
     186:	ef 0e       	add	r14, r31
     188:	f1 1c       	adc	r15, r1
if (LV_Index_I>=15)
{

	for (LV_Index_I=16;LV_Index_I<20;LV_Index_I++)
	{
		EEPROM_Read(&a_STR[LV_Index_I]);
     18a:	e8 01       	movw	r28, r16
     18c:	c8 01       	movw	r24, r16
     18e:	0e 94 8a 00 	call	0x114	; 0x114 <EEPROM_Read>
     192:	0f 5f       	subi	r16, 0xFF	; 255
     194:	1f 4f       	sbci	r17, 0xFF	; 255
		LCD_Write_Number((uint32_t)a_STR[LV_Index_I]);
     196:	68 81       	ld	r22, Y
     198:	70 e0       	ldi	r23, 0x00	; 0
     19a:	80 e0       	ldi	r24, 0x00	; 0
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	0e 94 21 02 	call	0x442	; 0x442 <LCD_Write_Number>

LCD_GoTo(2,0);
if (LV_Index_I>=15)
{

	for (LV_Index_I=16;LV_Index_I<20;LV_Index_I++)
     1a2:	0e 15       	cp	r16, r14
     1a4:	1f 05       	cpc	r17, r15
     1a6:	89 f7       	brne	.-30     	; 0x18a <EEPROM_Read_String+0x46>
		EEPROM_Read(&a_STR[LV_Index_I]);
		LCD_Write_Number((uint32_t)a_STR[LV_Index_I]);
	}
}

}
     1a8:	df 91       	pop	r29
     1aa:	cf 91       	pop	r28
     1ac:	1f 91       	pop	r17
     1ae:	0f 91       	pop	r16
     1b0:	ff 90       	pop	r15
     1b2:	ef 90       	pop	r14
     1b4:	df 90       	pop	r13
     1b6:	cf 90       	pop	r12
     1b8:	08 95       	ret

000001ba <EEPROM_Write_WithSize>:

/******************************************/

void EEPROM_Write_WithSize (uint8_t *data, uint8_t *_address,uint8_t LV_Length){
     1ba:	ef 92       	push	r14
     1bc:	ff 92       	push	r15
     1be:	0f 93       	push	r16
     1c0:	1f 93       	push	r17
     1c2:	cf 93       	push	r28
     1c4:	8c 01       	movw	r16, r24
     1c6:	7b 01       	movw	r14, r22
     1c8:	c4 2f       	mov	r28, r20
	
	uint8_t LV_Index_I=0;	
	
	if(I2C_start()==EVENT_OK){										//Send a Starting Bit and Wait For ACK
     1ca:	0e 94 64 05 	call	0xac8	; 0xac8 <I2C_start>
     1ce:	81 11       	cpse	r24, r1
     1d0:	18 c0       	rjmp	.+48     	; 0x202 <EEPROM_Write_WithSize+0x48>
		if(I2C_addressEvent(0xa0,WRITE)==AD_W_SENT_ACK_OK){			//Send an Initializer "0b1010" Specified In the Data Sheet  and an Event Type "R/W" and Wait For ACK
     1d2:	60 e0       	ldi	r22, 0x00	; 0
     1d4:	80 ea       	ldi	r24, 0xA0	; 160
     1d6:	0e 94 77 05 	call	0xaee	; 0xaee <I2C_addressEvent>
     1da:	82 30       	cpi	r24, 0x02	; 2
     1dc:	91 f4       	brne	.+36     	; 0x202 <EEPROM_Write_WithSize+0x48>
			if(I2C_sendData(_address)== DATA_SENT_ACK_OK){			//Send an Address In the EEPROM  To Start Writing In It
     1de:	c7 01       	movw	r24, r14
     1e0:	0e 94 ae 05 	call	0xb5c	; 0xb5c <I2C_sendData>
     1e4:	89 30       	cpi	r24, 0x09	; 9
     1e6:	69 f4       	brne	.+26     	; 0x202 <EEPROM_Write_WithSize+0x48>
				for (LV_Index_I=0;LV_Index_I<LV_Length;){		//To Send The Whole Data String
     1e8:	cc 23       	and	r28, r28
     1ea:	59 f0       	breq	.+22     	; 0x202 <EEPROM_Write_WithSize+0x48>
     1ec:	f1 2c       	mov	r15, r1
					if(I2C_sendData(&data[LV_Index_I])== DATA_SENT_ACK_OK){		//Send Data Byte By Byte and Wait For AcK Each Time
     1ee:	c8 01       	movw	r24, r16
     1f0:	8f 0d       	add	r24, r15
     1f2:	91 1d       	adc	r25, r1
     1f4:	0e 94 ae 05 	call	0xb5c	; 0xb5c <I2C_sendData>
     1f8:	89 30       	cpi	r24, 0x09	; 9
     1fa:	09 f4       	brne	.+2      	; 0x1fe <EEPROM_Write_WithSize+0x44>
						
						LV_Index_I++;
     1fc:	f3 94       	inc	r15
	uint8_t LV_Index_I=0;	
	
	if(I2C_start()==EVENT_OK){										//Send a Starting Bit and Wait For ACK
		if(I2C_addressEvent(0xa0,WRITE)==AD_W_SENT_ACK_OK){			//Send an Initializer "0b1010" Specified In the Data Sheet  and an Event Type "R/W" and Wait For ACK
			if(I2C_sendData(_address)== DATA_SENT_ACK_OK){			//Send an Address In the EEPROM  To Start Writing In It
				for (LV_Index_I=0;LV_Index_I<LV_Length;){		//To Send The Whole Data String
     1fe:	fc 16       	cp	r15, r28
     200:	b0 f3       	brcs	.-20     	; 0x1ee <EEPROM_Write_WithSize+0x34>
				
			}
		}
	}
	
	I2C_stop();															//End Of Communication
     202:	0e 94 c8 05 	call	0xb90	; 0xb90 <I2C_stop>
	
}
     206:	cf 91       	pop	r28
     208:	1f 91       	pop	r17
     20a:	0f 91       	pop	r16
     20c:	ff 90       	pop	r15
     20e:	ef 90       	pop	r14
     210:	08 95       	ret

00000212 <LCD_WRITE_COMMAND>:
/**DESCRIPTION:-
  This Function Clears The LCD
  **/
void LCD_Clear(void)
{
	LCD_WRITE_COMMAND(0x01);
     212:	cf 93       	push	r28
     214:	c8 2f       	mov	r28, r24
     216:	60 e0       	ldi	r22, 0x00	; 0
     218:	8a e1       	ldi	r24, 0x1A	; 26
     21a:	0e 94 8a 04 	call	0x914	; 0x914 <DIO_WRITEPIN>
     21e:	60 e0       	ldi	r22, 0x00	; 0
     220:	8b e1       	ldi	r24, 0x1B	; 27
     222:	0e 94 8a 04 	call	0x914	; 0x914 <DIO_WRITEPIN>
     226:	c4 fb       	bst	r28, 4
     228:	66 27       	eor	r22, r22
     22a:	60 f9       	bld	r22, 0
     22c:	84 e1       	ldi	r24, 0x14	; 20
     22e:	0e 94 8a 04 	call	0x914	; 0x914 <DIO_WRITEPIN>
     232:	c5 fb       	bst	r28, 5
     234:	66 27       	eor	r22, r22
     236:	60 f9       	bld	r22, 0
     238:	85 e1       	ldi	r24, 0x15	; 21
     23a:	0e 94 8a 04 	call	0x914	; 0x914 <DIO_WRITEPIN>
     23e:	c6 fb       	bst	r28, 6
     240:	66 27       	eor	r22, r22
     242:	60 f9       	bld	r22, 0
     244:	86 e1       	ldi	r24, 0x16	; 22
     246:	0e 94 8a 04 	call	0x914	; 0x914 <DIO_WRITEPIN>
     24a:	6c 2f       	mov	r22, r28
     24c:	66 1f       	adc	r22, r22
     24e:	66 27       	eor	r22, r22
     250:	66 1f       	adc	r22, r22
     252:	87 e1       	ldi	r24, 0x17	; 23
     254:	0e 94 8a 04 	call	0x914	; 0x914 <DIO_WRITEPIN>
     258:	61 e0       	ldi	r22, 0x01	; 1
     25a:	8c e1       	ldi	r24, 0x1C	; 28
     25c:	0e 94 8a 04 	call	0x914	; 0x914 <DIO_WRITEPIN>
     260:	89 ef       	ldi	r24, 0xF9	; 249
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	01 97       	sbiw	r24, 0x01	; 1
     266:	f1 f7       	brne	.-4      	; 0x264 <LCD_WRITE_COMMAND+0x52>
     268:	00 c0       	rjmp	.+0      	; 0x26a <LCD_WRITE_COMMAND+0x58>
     26a:	00 00       	nop
     26c:	60 e0       	ldi	r22, 0x00	; 0
     26e:	8c e1       	ldi	r24, 0x1C	; 28
     270:	0e 94 8a 04 	call	0x914	; 0x914 <DIO_WRITEPIN>
     274:	89 ef       	ldi	r24, 0xF9	; 249
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	01 97       	sbiw	r24, 0x01	; 1
     27a:	f1 f7       	brne	.-4      	; 0x278 <LCD_WRITE_COMMAND+0x66>
     27c:	00 c0       	rjmp	.+0      	; 0x27e <LCD_WRITE_COMMAND+0x6c>
     27e:	00 00       	nop
     280:	6c 2f       	mov	r22, r28
     282:	61 70       	andi	r22, 0x01	; 1
     284:	84 e1       	ldi	r24, 0x14	; 20
     286:	0e 94 8a 04 	call	0x914	; 0x914 <DIO_WRITEPIN>
     28a:	c1 fb       	bst	r28, 1
     28c:	66 27       	eor	r22, r22
     28e:	60 f9       	bld	r22, 0
     290:	85 e1       	ldi	r24, 0x15	; 21
     292:	0e 94 8a 04 	call	0x914	; 0x914 <DIO_WRITEPIN>
     296:	c2 fb       	bst	r28, 2
     298:	66 27       	eor	r22, r22
     29a:	60 f9       	bld	r22, 0
     29c:	86 e1       	ldi	r24, 0x16	; 22
     29e:	0e 94 8a 04 	call	0x914	; 0x914 <DIO_WRITEPIN>
     2a2:	c3 fb       	bst	r28, 3
     2a4:	66 27       	eor	r22, r22
     2a6:	60 f9       	bld	r22, 0
     2a8:	87 e1       	ldi	r24, 0x17	; 23
     2aa:	0e 94 8a 04 	call	0x914	; 0x914 <DIO_WRITEPIN>
     2ae:	61 e0       	ldi	r22, 0x01	; 1
     2b0:	8c e1       	ldi	r24, 0x1C	; 28
     2b2:	0e 94 8a 04 	call	0x914	; 0x914 <DIO_WRITEPIN>
     2b6:	89 ef       	ldi	r24, 0xF9	; 249
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	01 97       	sbiw	r24, 0x01	; 1
     2bc:	f1 f7       	brne	.-4      	; 0x2ba <LCD_WRITE_COMMAND+0xa8>
     2be:	00 c0       	rjmp	.+0      	; 0x2c0 <LCD_WRITE_COMMAND+0xae>
     2c0:	00 00       	nop
     2c2:	60 e0       	ldi	r22, 0x00	; 0
     2c4:	8c e1       	ldi	r24, 0x1C	; 28
     2c6:	0e 94 8a 04 	call	0x914	; 0x914 <DIO_WRITEPIN>
     2ca:	89 ef       	ldi	r24, 0xF9	; 249
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	01 97       	sbiw	r24, 0x01	; 1
     2d0:	f1 f7       	brne	.-4      	; 0x2ce <LCD_WRITE_COMMAND+0xbc>
     2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <LCD_WRITE_COMMAND+0xc2>
     2d4:	00 00       	nop
     2d6:	cf 91       	pop	r28
     2d8:	08 95       	ret

000002da <LCD_WRITE_DATA>:
     2da:	cf 93       	push	r28
     2dc:	c8 2f       	mov	r28, r24
     2de:	61 e0       	ldi	r22, 0x01	; 1
     2e0:	8a e1       	ldi	r24, 0x1A	; 26
     2e2:	0e 94 8a 04 	call	0x914	; 0x914 <DIO_WRITEPIN>
     2e6:	60 e0       	ldi	r22, 0x00	; 0
     2e8:	8b e1       	ldi	r24, 0x1B	; 27
     2ea:	0e 94 8a 04 	call	0x914	; 0x914 <DIO_WRITEPIN>
     2ee:	c4 fb       	bst	r28, 4
     2f0:	66 27       	eor	r22, r22
     2f2:	60 f9       	bld	r22, 0
     2f4:	84 e1       	ldi	r24, 0x14	; 20
     2f6:	0e 94 8a 04 	call	0x914	; 0x914 <DIO_WRITEPIN>
     2fa:	c5 fb       	bst	r28, 5
     2fc:	66 27       	eor	r22, r22
     2fe:	60 f9       	bld	r22, 0
     300:	85 e1       	ldi	r24, 0x15	; 21
     302:	0e 94 8a 04 	call	0x914	; 0x914 <DIO_WRITEPIN>
     306:	c6 fb       	bst	r28, 6
     308:	66 27       	eor	r22, r22
     30a:	60 f9       	bld	r22, 0
     30c:	86 e1       	ldi	r24, 0x16	; 22
     30e:	0e 94 8a 04 	call	0x914	; 0x914 <DIO_WRITEPIN>
     312:	6c 2f       	mov	r22, r28
     314:	66 1f       	adc	r22, r22
     316:	66 27       	eor	r22, r22
     318:	66 1f       	adc	r22, r22
     31a:	87 e1       	ldi	r24, 0x17	; 23
     31c:	0e 94 8a 04 	call	0x914	; 0x914 <DIO_WRITEPIN>
     320:	61 e0       	ldi	r22, 0x01	; 1
     322:	8c e1       	ldi	r24, 0x1C	; 28
     324:	0e 94 8a 04 	call	0x914	; 0x914 <DIO_WRITEPIN>
     328:	89 ef       	ldi	r24, 0xF9	; 249
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	01 97       	sbiw	r24, 0x01	; 1
     32e:	f1 f7       	brne	.-4      	; 0x32c <LCD_WRITE_DATA+0x52>
     330:	00 c0       	rjmp	.+0      	; 0x332 <LCD_WRITE_DATA+0x58>
     332:	00 00       	nop
     334:	60 e0       	ldi	r22, 0x00	; 0
     336:	8c e1       	ldi	r24, 0x1C	; 28
     338:	0e 94 8a 04 	call	0x914	; 0x914 <DIO_WRITEPIN>
     33c:	89 ef       	ldi	r24, 0xF9	; 249
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	01 97       	sbiw	r24, 0x01	; 1
     342:	f1 f7       	brne	.-4      	; 0x340 <LCD_WRITE_DATA+0x66>
     344:	00 c0       	rjmp	.+0      	; 0x346 <LCD_WRITE_DATA+0x6c>
     346:	00 00       	nop
     348:	6c 2f       	mov	r22, r28
     34a:	61 70       	andi	r22, 0x01	; 1
     34c:	84 e1       	ldi	r24, 0x14	; 20
     34e:	0e 94 8a 04 	call	0x914	; 0x914 <DIO_WRITEPIN>
     352:	c1 fb       	bst	r28, 1
     354:	66 27       	eor	r22, r22
     356:	60 f9       	bld	r22, 0
     358:	85 e1       	ldi	r24, 0x15	; 21
     35a:	0e 94 8a 04 	call	0x914	; 0x914 <DIO_WRITEPIN>
     35e:	c2 fb       	bst	r28, 2
     360:	66 27       	eor	r22, r22
     362:	60 f9       	bld	r22, 0
     364:	86 e1       	ldi	r24, 0x16	; 22
     366:	0e 94 8a 04 	call	0x914	; 0x914 <DIO_WRITEPIN>
     36a:	c3 fb       	bst	r28, 3
     36c:	66 27       	eor	r22, r22
     36e:	60 f9       	bld	r22, 0
     370:	87 e1       	ldi	r24, 0x17	; 23
     372:	0e 94 8a 04 	call	0x914	; 0x914 <DIO_WRITEPIN>
     376:	61 e0       	ldi	r22, 0x01	; 1
     378:	8c e1       	ldi	r24, 0x1C	; 28
     37a:	0e 94 8a 04 	call	0x914	; 0x914 <DIO_WRITEPIN>
     37e:	89 ef       	ldi	r24, 0xF9	; 249
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	01 97       	sbiw	r24, 0x01	; 1
     384:	f1 f7       	brne	.-4      	; 0x382 <LCD_WRITE_DATA+0xa8>
     386:	00 c0       	rjmp	.+0      	; 0x388 <LCD_WRITE_DATA+0xae>
     388:	00 00       	nop
     38a:	60 e0       	ldi	r22, 0x00	; 0
     38c:	8c e1       	ldi	r24, 0x1C	; 28
     38e:	0e 94 8a 04 	call	0x914	; 0x914 <DIO_WRITEPIN>
     392:	89 ef       	ldi	r24, 0xF9	; 249
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	01 97       	sbiw	r24, 0x01	; 1
     398:	f1 f7       	brne	.-4      	; 0x396 <LCD_WRITE_DATA+0xbc>
     39a:	00 c0       	rjmp	.+0      	; 0x39c <LCD_WRITE_DATA+0xc2>
     39c:	00 00       	nop
     39e:	cf 91       	pop	r28
     3a0:	08 95       	ret

000003a2 <LCD_INIT>:
     3a2:	60 e0       	ldi	r22, 0x00	; 0
     3a4:	84 e0       	ldi	r24, 0x04	; 4
     3a6:	0e 94 88 03 	call	0x710	; 0x710 <DIO_INITPIN>
     3aa:	60 e0       	ldi	r22, 0x00	; 0
     3ac:	85 e0       	ldi	r24, 0x05	; 5
     3ae:	0e 94 88 03 	call	0x710	; 0x710 <DIO_INITPIN>
     3b2:	60 e0       	ldi	r22, 0x00	; 0
     3b4:	86 e0       	ldi	r24, 0x06	; 6
     3b6:	0e 94 88 03 	call	0x710	; 0x710 <DIO_INITPIN>
     3ba:	60 e0       	ldi	r22, 0x00	; 0
     3bc:	87 e0       	ldi	r24, 0x07	; 7
     3be:	0e 94 88 03 	call	0x710	; 0x710 <DIO_INITPIN>
     3c2:	60 e0       	ldi	r22, 0x00	; 0
     3c4:	8a e1       	ldi	r24, 0x1A	; 26
     3c6:	0e 94 88 03 	call	0x710	; 0x710 <DIO_INITPIN>
     3ca:	60 e0       	ldi	r22, 0x00	; 0
     3cc:	8b e1       	ldi	r24, 0x1B	; 27
     3ce:	0e 94 88 03 	call	0x710	; 0x710 <DIO_INITPIN>
     3d2:	60 e0       	ldi	r22, 0x00	; 0
     3d4:	8c e1       	ldi	r24, 0x1C	; 28
     3d6:	0e 94 88 03 	call	0x710	; 0x710 <DIO_INITPIN>
     3da:	83 ed       	ldi	r24, 0xD3	; 211
     3dc:	90 e3       	ldi	r25, 0x30	; 48
     3de:	01 97       	sbiw	r24, 0x01	; 1
     3e0:	f1 f7       	brne	.-4      	; 0x3de <LCD_INIT+0x3c>
     3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <LCD_INIT+0x42>
     3e4:	00 00       	nop
     3e6:	82 e0       	ldi	r24, 0x02	; 2
     3e8:	0e 94 09 01 	call	0x212	; 0x212 <LCD_WRITE_COMMAND>
     3ec:	89 ef       	ldi	r24, 0xF9	; 249
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	01 97       	sbiw	r24, 0x01	; 1
     3f2:	f1 f7       	brne	.-4      	; 0x3f0 <LCD_INIT+0x4e>
     3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <LCD_INIT+0x54>
     3f6:	00 00       	nop
     3f8:	88 e2       	ldi	r24, 0x28	; 40
     3fa:	0e 94 09 01 	call	0x212	; 0x212 <LCD_WRITE_COMMAND>
     3fe:	89 ef       	ldi	r24, 0xF9	; 249
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	01 97       	sbiw	r24, 0x01	; 1
     404:	f1 f7       	brne	.-4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     406:	00 c0       	rjmp	.+0      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     408:	00 00       	nop
     40a:	8c e0       	ldi	r24, 0x0C	; 12
     40c:	0e 94 09 01 	call	0x212	; 0x212 <LCD_WRITE_COMMAND>
     410:	89 ef       	ldi	r24, 0xF9	; 249
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	01 97       	sbiw	r24, 0x01	; 1
     416:	f1 f7       	brne	.-4      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     418:	00 c0       	rjmp	.+0      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     41a:	00 00       	nop
     41c:	81 e0       	ldi	r24, 0x01	; 1
     41e:	0e 94 09 01 	call	0x212	; 0x212 <LCD_WRITE_COMMAND>
     422:	83 ef       	ldi	r24, 0xF3	; 243
     424:	91 e0       	ldi	r25, 0x01	; 1
     426:	01 97       	sbiw	r24, 0x01	; 1
     428:	f1 f7       	brne	.-4      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     42a:	00 c0       	rjmp	.+0      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     42c:	00 00       	nop
     42e:	86 e0       	ldi	r24, 0x06	; 6
     430:	0e 94 09 01 	call	0x212	; 0x212 <LCD_WRITE_COMMAND>
     434:	89 ef       	ldi	r24, 0xF9	; 249
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	01 97       	sbiw	r24, 0x01	; 1
     43a:	f1 f7       	brne	.-4      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     43c:	00 c0       	rjmp	.+0      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     43e:	00 00       	nop
     440:	08 95       	ret

00000442 <LCD_Write_Number>:
     442:	8f 92       	push	r8
     444:	9f 92       	push	r9
     446:	af 92       	push	r10
     448:	bf 92       	push	r11
     44a:	ef 92       	push	r14
     44c:	ff 92       	push	r15
     44e:	1f 93       	push	r17
     450:	cf 93       	push	r28
     452:	df 93       	push	r29
     454:	cd b7       	in	r28, 0x3d	; 61
     456:	de b7       	in	r29, 0x3e	; 62
     458:	60 97       	sbiw	r28, 0x10	; 16
     45a:	0f b6       	in	r0, 0x3f	; 63
     45c:	f8 94       	cli
     45e:	de bf       	out	0x3e, r29	; 62
     460:	0f be       	out	0x3f, r0	; 63
     462:	cd bf       	out	0x3d, r28	; 61
     464:	61 15       	cp	r22, r1
     466:	71 05       	cpc	r23, r1
     468:	81 05       	cpc	r24, r1
     46a:	91 05       	cpc	r25, r1
     46c:	21 f4       	brne	.+8      	; 0x476 <LCD_Write_Number+0x34>
     46e:	80 e3       	ldi	r24, 0x30	; 48
     470:	0e 94 6d 01 	call	0x2da	; 0x2da <LCD_WRITE_DATA>
     474:	2a c0       	rjmp	.+84     	; 0x4ca <LCD_Write_Number+0x88>
     476:	10 e0       	ldi	r17, 0x00	; 0
     478:	0f 2e       	mov	r0, r31
     47a:	fa e0       	ldi	r31, 0x0A	; 10
     47c:	8f 2e       	mov	r8, r31
     47e:	91 2c       	mov	r9, r1
     480:	a1 2c       	mov	r10, r1
     482:	b1 2c       	mov	r11, r1
     484:	f0 2d       	mov	r31, r0
     486:	ee 24       	eor	r14, r14
     488:	e3 94       	inc	r14
     48a:	f1 2c       	mov	r15, r1
     48c:	ec 0e       	add	r14, r28
     48e:	fd 1e       	adc	r15, r29
     490:	e1 0e       	add	r14, r17
     492:	f1 1c       	adc	r15, r1
     494:	a5 01       	movw	r20, r10
     496:	94 01       	movw	r18, r8
     498:	0e 94 56 06 	call	0xcac	; 0xcac <__udivmodsi4>
     49c:	60 5d       	subi	r22, 0xD0	; 208
     49e:	f7 01       	movw	r30, r14
     4a0:	60 83       	st	Z, r22
     4a2:	1f 5f       	subi	r17, 0xFF	; 255
     4a4:	62 2f       	mov	r22, r18
     4a6:	73 2f       	mov	r23, r19
     4a8:	84 2f       	mov	r24, r20
     4aa:	95 2f       	mov	r25, r21
     4ac:	61 15       	cp	r22, r1
     4ae:	71 05       	cpc	r23, r1
     4b0:	81 05       	cpc	r24, r1
     4b2:	91 05       	cpc	r25, r1
     4b4:	41 f7       	brne	.-48     	; 0x486 <LCD_Write_Number+0x44>
     4b6:	11 23       	and	r17, r17
     4b8:	41 f0       	breq	.+16     	; 0x4ca <LCD_Write_Number+0x88>
     4ba:	fe 01       	movw	r30, r28
     4bc:	e1 0f       	add	r30, r17
     4be:	f1 1d       	adc	r31, r1
     4c0:	80 81       	ld	r24, Z
     4c2:	0e 94 6d 01 	call	0x2da	; 0x2da <LCD_WRITE_DATA>
     4c6:	11 50       	subi	r17, 0x01	; 1
     4c8:	c1 f7       	brne	.-16     	; 0x4ba <LCD_Write_Number+0x78>
     4ca:	60 96       	adiw	r28, 0x10	; 16
     4cc:	0f b6       	in	r0, 0x3f	; 63
     4ce:	f8 94       	cli
     4d0:	de bf       	out	0x3e, r29	; 62
     4d2:	0f be       	out	0x3f, r0	; 63
     4d4:	cd bf       	out	0x3d, r28	; 61
     4d6:	df 91       	pop	r29
     4d8:	cf 91       	pop	r28
     4da:	1f 91       	pop	r17
     4dc:	ff 90       	pop	r15
     4de:	ef 90       	pop	r14
     4e0:	bf 90       	pop	r11
     4e2:	af 90       	pop	r10
     4e4:	9f 90       	pop	r9
     4e6:	8f 90       	pop	r8
     4e8:	08 95       	ret

000004ea <LCD_GoTo>:
  This Function Takes a Specific Line and a Cell On The LCD and Displays the Data In That Location
  **/
void LCD_GoTo(uint8_t a_line,uint8_t a_cell)
{
//0x80 this is from data sheet to write an address on the DDRAM"screen"*/
	if (a_line==1)
     4ea:	81 30       	cpi	r24, 0x01	; 1
     4ec:	29 f4       	brne	.+10     	; 0x4f8 <LCD_GoTo+0xe>
	{
		LCD_WRITE_COMMAND(0x80+a_cell);    /*0x80 means we ant to write an address and a_cell is the address we want*/
     4ee:	80 e8       	ldi	r24, 0x80	; 128
     4f0:	86 0f       	add	r24, r22
     4f2:	0e 94 09 01 	call	0x212	; 0x212 <LCD_WRITE_COMMAND>
     4f6:	08 95       	ret
	}
	else if (a_line==2)
     4f8:	82 30       	cpi	r24, 0x02	; 2
     4fa:	21 f4       	brne	.+8      	; 0x504 <LCD_GoTo+0x1a>
	{
		LCD_WRITE_COMMAND(0x80+0x40+a_cell);  /*0x40 to start from cell 0 at line 2 from the data sheet*/	
     4fc:	80 ec       	ldi	r24, 0xC0	; 192
     4fe:	86 0f       	add	r24, r22
     500:	0e 94 09 01 	call	0x212	; 0x212 <LCD_WRITE_COMMAND>
     504:	08 95       	ret

00000506 <main>:
#include "application/app.h"
#include <util/delay.h>
#define F_CPU   8000000u
uint8_t ad=0x00,ad2=0x10,str1[20]={0},ad3=0b1010000,ad4=0b1010001;
int main(void)
{
     506:	3f 92       	push	r3
     508:	4f 92       	push	r4
     50a:	5f 92       	push	r5
     50c:	6f 92       	push	r6
     50e:	7f 92       	push	r7
     510:	8f 92       	push	r8
     512:	9f 92       	push	r9
     514:	af 92       	push	r10
     516:	bf 92       	push	r11
     518:	cf 92       	push	r12
     51a:	df 92       	push	r13
     51c:	ef 92       	push	r14
     51e:	ff 92       	push	r15
     520:	0f 93       	push	r16
     522:	1f 93       	push	r17
     524:	cf 93       	push	r28
     526:	df 93       	push	r29
     528:	cd b7       	in	r28, 0x3d	; 61
     52a:	de b7       	in	r29, 0x3e	; 62
     52c:	a0 97       	sbiw	r28, 0x20	; 32
     52e:	0f b6       	in	r0, 0x3f	; 63
     530:	f8 94       	cli
     532:	de bf       	out	0x3e, r29	; 62
     534:	0f be       	out	0x3f, r0	; 63
     536:	cd bf       	out	0x3d, r28	; 61
	
	// Programming mode
	DIO_INITPIN(pinb0,OUTPUT);
     538:	60 e0       	ldi	r22, 0x00	; 0
     53a:	88 e0       	ldi	r24, 0x08	; 8
     53c:	0e 94 88 03 	call	0x710	; 0x710 <DIO_INITPIN>
	DIO_WRITEPIN(pinb0,HIGH);
     540:	61 e0       	ldi	r22, 0x01	; 1
     542:	88 e0       	ldi	r24, 0x08	; 8
     544:	0e 94 8a 04 	call	0x914	; 0x914 <DIO_WRITEPIN>
	LCD_INIT();
     548:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LCD_INIT>
	USART_init();
     54c:	0e 94 fe 05 	call	0xbfc	; 0xbfc <USART_init>
	I2C_init(I2C_PRESCALER_16);
     550:	82 e0       	ldi	r24, 0x02	; 2
     552:	0e 94 31 05 	call	0xa62	; 0xa62 <I2C_init>
	//******************************************************************************************************
	
	
	// PAN RECIEVE AND SEND
	unsigned char arr_pan[16]={0};
     556:	8e 01       	movw	r16, r28
     558:	0f 5f       	subi	r16, 0xFF	; 255
     55a:	1f 4f       	sbci	r17, 0xFF	; 255
     55c:	80 e1       	ldi	r24, 0x10	; 16
     55e:	f8 01       	movw	r30, r16
     560:	11 92       	st	Z+, r1
     562:	8a 95       	dec	r24
     564:	e9 f7       	brne	.-6      	; 0x560 <main+0x5a>
	USART_Transmit_string ("Please Enter Card PAN:");
     566:	81 e6       	ldi	r24, 0x61	; 97
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	0e 94 0f 06 	call	0xc1e	; 0xc1e <USART_Transmit_string>
	char *pan =  USART_receive_string(arr_pan);
     56e:	c8 01       	movw	r24, r16
     570:	0e 94 25 06 	call	0xc4a	; 0xc4a <USART_receive_string>
     574:	8c 01       	movw	r16, r24
	USART_transmit('\n');
     576:	8a e0       	ldi	r24, 0x0A	; 10
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	0e 94 07 06 	call	0xc0e	; 0xc0e <USART_transmit>
     57e:	f8 01       	movw	r30, r16
     580:	98 01       	movw	r18, r16
     582:	20 5f       	subi	r18, 0xF0	; 240
     584:	3f 4f       	sbci	r19, 0xFF	; 255
	for (int i=0;i<16;i++)
	{
		pan[i]=pan[i]-'30';
     586:	80 81       	ld	r24, Z
     588:	80 53       	subi	r24, 0x30	; 48
     58a:	81 93       	st	Z+, r24
	// PAN RECIEVE AND SEND
	unsigned char arr_pan[16]={0};
	USART_Transmit_string ("Please Enter Card PAN:");
	char *pan =  USART_receive_string(arr_pan);
	USART_transmit('\n');
	for (int i=0;i<16;i++)
     58c:	2e 17       	cp	r18, r30
     58e:	3f 07       	cpc	r19, r31
     590:	d1 f7       	brne	.-12     	; 0x586 <main+0x80>
	{
		pan[i]=pan[i]-'30';
	}
	EEPROM_Write_WithSize(pan,&ad,16); //---------------------------
     592:	40 e1       	ldi	r20, 0x10	; 16
     594:	60 ed       	ldi	r22, 0xD0	; 208
     596:	70 e0       	ldi	r23, 0x00	; 0
     598:	c8 01       	movw	r24, r16
     59a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <EEPROM_Write_WithSize>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     59e:	87 ea       	ldi	r24, 0xA7	; 167
     5a0:	91 e6       	ldi	r25, 0x61	; 97
     5a2:	01 97       	sbiw	r24, 0x01	; 1
     5a4:	f1 f7       	brne	.-4      	; 0x5a2 <main+0x9c>
     5a6:	00 c0       	rjmp	.+0      	; 0x5a8 <main+0xa2>
     5a8:	00 00       	nop
   _delay_ms(100);
	//*********************************************************************************************************
	// PIN RECIEVE AND SEND
	uint8_t pinRecieved='0';
     5aa:	10 e3       	ldi	r17, 0x30	; 48
	char *pin;
	while (pinRecieved=='0')
	{
	// PIN RECIEVE 
	unsigned char arr_pin[7]={0};
     5ac:	0f 2e       	mov	r0, r31
     5ae:	f7 e0       	ldi	r31, 0x07	; 7
     5b0:	5f 2e       	mov	r5, r31
     5b2:	f0 2d       	mov	r31, r0
     5b4:	6e 01       	movw	r12, r28
     5b6:	98 e1       	ldi	r25, 0x18	; 24
     5b8:	c9 0e       	add	r12, r25
     5ba:	d1 1c       	adc	r13, r1
	unsigned char arr_npin[7]={0};
     5bc:	3e 01       	movw	r6, r28
     5be:	e1 e1       	ldi	r30, 0x11	; 17
     5c0:	6e 0e       	add	r6, r30
     5c2:	71 1c       	adc	r7, r1
     5c4:	4e 01       	movw	r8, r28
     5c6:	fc e1       	ldi	r31, 0x1C	; 28
     5c8:	8f 0e       	add	r8, r31
     5ca:	91 1c       	adc	r9, r1
	uint8_t pinRecieved='0';
	char *pin;
	while (pinRecieved=='0')
	{
	// PIN RECIEVE 
	unsigned char arr_pin[7]={0};
     5cc:	f6 01       	movw	r30, r12
     5ce:	25 2d       	mov	r18, r5
     5d0:	11 92       	st	Z+, r1
     5d2:	2a 95       	dec	r18
     5d4:	e9 f7       	brne	.-6      	; 0x5d0 <main+0xca>
	unsigned char arr_npin[7]={0};
     5d6:	f3 01       	movw	r30, r6
     5d8:	25 2d       	mov	r18, r5
     5da:	11 92       	st	Z+, r1
     5dc:	2a 95       	dec	r18
     5de:	e9 f7       	brne	.-6      	; 0x5da <main+0xd4>
	USART_Transmit_string ("Please Enter New PIN:");
     5e0:	88 e7       	ldi	r24, 0x78	; 120
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	0e 94 0f 06 	call	0xc1e	; 0xc1e <USART_Transmit_string>
	pin =  USART_receive_string(arr_pin);
     5e8:	c6 01       	movw	r24, r12
     5ea:	0e 94 25 06 	call	0xc4a	; 0xc4a <USART_receive_string>
     5ee:	98 a3       	std	Y+32, r25	; 0x20
     5f0:	8f 8f       	std	Y+31, r24	; 0x1f
     5f2:	5c 01       	movw	r10, r24
	//**************************************************
	// CONFIRM PIN RECIEVE
	USART_Transmit_string ("Please Confirm New PIN:");
     5f4:	8e e8       	ldi	r24, 0x8E	; 142
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	0e 94 0f 06 	call	0xc1e	; 0xc1e <USART_Transmit_string>
	char *new_pin = USART_receive_string(arr_npin);
     5fc:	c3 01       	movw	r24, r6
     5fe:	0e 94 25 06 	call	0xc4a	; 0xc4a <USART_receive_string>
     602:	38 2e       	mov	r3, r24
     604:	49 2e       	mov	r4, r25
   //***********************************************
   // CHECK PIN CONDITION
	if (arr_pin[4] == 0 && arr_pin[3]!= 0) 
     606:	8c 8d       	ldd	r24, Y+28	; 0x1c
     608:	81 11       	cpse	r24, r1
     60a:	16 c0       	rjmp	.+44     	; 0x638 <main+0x132>
     60c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     60e:	88 23       	and	r24, r24
     610:	99 f0       	breq	.+38     	; 0x638 <main+0x132>
     612:	7e 01       	movw	r14, r28
     614:	88 e1       	ldi	r24, 0x18	; 24
     616:	e8 0e       	add	r14, r24
     618:	f1 1c       	adc	r15, r1
     61a:	11 e3       	ldi	r17, 0x31	; 49
	{
	 pinRecieved='1';
	 	 for (int y=0;y<4;y++)
	 	 {
		 	 if (arr_pin[y]<48 || arr_pin[y]>57) 
     61c:	f7 01       	movw	r30, r14
     61e:	81 91       	ld	r24, Z+
     620:	7f 01       	movw	r14, r30
     622:	80 53       	subi	r24, 0x30	; 48
     624:	8a 30       	cpi	r24, 0x0A	; 10
     626:	28 f0       	brcs	.+10     	; 0x632 <main+0x12c>
			  {
				  USART_transmit('\n');  
     628:	8a e0       	ldi	r24, 0x0A	; 10
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	0e 94 07 06 	call	0xc0e	; 0xc0e <USART_transmit>
				  pinRecieved='0'; 
     630:	10 e3       	ldi	r17, 0x30	; 48
   //***********************************************
   // CHECK PIN CONDITION
	if (arr_pin[4] == 0 && arr_pin[3]!= 0) 
	{
	 pinRecieved='1';
	 	 for (int y=0;y<4;y++)
     632:	8e 14       	cp	r8, r14
     634:	9f 04       	cpc	r9, r15
     636:	91 f7       	brne	.-28     	; 0x61c <main+0x116>
     638:	a3 2d       	mov	r26, r3
     63a:	b4 2d       	mov	r27, r4
     63c:	ef 8d       	ldd	r30, Y+31	; 0x1f
     63e:	f8 a1       	ldd	r31, Y+32	; 0x20
     640:	9f 01       	movw	r18, r30
     642:	2c 5f       	subi	r18, 0xFC	; 252
     644:	3f 4f       	sbci	r19, 0xFF	; 255
		uint8_t npin = *(new_pin);
		uint8_t pin_in = *(pin);
		int c=0;
		for (c=0;c<4;c++)
		{
			if ((*(new_pin+c)) != (*(pin+c)) ) 
     646:	9d 91       	ld	r25, X+
     648:	81 91       	ld	r24, Z+
     64a:	98 13       	cpse	r25, r24
			{ 
				pinRecieved='0';
     64c:	10 e3       	ldi	r17, 0x30	; 48
	//**************************************************************
	// CHECK PIN CONFIRMATION
		uint8_t npin = *(new_pin);
		uint8_t pin_in = *(pin);
		int c=0;
		for (c=0;c<4;c++)
     64e:	e2 17       	cp	r30, r18
     650:	f3 07       	cpc	r31, r19
     652:	c9 f7       	brne	.-14     	; 0x646 <main+0x140>
			if ((*(new_pin+c)) != (*(pin+c)) ) 
			{ 
				pinRecieved='0';
			}
		}
		if (pinRecieved=='0') USART_Transmit_string ("Wrong PIN "); 	 
     654:	10 33       	cpi	r17, 0x30	; 48
     656:	61 f4       	brne	.+24     	; 0x670 <main+0x16a>
     658:	86 ea       	ldi	r24, 0xA6	; 166
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	0e 94 0f 06 	call	0xc1e	; 0xc1e <USART_Transmit_string>
     660:	b5 cf       	rjmp	.-150    	; 0x5cc <main+0xc6>
	}
	USART_Transmit_string (" finished ");

		for (int i=0;i<4;i++)
		{
			pin[i]=pin[i]-'30';
     662:	80 81       	ld	r24, Z
     664:	80 53       	subi	r24, 0x30	; 48
     666:	81 93       	st	Z+, r24
		}
		if (pinRecieved=='0') USART_Transmit_string ("Wrong PIN "); 	 
	}
	USART_Transmit_string (" finished ");

		for (int i=0;i<4;i++)
     668:	2e 17       	cp	r18, r30
     66a:	3f 07       	cpc	r19, r31
     66c:	d1 f7       	brne	.-12     	; 0x662 <main+0x15c>
     66e:	0a c0       	rjmp	.+20     	; 0x684 <main+0x17e>
				pinRecieved='0';
			}
		}
		if (pinRecieved=='0') USART_Transmit_string ("Wrong PIN "); 	 
	}
	USART_Transmit_string (" finished ");
     670:	81 eb       	ldi	r24, 0xB1	; 177
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	0e 94 0f 06 	call	0xc1e	; 0xc1e <USART_Transmit_string>
     678:	ef 8d       	ldd	r30, Y+31	; 0x1f
     67a:	f8 a1       	ldd	r31, Y+32	; 0x20
     67c:	95 01       	movw	r18, r10
     67e:	2c 5f       	subi	r18, 0xFC	; 252
     680:	3f 4f       	sbci	r19, 0xFF	; 255
     682:	ef cf       	rjmp	.-34     	; 0x662 <main+0x15c>

		for (int i=0;i<4;i++)
		{
			pin[i]=pin[i]-'30';
		}
		EEPROM_Write_WithSize(pin,&ad2,4);// Need No size init // SEND D0 at further input // write PAN to EEPROM
     684:	44 e0       	ldi	r20, 0x04	; 4
     686:	60 e6       	ldi	r22, 0x60	; 96
     688:	70 e0       	ldi	r23, 0x00	; 0
     68a:	c5 01       	movw	r24, r10
     68c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <EEPROM_Write_WithSize>
     690:	87 ea       	ldi	r24, 0xA7	; 167
     692:	91 e6       	ldi	r25, 0x61	; 97
     694:	01 97       	sbiw	r24, 0x01	; 1
     696:	f1 f7       	brne	.-4      	; 0x694 <main+0x18e>
     698:	00 c0       	rjmp	.+0      	; 0x69a <main+0x194>
     69a:	00 00       	nop
     69c:	9f e9       	ldi	r25, 0x9F	; 159
     69e:	e6 e8       	ldi	r30, 0x86	; 134
     6a0:	f1 e0       	ldi	r31, 0x01	; 1
     6a2:	91 50       	subi	r25, 0x01	; 1
     6a4:	e0 40       	sbci	r30, 0x00	; 0
     6a6:	f0 40       	sbci	r31, 0x00	; 0
     6a8:	e1 f7       	brne	.-8      	; 0x6a2 <main+0x19c>
     6aa:	00 c0       	rjmp	.+0      	; 0x6ac <main+0x1a6>
     6ac:	00 00       	nop
		_delay_ms(100);

// user mode
_delay_ms(500);
DIO_INITPIN(pinc0,OUTPUT);
     6ae:	60 e0       	ldi	r22, 0x00	; 0
     6b0:	80 e1       	ldi	r24, 0x10	; 16
     6b2:	0e 94 88 03 	call	0x710	; 0x710 <DIO_INITPIN>
DIO_INITPIN(pinc1,OUTPUT);
     6b6:	60 e0       	ldi	r22, 0x00	; 0
     6b8:	81 e1       	ldi	r24, 0x11	; 17
     6ba:	0e 94 88 03 	call	0x710	; 0x710 <DIO_INITPIN>
	DIO_WRITEPIN(pinc0,LOW);
     6be:	60 e0       	ldi	r22, 0x00	; 0
     6c0:	80 e1       	ldi	r24, 0x10	; 16
     6c2:	0e 94 8a 04 	call	0x914	; 0x914 <DIO_WRITEPIN>
		DIO_WRITEPIN(pinc1,LOW);
     6c6:	60 e0       	ldi	r22, 0x00	; 0
     6c8:	81 e1       	ldi	r24, 0x11	; 17
     6ca:	0e 94 8a 04 	call	0x914	; 0x914 <DIO_WRITEPIN>
	I2C_init(I2C_PRESCALER_16);
     6ce:	82 e0       	ldi	r24, 0x02	; 2
     6d0:	0e 94 31 05 	call	0xa62	; 0xa62 <I2C_init>
//USART_init();
//SPI_master_init();
//********************************************

EEPROM_Read_String(str1);	
     6d4:	8c eb       	ldi	r24, 0xBC	; 188
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	0e 94 a2 00 	call	0x144	; 0x144 <EEPROM_Read_String>
//USART_Transmit_string(str1);
//SPI_transmit_string(str1);

//*******************************************	*/		
}
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	a0 96       	adiw	r28, 0x20	; 32
     6e2:	0f b6       	in	r0, 0x3f	; 63
     6e4:	f8 94       	cli
     6e6:	de bf       	out	0x3e, r29	; 62
     6e8:	0f be       	out	0x3f, r0	; 63
     6ea:	cd bf       	out	0x3d, r28	; 61
     6ec:	df 91       	pop	r29
     6ee:	cf 91       	pop	r28
     6f0:	1f 91       	pop	r17
     6f2:	0f 91       	pop	r16
     6f4:	ff 90       	pop	r15
     6f6:	ef 90       	pop	r14
     6f8:	df 90       	pop	r13
     6fa:	cf 90       	pop	r12
     6fc:	bf 90       	pop	r11
     6fe:	af 90       	pop	r10
     700:	9f 90       	pop	r9
     702:	8f 90       	pop	r8
     704:	7f 90       	pop	r7
     706:	6f 90       	pop	r6
     708:	5f 90       	pop	r5
     70a:	4f 90       	pop	r4
     70c:	3f 90       	pop	r3
     70e:	08 95       	ret

00000710 <DIO_INITPIN>:
     710:	98 2f       	mov	r25, r24
     712:	96 95       	lsr	r25
     714:	96 95       	lsr	r25
     716:	96 95       	lsr	r25
     718:	95 30       	cpi	r25, 0x05	; 5
     71a:	08 f0       	brcs	.+2      	; 0x71e <DIO_INITPIN+0xe>
     71c:	f9 c0       	rjmp	.+498    	; 0x910 <__stack+0xb1>
     71e:	87 70       	andi	r24, 0x07	; 7
     720:	61 30       	cpi	r22, 0x01	; 1
     722:	31 f0       	breq	.+12     	; 0x730 <DIO_INITPIN+0x20>
     724:	08 f4       	brcc	.+2      	; 0x728 <DIO_INITPIN+0x18>
     726:	a4 c0       	rjmp	.+328    	; 0x870 <__stack+0x11>
     728:	62 30       	cpi	r22, 0x02	; 2
     72a:	09 f4       	brne	.+2      	; 0x72e <DIO_INITPIN+0x1e>
     72c:	51 c0       	rjmp	.+162    	; 0x7d0 <DIO_INITPIN+0xc0>
     72e:	ef c0       	rjmp	.+478    	; 0x90e <__stack+0xaf>
     730:	91 30       	cpi	r25, 0x01	; 1
     732:	c1 f0       	breq	.+48     	; 0x764 <DIO_INITPIN+0x54>
     734:	28 f0       	brcs	.+10     	; 0x740 <DIO_INITPIN+0x30>
     736:	92 30       	cpi	r25, 0x02	; 2
     738:	39 f1       	breq	.+78     	; 0x788 <DIO_INITPIN+0x78>
     73a:	93 30       	cpi	r25, 0x03	; 3
     73c:	b9 f1       	breq	.+110    	; 0x7ac <DIO_INITPIN+0x9c>
     73e:	e7 c0       	rjmp	.+462    	; 0x90e <__stack+0xaf>
     740:	4a b3       	in	r20, 0x1a	; 26
     742:	21 e0       	ldi	r18, 0x01	; 1
     744:	30 e0       	ldi	r19, 0x00	; 0
     746:	b9 01       	movw	r22, r18
     748:	02 c0       	rjmp	.+4      	; 0x74e <DIO_INITPIN+0x3e>
     74a:	66 0f       	add	r22, r22
     74c:	77 1f       	adc	r23, r23
     74e:	8a 95       	dec	r24
     750:	e2 f7       	brpl	.-8      	; 0x74a <DIO_INITPIN+0x3a>
     752:	cb 01       	movw	r24, r22
     754:	80 95       	com	r24
     756:	94 2f       	mov	r25, r20
     758:	98 23       	and	r25, r24
     75a:	9a bb       	out	0x1a, r25	; 26
     75c:	9b b3       	in	r25, 0x1b	; 27
     75e:	89 23       	and	r24, r25
     760:	8b bb       	out	0x1b, r24	; 27
     762:	d5 c0       	rjmp	.+426    	; 0x90e <__stack+0xaf>
     764:	47 b3       	in	r20, 0x17	; 23
     766:	21 e0       	ldi	r18, 0x01	; 1
     768:	30 e0       	ldi	r19, 0x00	; 0
     76a:	b9 01       	movw	r22, r18
     76c:	02 c0       	rjmp	.+4      	; 0x772 <DIO_INITPIN+0x62>
     76e:	66 0f       	add	r22, r22
     770:	77 1f       	adc	r23, r23
     772:	8a 95       	dec	r24
     774:	e2 f7       	brpl	.-8      	; 0x76e <DIO_INITPIN+0x5e>
     776:	cb 01       	movw	r24, r22
     778:	80 95       	com	r24
     77a:	94 2f       	mov	r25, r20
     77c:	98 23       	and	r25, r24
     77e:	97 bb       	out	0x17, r25	; 23
     780:	98 b3       	in	r25, 0x18	; 24
     782:	89 23       	and	r24, r25
     784:	88 bb       	out	0x18, r24	; 24
     786:	c3 c0       	rjmp	.+390    	; 0x90e <__stack+0xaf>
     788:	44 b3       	in	r20, 0x14	; 20
     78a:	21 e0       	ldi	r18, 0x01	; 1
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	b9 01       	movw	r22, r18
     790:	02 c0       	rjmp	.+4      	; 0x796 <DIO_INITPIN+0x86>
     792:	66 0f       	add	r22, r22
     794:	77 1f       	adc	r23, r23
     796:	8a 95       	dec	r24
     798:	e2 f7       	brpl	.-8      	; 0x792 <DIO_INITPIN+0x82>
     79a:	cb 01       	movw	r24, r22
     79c:	80 95       	com	r24
     79e:	94 2f       	mov	r25, r20
     7a0:	98 23       	and	r25, r24
     7a2:	94 bb       	out	0x14, r25	; 20
     7a4:	95 b3       	in	r25, 0x15	; 21
     7a6:	89 23       	and	r24, r25
     7a8:	85 bb       	out	0x15, r24	; 21
     7aa:	b1 c0       	rjmp	.+354    	; 0x90e <__stack+0xaf>
     7ac:	41 b3       	in	r20, 0x11	; 17
     7ae:	21 e0       	ldi	r18, 0x01	; 1
     7b0:	30 e0       	ldi	r19, 0x00	; 0
     7b2:	b9 01       	movw	r22, r18
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <DIO_INITPIN+0xaa>
     7b6:	66 0f       	add	r22, r22
     7b8:	77 1f       	adc	r23, r23
     7ba:	8a 95       	dec	r24
     7bc:	e2 f7       	brpl	.-8      	; 0x7b6 <DIO_INITPIN+0xa6>
     7be:	cb 01       	movw	r24, r22
     7c0:	80 95       	com	r24
     7c2:	94 2f       	mov	r25, r20
     7c4:	98 23       	and	r25, r24
     7c6:	91 bb       	out	0x11, r25	; 17
     7c8:	92 b3       	in	r25, 0x12	; 18
     7ca:	89 23       	and	r24, r25
     7cc:	82 bb       	out	0x12, r24	; 18
     7ce:	9f c0       	rjmp	.+318    	; 0x90e <__stack+0xaf>
     7d0:	91 30       	cpi	r25, 0x01	; 1
     7d2:	c1 f0       	breq	.+48     	; 0x804 <DIO_INITPIN+0xf4>
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <DIO_INITPIN+0xd0>
     7d6:	92 30       	cpi	r25, 0x02	; 2
     7d8:	39 f1       	breq	.+78     	; 0x828 <DIO_INITPIN+0x118>
     7da:	93 30       	cpi	r25, 0x03	; 3
     7dc:	b9 f1       	breq	.+110    	; 0x84c <DIO_INITPIN+0x13c>
     7de:	97 c0       	rjmp	.+302    	; 0x90e <__stack+0xaf>
     7e0:	4a b3       	in	r20, 0x1a	; 26
     7e2:	21 e0       	ldi	r18, 0x01	; 1
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	b9 01       	movw	r22, r18
     7e8:	02 c0       	rjmp	.+4      	; 0x7ee <DIO_INITPIN+0xde>
     7ea:	66 0f       	add	r22, r22
     7ec:	77 1f       	adc	r23, r23
     7ee:	8a 95       	dec	r24
     7f0:	e2 f7       	brpl	.-8      	; 0x7ea <DIO_INITPIN+0xda>
     7f2:	cb 01       	movw	r24, r22
     7f4:	96 2f       	mov	r25, r22
     7f6:	90 95       	com	r25
     7f8:	94 23       	and	r25, r20
     7fa:	9a bb       	out	0x1a, r25	; 26
     7fc:	9b b3       	in	r25, 0x1b	; 27
     7fe:	89 2b       	or	r24, r25
     800:	8b bb       	out	0x1b, r24	; 27
     802:	85 c0       	rjmp	.+266    	; 0x90e <__stack+0xaf>
     804:	47 b3       	in	r20, 0x17	; 23
     806:	21 e0       	ldi	r18, 0x01	; 1
     808:	30 e0       	ldi	r19, 0x00	; 0
     80a:	b9 01       	movw	r22, r18
     80c:	02 c0       	rjmp	.+4      	; 0x812 <DIO_INITPIN+0x102>
     80e:	66 0f       	add	r22, r22
     810:	77 1f       	adc	r23, r23
     812:	8a 95       	dec	r24
     814:	e2 f7       	brpl	.-8      	; 0x80e <DIO_INITPIN+0xfe>
     816:	cb 01       	movw	r24, r22
     818:	96 2f       	mov	r25, r22
     81a:	90 95       	com	r25
     81c:	94 23       	and	r25, r20
     81e:	97 bb       	out	0x17, r25	; 23
     820:	98 b3       	in	r25, 0x18	; 24
     822:	89 2b       	or	r24, r25
     824:	88 bb       	out	0x18, r24	; 24
     826:	73 c0       	rjmp	.+230    	; 0x90e <__stack+0xaf>
     828:	44 b3       	in	r20, 0x14	; 20
     82a:	21 e0       	ldi	r18, 0x01	; 1
     82c:	30 e0       	ldi	r19, 0x00	; 0
     82e:	b9 01       	movw	r22, r18
     830:	02 c0       	rjmp	.+4      	; 0x836 <DIO_INITPIN+0x126>
     832:	66 0f       	add	r22, r22
     834:	77 1f       	adc	r23, r23
     836:	8a 95       	dec	r24
     838:	e2 f7       	brpl	.-8      	; 0x832 <DIO_INITPIN+0x122>
     83a:	cb 01       	movw	r24, r22
     83c:	96 2f       	mov	r25, r22
     83e:	90 95       	com	r25
     840:	94 23       	and	r25, r20
     842:	94 bb       	out	0x14, r25	; 20
     844:	95 b3       	in	r25, 0x15	; 21
     846:	89 2b       	or	r24, r25
     848:	85 bb       	out	0x15, r24	; 21
     84a:	61 c0       	rjmp	.+194    	; 0x90e <__stack+0xaf>
     84c:	41 b3       	in	r20, 0x11	; 17
     84e:	21 e0       	ldi	r18, 0x01	; 1
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	b9 01       	movw	r22, r18
     854:	02 c0       	rjmp	.+4      	; 0x85a <DIO_INITPIN+0x14a>
     856:	66 0f       	add	r22, r22
     858:	77 1f       	adc	r23, r23
     85a:	8a 95       	dec	r24
     85c:	e2 f7       	brpl	.-8      	; 0x856 <DIO_INITPIN+0x146>
     85e:	cb 01       	movw	r24, r22
     860:	96 2f       	mov	r25, r22
     862:	90 95       	com	r25
     864:	94 23       	and	r25, r20
     866:	91 bb       	out	0x11, r25	; 17
     868:	92 b3       	in	r25, 0x12	; 18
     86a:	89 2b       	or	r24, r25
     86c:	82 bb       	out	0x12, r24	; 18
     86e:	4f c0       	rjmp	.+158    	; 0x90e <__stack+0xaf>
     870:	91 30       	cpi	r25, 0x01	; 1
     872:	c1 f0       	breq	.+48     	; 0x8a4 <__stack+0x45>
     874:	28 f0       	brcs	.+10     	; 0x880 <__stack+0x21>
     876:	92 30       	cpi	r25, 0x02	; 2
     878:	39 f1       	breq	.+78     	; 0x8c8 <__stack+0x69>
     87a:	93 30       	cpi	r25, 0x03	; 3
     87c:	b9 f1       	breq	.+110    	; 0x8ec <__stack+0x8d>
     87e:	47 c0       	rjmp	.+142    	; 0x90e <__stack+0xaf>
     880:	4b b3       	in	r20, 0x1b	; 27
     882:	21 e0       	ldi	r18, 0x01	; 1
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	b9 01       	movw	r22, r18
     888:	02 c0       	rjmp	.+4      	; 0x88e <__stack+0x2f>
     88a:	66 0f       	add	r22, r22
     88c:	77 1f       	adc	r23, r23
     88e:	8a 95       	dec	r24
     890:	e2 f7       	brpl	.-8      	; 0x88a <__stack+0x2b>
     892:	cb 01       	movw	r24, r22
     894:	96 2f       	mov	r25, r22
     896:	90 95       	com	r25
     898:	94 23       	and	r25, r20
     89a:	9b bb       	out	0x1b, r25	; 27
     89c:	9a b3       	in	r25, 0x1a	; 26
     89e:	89 2b       	or	r24, r25
     8a0:	8a bb       	out	0x1a, r24	; 26
     8a2:	35 c0       	rjmp	.+106    	; 0x90e <__stack+0xaf>
     8a4:	48 b3       	in	r20, 0x18	; 24
     8a6:	21 e0       	ldi	r18, 0x01	; 1
     8a8:	30 e0       	ldi	r19, 0x00	; 0
     8aa:	b9 01       	movw	r22, r18
     8ac:	02 c0       	rjmp	.+4      	; 0x8b2 <__stack+0x53>
     8ae:	66 0f       	add	r22, r22
     8b0:	77 1f       	adc	r23, r23
     8b2:	8a 95       	dec	r24
     8b4:	e2 f7       	brpl	.-8      	; 0x8ae <__stack+0x4f>
     8b6:	cb 01       	movw	r24, r22
     8b8:	96 2f       	mov	r25, r22
     8ba:	90 95       	com	r25
     8bc:	94 23       	and	r25, r20
     8be:	98 bb       	out	0x18, r25	; 24
     8c0:	97 b3       	in	r25, 0x17	; 23
     8c2:	89 2b       	or	r24, r25
     8c4:	87 bb       	out	0x17, r24	; 23
     8c6:	23 c0       	rjmp	.+70     	; 0x90e <__stack+0xaf>
     8c8:	45 b3       	in	r20, 0x15	; 21
     8ca:	21 e0       	ldi	r18, 0x01	; 1
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	b9 01       	movw	r22, r18
     8d0:	02 c0       	rjmp	.+4      	; 0x8d6 <__stack+0x77>
     8d2:	66 0f       	add	r22, r22
     8d4:	77 1f       	adc	r23, r23
     8d6:	8a 95       	dec	r24
     8d8:	e2 f7       	brpl	.-8      	; 0x8d2 <__stack+0x73>
     8da:	cb 01       	movw	r24, r22
     8dc:	96 2f       	mov	r25, r22
     8de:	90 95       	com	r25
     8e0:	94 23       	and	r25, r20
     8e2:	95 bb       	out	0x15, r25	; 21
     8e4:	94 b3       	in	r25, 0x14	; 20
     8e6:	89 2b       	or	r24, r25
     8e8:	84 bb       	out	0x14, r24	; 20
     8ea:	11 c0       	rjmp	.+34     	; 0x90e <__stack+0xaf>
     8ec:	42 b3       	in	r20, 0x12	; 18
     8ee:	21 e0       	ldi	r18, 0x01	; 1
     8f0:	30 e0       	ldi	r19, 0x00	; 0
     8f2:	b9 01       	movw	r22, r18
     8f4:	02 c0       	rjmp	.+4      	; 0x8fa <__stack+0x9b>
     8f6:	66 0f       	add	r22, r22
     8f8:	77 1f       	adc	r23, r23
     8fa:	8a 95       	dec	r24
     8fc:	e2 f7       	brpl	.-8      	; 0x8f6 <__stack+0x97>
     8fe:	cb 01       	movw	r24, r22
     900:	96 2f       	mov	r25, r22
     902:	90 95       	com	r25
     904:	94 23       	and	r25, r20
     906:	92 bb       	out	0x12, r25	; 18
     908:	91 b3       	in	r25, 0x11	; 17
     90a:	89 2b       	or	r24, r25
     90c:	81 bb       	out	0x11, r24	; 17
     90e:	08 95       	ret
     910:	82 e0       	ldi	r24, 0x02	; 2
     912:	08 95       	ret

00000914 <DIO_WRITEPIN>:
     914:	98 2f       	mov	r25, r24
     916:	96 95       	lsr	r25
     918:	96 95       	lsr	r25
     91a:	96 95       	lsr	r25
     91c:	95 30       	cpi	r25, 0x05	; 5
     91e:	08 f0       	brcs	.+2      	; 0x922 <DIO_WRITEPIN+0xe>
     920:	8e c0       	rjmp	.+284    	; 0xa3e <DIO_WRITEPIN+0x12a>
     922:	63 30       	cpi	r22, 0x03	; 3
     924:	08 f0       	brcs	.+2      	; 0x928 <DIO_WRITEPIN+0x14>
     926:	8d c0       	rjmp	.+282    	; 0xa42 <DIO_WRITEPIN+0x12e>
     928:	87 70       	andi	r24, 0x07	; 7
     92a:	61 30       	cpi	r22, 0x01	; 1
     92c:	09 f0       	breq	.+2      	; 0x930 <DIO_WRITEPIN+0x1c>
     92e:	40 c0       	rjmp	.+128    	; 0x9b0 <DIO_WRITEPIN+0x9c>
     930:	91 30       	cpi	r25, 0x01	; 1
     932:	a1 f0       	breq	.+40     	; 0x95c <DIO_WRITEPIN+0x48>
     934:	28 f0       	brcs	.+10     	; 0x940 <DIO_WRITEPIN+0x2c>
     936:	92 30       	cpi	r25, 0x02	; 2
     938:	f9 f0       	breq	.+62     	; 0x978 <DIO_WRITEPIN+0x64>
     93a:	93 30       	cpi	r25, 0x03	; 3
     93c:	59 f1       	breq	.+86     	; 0x994 <DIO_WRITEPIN+0x80>
     93e:	83 c0       	rjmp	.+262    	; 0xa46 <DIO_WRITEPIN+0x132>
     940:	4b b3       	in	r20, 0x1b	; 27
     942:	21 e0       	ldi	r18, 0x01	; 1
     944:	30 e0       	ldi	r19, 0x00	; 0
     946:	b9 01       	movw	r22, r18
     948:	02 c0       	rjmp	.+4      	; 0x94e <DIO_WRITEPIN+0x3a>
     94a:	66 0f       	add	r22, r22
     94c:	77 1f       	adc	r23, r23
     94e:	8a 95       	dec	r24
     950:	e2 f7       	brpl	.-8      	; 0x94a <DIO_WRITEPIN+0x36>
     952:	cb 01       	movw	r24, r22
     954:	84 2b       	or	r24, r20
     956:	8b bb       	out	0x1b, r24	; 27
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	08 95       	ret
     95c:	48 b3       	in	r20, 0x18	; 24
     95e:	21 e0       	ldi	r18, 0x01	; 1
     960:	30 e0       	ldi	r19, 0x00	; 0
     962:	b9 01       	movw	r22, r18
     964:	02 c0       	rjmp	.+4      	; 0x96a <DIO_WRITEPIN+0x56>
     966:	66 0f       	add	r22, r22
     968:	77 1f       	adc	r23, r23
     96a:	8a 95       	dec	r24
     96c:	e2 f7       	brpl	.-8      	; 0x966 <DIO_WRITEPIN+0x52>
     96e:	cb 01       	movw	r24, r22
     970:	84 2b       	or	r24, r20
     972:	88 bb       	out	0x18, r24	; 24
     974:	80 e0       	ldi	r24, 0x00	; 0
     976:	08 95       	ret
     978:	45 b3       	in	r20, 0x15	; 21
     97a:	21 e0       	ldi	r18, 0x01	; 1
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	b9 01       	movw	r22, r18
     980:	02 c0       	rjmp	.+4      	; 0x986 <DIO_WRITEPIN+0x72>
     982:	66 0f       	add	r22, r22
     984:	77 1f       	adc	r23, r23
     986:	8a 95       	dec	r24
     988:	e2 f7       	brpl	.-8      	; 0x982 <DIO_WRITEPIN+0x6e>
     98a:	cb 01       	movw	r24, r22
     98c:	84 2b       	or	r24, r20
     98e:	85 bb       	out	0x15, r24	; 21
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	08 95       	ret
     994:	42 b3       	in	r20, 0x12	; 18
     996:	21 e0       	ldi	r18, 0x01	; 1
     998:	30 e0       	ldi	r19, 0x00	; 0
     99a:	b9 01       	movw	r22, r18
     99c:	02 c0       	rjmp	.+4      	; 0x9a2 <DIO_WRITEPIN+0x8e>
     99e:	66 0f       	add	r22, r22
     9a0:	77 1f       	adc	r23, r23
     9a2:	8a 95       	dec	r24
     9a4:	e2 f7       	brpl	.-8      	; 0x99e <DIO_WRITEPIN+0x8a>
     9a6:	cb 01       	movw	r24, r22
     9a8:	84 2b       	or	r24, r20
     9aa:	82 bb       	out	0x12, r24	; 18
     9ac:	80 e0       	ldi	r24, 0x00	; 0
     9ae:	08 95       	ret
     9b0:	61 11       	cpse	r22, r1
     9b2:	44 c0       	rjmp	.+136    	; 0xa3c <DIO_WRITEPIN+0x128>
     9b4:	91 30       	cpi	r25, 0x01	; 1
     9b6:	a9 f0       	breq	.+42     	; 0x9e2 <DIO_WRITEPIN+0xce>
     9b8:	28 f0       	brcs	.+10     	; 0x9c4 <DIO_WRITEPIN+0xb0>
     9ba:	92 30       	cpi	r25, 0x02	; 2
     9bc:	09 f1       	breq	.+66     	; 0xa00 <DIO_WRITEPIN+0xec>
     9be:	93 30       	cpi	r25, 0x03	; 3
     9c0:	71 f1       	breq	.+92     	; 0xa1e <DIO_WRITEPIN+0x10a>
     9c2:	43 c0       	rjmp	.+134    	; 0xa4a <DIO_WRITEPIN+0x136>
     9c4:	4b b3       	in	r20, 0x1b	; 27
     9c6:	21 e0       	ldi	r18, 0x01	; 1
     9c8:	30 e0       	ldi	r19, 0x00	; 0
     9ca:	b9 01       	movw	r22, r18
     9cc:	02 c0       	rjmp	.+4      	; 0x9d2 <DIO_WRITEPIN+0xbe>
     9ce:	66 0f       	add	r22, r22
     9d0:	77 1f       	adc	r23, r23
     9d2:	8a 95       	dec	r24
     9d4:	e2 f7       	brpl	.-8      	; 0x9ce <DIO_WRITEPIN+0xba>
     9d6:	cb 01       	movw	r24, r22
     9d8:	80 95       	com	r24
     9da:	84 23       	and	r24, r20
     9dc:	8b bb       	out	0x1b, r24	; 27
     9de:	80 e0       	ldi	r24, 0x00	; 0
     9e0:	08 95       	ret
     9e2:	48 b3       	in	r20, 0x18	; 24
     9e4:	21 e0       	ldi	r18, 0x01	; 1
     9e6:	30 e0       	ldi	r19, 0x00	; 0
     9e8:	b9 01       	movw	r22, r18
     9ea:	02 c0       	rjmp	.+4      	; 0x9f0 <DIO_WRITEPIN+0xdc>
     9ec:	66 0f       	add	r22, r22
     9ee:	77 1f       	adc	r23, r23
     9f0:	8a 95       	dec	r24
     9f2:	e2 f7       	brpl	.-8      	; 0x9ec <DIO_WRITEPIN+0xd8>
     9f4:	cb 01       	movw	r24, r22
     9f6:	80 95       	com	r24
     9f8:	84 23       	and	r24, r20
     9fa:	88 bb       	out	0x18, r24	; 24
     9fc:	80 e0       	ldi	r24, 0x00	; 0
     9fe:	08 95       	ret
     a00:	45 b3       	in	r20, 0x15	; 21
     a02:	21 e0       	ldi	r18, 0x01	; 1
     a04:	30 e0       	ldi	r19, 0x00	; 0
     a06:	b9 01       	movw	r22, r18
     a08:	02 c0       	rjmp	.+4      	; 0xa0e <DIO_WRITEPIN+0xfa>
     a0a:	66 0f       	add	r22, r22
     a0c:	77 1f       	adc	r23, r23
     a0e:	8a 95       	dec	r24
     a10:	e2 f7       	brpl	.-8      	; 0xa0a <DIO_WRITEPIN+0xf6>
     a12:	cb 01       	movw	r24, r22
     a14:	80 95       	com	r24
     a16:	84 23       	and	r24, r20
     a18:	85 bb       	out	0x15, r24	; 21
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	08 95       	ret
     a1e:	42 b3       	in	r20, 0x12	; 18
     a20:	21 e0       	ldi	r18, 0x01	; 1
     a22:	30 e0       	ldi	r19, 0x00	; 0
     a24:	b9 01       	movw	r22, r18
     a26:	02 c0       	rjmp	.+4      	; 0xa2c <DIO_WRITEPIN+0x118>
     a28:	66 0f       	add	r22, r22
     a2a:	77 1f       	adc	r23, r23
     a2c:	8a 95       	dec	r24
     a2e:	e2 f7       	brpl	.-8      	; 0xa28 <DIO_WRITEPIN+0x114>
     a30:	cb 01       	movw	r24, r22
     a32:	80 95       	com	r24
     a34:	84 23       	and	r24, r20
     a36:	82 bb       	out	0x12, r24	; 18
     a38:	80 e0       	ldi	r24, 0x00	; 0
     a3a:	08 95       	ret
     a3c:	08 95       	ret
     a3e:	82 e0       	ldi	r24, 0x02	; 2
     a40:	08 95       	ret
     a42:	83 e0       	ldi	r24, 0x03	; 3
     a44:	08 95       	ret
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	08 95       	ret
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	08 95       	ret

00000a4e <__vector_5>:
     a4e:	1f 92       	push	r1
     a50:	0f 92       	push	r0
     a52:	0f b6       	in	r0, 0x3f	; 63
     a54:	0f 92       	push	r0
     a56:	11 24       	eor	r1, r1
     a58:	0f 90       	pop	r0
     a5a:	0f be       	out	0x3f, r0	; 63
     a5c:	0f 90       	pop	r0
     a5e:	1f 90       	pop	r1
     a60:	18 95       	reti

00000a62 <I2C_init>:

/**DESCRIPTION:-
 This Function is used To Initialize the Communication With a Certain BitRate*/
void I2C_init(I2C_PRESCALER prescaler){
	
	TWSR = 0x00 ;												//To Make Sure No Previous scaler Is Set
     a62:	11 b8       	out	0x01, r1	; 1
	
	switch (prescaler){											//To Choose Between Different Set Of scalers 
     a64:	81 30       	cpi	r24, 0x01	; 1
     a66:	49 f0       	breq	.+18     	; 0xa7a <I2C_init+0x18>
     a68:	28 f0       	brcs	.+10     	; 0xa74 <I2C_init+0x12>
     a6a:	82 30       	cpi	r24, 0x02	; 2
     a6c:	49 f0       	breq	.+18     	; 0xa80 <I2C_init+0x1e>
     a6e:	83 30       	cpi	r24, 0x03	; 3
     a70:	51 f0       	breq	.+20     	; 0xa86 <I2C_init+0x24>
     a72:	0b c0       	rjmp	.+22     	; 0xa8a <I2C_init+0x28>
		case I2C_PRESCALER_1 :
		clear_bit(TWSR,TWPS0);
     a74:	08 98       	cbi	0x01, 0	; 1
		clear_bit(TWSR,TWPS1);
     a76:	09 98       	cbi	0x01, 1	; 1
		break;
     a78:	08 c0       	rjmp	.+16     	; 0xa8a <I2C_init+0x28>
		
		case I2C_PRESCALER_4 :
		set_bit(TWSR,TWPS0);
     a7a:	08 9a       	sbi	0x01, 0	; 1
		clear_bit(TWSR,TWPS1);
     a7c:	09 98       	cbi	0x01, 1	; 1
		break;
     a7e:	05 c0       	rjmp	.+10     	; 0xa8a <I2C_init+0x28>
		
		case I2C_PRESCALER_16 :
		clear_bit(TWSR,TWPS0);
     a80:	08 98       	cbi	0x01, 0	; 1
		set_bit(TWSR,TWPS1);
     a82:	09 9a       	sbi	0x01, 1	; 1
		break;
     a84:	02 c0       	rjmp	.+4      	; 0xa8a <I2C_init+0x28>
		
		
		case I2C_PRESCALER_64 :
		set_bit(TWSR,TWPS0);
     a86:	08 9a       	sbi	0x01, 0	; 1
		set_bit(TWSR,TWPS1);
     a88:	09 9a       	sbi	0x01, 1	; 1
		default:
		break;
	}
	
	
	TWBR  = BITRATE(TWSR);								//To Select The Division Factor For The BitRate Generator Which Generates The Master CLK
     a8a:	61 b1       	in	r22, 0x01	; 1
     a8c:	63 70       	andi	r22, 0x03	; 3
     a8e:	70 e0       	ldi	r23, 0x00	; 0
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	0e 94 88 07 	call	0xf10	; 0xf10 <__floatsisf>
     a98:	9b 01       	movw	r18, r22
     a9a:	ac 01       	movw	r20, r24
     a9c:	60 e0       	ldi	r22, 0x00	; 0
     a9e:	70 e0       	ldi	r23, 0x00	; 0
     aa0:	80 e8       	ldi	r24, 0x80	; 128
     aa2:	90 e4       	ldi	r25, 0x40	; 64
     aa4:	0e 94 22 08 	call	0x1044	; 0x1044 <pow>
     aa8:	9b 01       	movw	r18, r22
     aaa:	ac 01       	movw	r20, r24
     aac:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__addsf3>
     ab0:	9b 01       	movw	r18, r22
     ab2:	ac 01       	movw	r20, r24
     ab4:	60 e0       	ldi	r22, 0x00	; 0
     ab6:	70 e0       	ldi	r23, 0x00	; 0
     ab8:	80 e8       	ldi	r24, 0x80	; 128
     aba:	9f e4       	ldi	r25, 0x4F	; 79
     abc:	0e 94 e5 06 	call	0xdca	; 0xdca <__divsf3>
     ac0:	0e 94 57 07 	call	0xeae	; 0xeae <__fixunssfsi>
     ac4:	60 b9       	out	0x00, r22	; 0
     ac6:	08 95       	ret

00000ac8 <I2C_start>:
/*************************************************************************************************************************************************/
/**DESCRIPTION:-
 This Function is used To Enables The Communication And Send The Starting Bit*/
uint8_t I2C_start(){
	
	set_bit(TWCR,TWINT);  // clear flag
     ac8:	86 b7       	in	r24, 0x36	; 54
     aca:	80 68       	ori	r24, 0x80	; 128
     acc:	86 bf       	out	0x36, r24	; 54
	set_bit(TWCR,TWSTA);  // enable start condition
     ace:	86 b7       	in	r24, 0x36	; 54
     ad0:	80 62       	ori	r24, 0x20	; 32
     ad2:	86 bf       	out	0x36, r24	; 54
	set_bit(TWCR,TWEN);   // enable i2c
     ad4:	86 b7       	in	r24, 0x36	; 54
     ad6:	84 60       	ori	r24, 0x04	; 4
     ad8:	86 bf       	out	0x36, r24	; 54
	while(read_bit(TWCR,TWINT) != 1);  // wait for flag to set
     ada:	06 b6       	in	r0, 0x36	; 54
     adc:	07 fe       	sbrs	r0, 7
     ade:	fd cf       	rjmp	.-6      	; 0xada <I2C_start+0x12>
	
	if((TWSR & 0xf8) == START_SENT){   // check start condition status
     ae0:	91 b1       	in	r25, 0x01	; 1
     ae2:	98 7f       	andi	r25, 0xF8	; 248
     ae4:	81 e0       	ldi	r24, 0x01	; 1
     ae6:	98 30       	cpi	r25, 0x08	; 8
     ae8:	09 f4       	brne	.+2      	; 0xaec <I2C_start+0x24>
     aea:	80 e0       	ldi	r24, 0x00	; 0
	}else {
		
		return START_NOT_SENT ;
	}
	
}
     aec:	08 95       	ret

00000aee <I2C_addressEvent>:
/*******************************************************************************************************************************************/
/**DESCRIPTION:-
 This Function is used To Set The Slave Address For Communications And Send The Event Type Of The Master Either R/W*/

uint8_t I2C_addressEvent(uint8_t a_address ,R_W r_w ){
	switch(r_w){
     aee:	66 23       	and	r22, r22
     af0:	19 f0       	breq	.+6      	; 0xaf8 <I2C_addressEvent+0xa>
     af2:	61 30       	cpi	r22, 0x01	; 1
     af4:	a9 f0       	breq	.+42     	; 0xb20 <I2C_addressEvent+0x32>
     af6:	29 c0       	rjmp	.+82     	; 0xb4a <I2C_addressEvent+0x5c>
		
		case WRITE : 
		TWDR = a_address + WRITE ;				 //SET ADDRESS + WRITE
     af8:	83 b9       	out	0x03, r24	; 3
		
		set_bit(TWCR,TWINT);					 // clear flag
     afa:	86 b7       	in	r24, 0x36	; 54
     afc:	80 68       	ori	r24, 0x80	; 128
     afe:	86 bf       	out	0x36, r24	; 54
		set_bit(TWCR,TWEN);						// enable i2c
     b00:	86 b7       	in	r24, 0x36	; 54
     b02:	84 60       	ori	r24, 0x04	; 4
     b04:	86 bf       	out	0x36, r24	; 54
		while(read_bit(TWCR,TWINT) != 1);		// wait for flag to set
     b06:	06 b6       	in	r0, 0x36	; 54
     b08:	07 fe       	sbrs	r0, 7
     b0a:	fd cf       	rjmp	.-6      	; 0xb06 <I2C_addressEvent+0x18>
		
		if((TWSR & 0xf8) == AD_W_SENT_ACK){	// check status of sending address that we want to write in and ack received
     b0c:	81 b1       	in	r24, 0x01	; 1
     b0e:	88 7f       	andi	r24, 0xF8	; 248
     b10:	88 31       	cpi	r24, 0x18	; 24
     b12:	e1 f0       	breq	.+56     	; 0xb4c <I2C_addressEvent+0x5e>
			return AD_W_SENT_ACK_OK ;
		}
		else if ((TWSR & 0xf8) == AD_W_SENT_NACK){
     b14:	81 b1       	in	r24, 0x01	; 1
     b16:	88 7f       	andi	r24, 0xF8	; 248
     b18:	80 32       	cpi	r24, 0x20	; 32
     b1a:	d1 f0       	breq	.+52     	; 0xb50 <I2C_addressEvent+0x62>
			return AD_W_SENT_NACK_OK ;
		}
		else {
			
			return AD_W_SENT_FAILED ;
     b1c:	85 e0       	ldi	r24, 0x05	; 5
     b1e:	08 95       	ret
		break; // END OF WRITE CASE
		
		
		
		case READ :
		TWDR = a_address + READ ; //SET ADDRESS + read
     b20:	8f 5f       	subi	r24, 0xFF	; 255
     b22:	83 b9       	out	0x03, r24	; 3
		
		set_bit(TWCR,TWINT);  // clear flag
     b24:	86 b7       	in	r24, 0x36	; 54
     b26:	80 68       	ori	r24, 0x80	; 128
     b28:	86 bf       	out	0x36, r24	; 54
		set_bit(TWCR,TWEN);   // enable i2c
     b2a:	86 b7       	in	r24, 0x36	; 54
     b2c:	84 60       	ori	r24, 0x04	; 4
     b2e:	86 bf       	out	0x36, r24	; 54
		while(read_bit(TWCR,TWINT) != 1);  // wait for flag to set
     b30:	06 b6       	in	r0, 0x36	; 54
     b32:	07 fe       	sbrs	r0, 7
     b34:	fd cf       	rjmp	.-6      	; 0xb30 <I2C_addressEvent+0x42>
		
		if((TWSR & 0xf8) == AD_R_SENT_ACK){   // // check status of sending address that we want to read from and ack received
     b36:	81 b1       	in	r24, 0x01	; 1
     b38:	88 7f       	andi	r24, 0xF8	; 248
     b3a:	80 34       	cpi	r24, 0x40	; 64
     b3c:	59 f0       	breq	.+22     	; 0xb54 <I2C_addressEvent+0x66>
			return AD_R_SENT_ACK_OK ;
		}
		else if ((TWSR & 0xf8) == AD_R_SENT_NACK){
     b3e:	81 b1       	in	r24, 0x01	; 1
     b40:	88 7f       	andi	r24, 0xF8	; 248
     b42:	88 34       	cpi	r24, 0x48	; 72
     b44:	49 f0       	breq	.+18     	; 0xb58 <I2C_addressEvent+0x6a>
			return AD_R_SENT_NACK_OK ;
		}
		else {
				
			return AD_R_SENT_FAILED ;
     b46:	88 e0       	ldi	r24, 0x08	; 8
     b48:	08 95       	ret
		break;// END OF READ CASE
		
	}

	
}
     b4a:	08 95       	ret
		set_bit(TWCR,TWINT);					 // clear flag
		set_bit(TWCR,TWEN);						// enable i2c
		while(read_bit(TWCR,TWINT) != 1);		// wait for flag to set
		
		if((TWSR & 0xf8) == AD_W_SENT_ACK){	// check status of sending address that we want to write in and ack received
			return AD_W_SENT_ACK_OK ;
     b4c:	82 e0       	ldi	r24, 0x02	; 2
     b4e:	08 95       	ret
		}
		else if ((TWSR & 0xf8) == AD_W_SENT_NACK){
			return AD_W_SENT_NACK_OK ;
     b50:	83 e0       	ldi	r24, 0x03	; 3
     b52:	08 95       	ret
		set_bit(TWCR,TWINT);  // clear flag
		set_bit(TWCR,TWEN);   // enable i2c
		while(read_bit(TWCR,TWINT) != 1);  // wait for flag to set
		
		if((TWSR & 0xf8) == AD_R_SENT_ACK){   // // check status of sending address that we want to read from and ack received
			return AD_R_SENT_ACK_OK ;
     b54:	86 e0       	ldi	r24, 0x06	; 6
     b56:	08 95       	ret
		}
		else if ((TWSR & 0xf8) == AD_R_SENT_NACK){
			return AD_R_SENT_NACK_OK ;
     b58:	87 e0       	ldi	r24, 0x07	; 7
		break;// END OF READ CASE
		
	}

	
}
     b5a:	08 95       	ret

00000b5c <I2C_sendData>:
/********************************************************************************************************************************************/
/**DESCRIPTION:-
 This Function is used To Initialize Data Transfer */
uint8_t I2C_sendData(uint8_t *data ){
		
		TWDR = *data ;								//Write Data On Data Register
     b5c:	fc 01       	movw	r30, r24
     b5e:	80 81       	ld	r24, Z
     b60:	83 b9       	out	0x03, r24	; 3
		set_bit(TWCR,TWINT);						// clear flag
     b62:	86 b7       	in	r24, 0x36	; 54
     b64:	80 68       	ori	r24, 0x80	; 128
     b66:	86 bf       	out	0x36, r24	; 54
		set_bit(TWCR,TWEN);							// enable i2c
     b68:	86 b7       	in	r24, 0x36	; 54
     b6a:	84 60       	ori	r24, 0x04	; 4
     b6c:	86 bf       	out	0x36, r24	; 54
		while(read_bit(TWCR,TWINT) != 1);			// wait for flag to set
     b6e:	06 b6       	in	r0, 0x36	; 54
     b70:	07 fe       	sbrs	r0, 7
     b72:	fd cf       	rjmp	.-6      	; 0xb6e <I2C_sendData+0x12>
		
		if((TWSR & 0xf8) == DATA_SENT_ACK){		  // check status of sending data  and ack received
     b74:	81 b1       	in	r24, 0x01	; 1
     b76:	88 7f       	andi	r24, 0xF8	; 248
     b78:	88 32       	cpi	r24, 0x28	; 40
     b7a:	31 f0       	breq	.+12     	; 0xb88 <I2C_sendData+0x2c>
			return DATA_SENT_ACK_OK ;
		}
		else if ((TWSR & 0xf8) == DATA_SENT_NACK){
     b7c:	81 b1       	in	r24, 0x01	; 1
     b7e:	88 7f       	andi	r24, 0xF8	; 248
     b80:	80 33       	cpi	r24, 0x30	; 48
     b82:	21 f0       	breq	.+8      	; 0xb8c <I2C_sendData+0x30>
			return DATA_SENT_NACK_OK ;
		}
		else {
			
			return DATA_SENT_FAILED ;
     b84:	8b e0       	ldi	r24, 0x0B	; 11
     b86:	08 95       	ret
		set_bit(TWCR,TWINT);						// clear flag
		set_bit(TWCR,TWEN);							// enable i2c
		while(read_bit(TWCR,TWINT) != 1);			// wait for flag to set
		
		if((TWSR & 0xf8) == DATA_SENT_ACK){		  // check status of sending data  and ack received
			return DATA_SENT_ACK_OK ;
     b88:	89 e0       	ldi	r24, 0x09	; 9
     b8a:	08 95       	ret
		}
		else if ((TWSR & 0xf8) == DATA_SENT_NACK){
			return DATA_SENT_NACK_OK ;
     b8c:	8a e0       	ldi	r24, 0x0A	; 10
		else {
			
			return DATA_SENT_FAILED ;
		}
	
}
     b8e:	08 95       	ret

00000b90 <I2C_stop>:
/******************************************************************************************************************************************/
/**DESCRIPTION:-
 This Function is used To Write The Stop Bit For The Communication*/
void I2C_stop(){
	clear_bit(TWCR,TWSTA);		 // clear start
     b90:	86 b7       	in	r24, 0x36	; 54
     b92:	8f 7d       	andi	r24, 0xDF	; 223
     b94:	86 bf       	out	0x36, r24	; 54
	set_bit(TWCR,TWINT);		 // clear flag
     b96:	86 b7       	in	r24, 0x36	; 54
     b98:	80 68       	ori	r24, 0x80	; 128
     b9a:	86 bf       	out	0x36, r24	; 54
	set_bit(TWCR,TWSTO);		// enable stop condition
     b9c:	86 b7       	in	r24, 0x36	; 54
     b9e:	80 61       	ori	r24, 0x10	; 16
     ba0:	86 bf       	out	0x36, r24	; 54
	set_bit(TWCR,TWEN);			// enable i2c
     ba2:	86 b7       	in	r24, 0x36	; 54
     ba4:	84 60       	ori	r24, 0x04	; 4
     ba6:	86 bf       	out	0x36, r24	; 54
	while(read_bit(TWCR,TWSTO) != 0);  // wait for flag to set
     ba8:	06 b6       	in	r0, 0x36	; 54
     baa:	04 fc       	sbrc	r0, 4
     bac:	fd cf       	rjmp	.-6      	; 0xba8 <I2C_stop+0x18>
	
}
     bae:	08 95       	ret

00000bb0 <I2C_receiveData>:
/******************************************************************************************************************************************/
/**DESCRIPTION:-
 This Function is used To Receive Data From a Slave To Master*/
uint8_t I2C_receiveData(uint8_t *data, ACKOLEDGMENT ack){
     bb0:	fc 01       	movw	r30, r24
	
	switch(ack){ 
     bb2:	66 23       	and	r22, r22
     bb4:	19 f0       	breq	.+6      	; 0xbbc <I2C_receiveData+0xc>
     bb6:	61 30       	cpi	r22, 0x01	; 1
     bb8:	29 f0       	breq	.+10     	; 0xbc4 <I2C_receiveData+0x14>
     bba:	07 c0       	rjmp	.+14     	; 0xbca <I2C_receiveData+0x1a>
		case ACK :
		set_bit(TWCR,TWEA); 
     bbc:	86 b7       	in	r24, 0x36	; 54
     bbe:	80 64       	ori	r24, 0x40	; 64
     bc0:	86 bf       	out	0x36, r24	; 54
		break;
     bc2:	03 c0       	rjmp	.+6      	; 0xbca <I2C_receiveData+0x1a>
		
		case NACK :
		clear_bit(TWCR,TWEA);
     bc4:	86 b7       	in	r24, 0x36	; 54
     bc6:	8f 7b       	andi	r24, 0xBF	; 191
     bc8:	86 bf       	out	0x36, r24	; 54
		break;
		
	}
	
	set_bit(TWCR,TWINT);  // clear flag
     bca:	96 b7       	in	r25, 0x36	; 54
     bcc:	90 68       	ori	r25, 0x80	; 128
     bce:	96 bf       	out	0x36, r25	; 54
	set_bit(TWCR,TWEN);   // enable i2c
     bd0:	96 b7       	in	r25, 0x36	; 54
     bd2:	94 60       	ori	r25, 0x04	; 4
     bd4:	96 bf       	out	0x36, r25	; 54
	while(read_bit(TWCR,TWINT) != 1);  // wait for flag to set
     bd6:	06 b6       	in	r0, 0x36	; 54
     bd8:	07 fe       	sbrs	r0, 7
     bda:	fd cf       	rjmp	.-6      	; 0xbd6 <I2C_receiveData+0x26>
	*data = TWDR ;
     bdc:	83 b1       	in	r24, 0x03	; 3
     bde:	80 83       	st	Z, r24
	if((TWSR & 0xf8) == DATA_RECIEVE_ACK){    // check status of receiving data and ack received
     be0:	81 b1       	in	r24, 0x01	; 1
     be2:	88 7f       	andi	r24, 0xF8	; 248
     be4:	80 35       	cpi	r24, 0x50	; 80
     be6:	31 f0       	breq	.+12     	; 0xbf4 <I2C_receiveData+0x44>
		return DATA_RECIEVE_ACK_OK ;
	}
	else if ((TWSR & 0xf8) == DATA_RECIEVE_NACK){
     be8:	81 b1       	in	r24, 0x01	; 1
     bea:	88 7f       	andi	r24, 0xF8	; 248
     bec:	88 35       	cpi	r24, 0x58	; 88
     bee:	21 f0       	breq	.+8      	; 0xbf8 <I2C_receiveData+0x48>
		return DATA_RECIEVE_NACK_OK ;
	}
	else {
		
		return DATA_RECIEVE_FAILED ;
     bf0:	8e e0       	ldi	r24, 0x0E	; 14
     bf2:	08 95       	ret
	set_bit(TWCR,TWINT);  // clear flag
	set_bit(TWCR,TWEN);   // enable i2c
	while(read_bit(TWCR,TWINT) != 1);  // wait for flag to set
	*data = TWDR ;
	if((TWSR & 0xf8) == DATA_RECIEVE_ACK){    // check status of receiving data and ack received
		return DATA_RECIEVE_ACK_OK ;
     bf4:	8c e0       	ldi	r24, 0x0C	; 12
     bf6:	08 95       	ret
	}
	else if ((TWSR & 0xf8) == DATA_RECIEVE_NACK){
		return DATA_RECIEVE_NACK_OK ;
     bf8:	8d e0       	ldi	r24, 0x0D	; 13
		
		return DATA_RECIEVE_FAILED ;
	}
	

}
     bfa:	08 95       	ret

00000bfc <USART_init>:
     bfc:	10 bc       	out	0x20, r1	; 32
     bfe:	83 e3       	ldi	r24, 0x33	; 51
     c00:	89 b9       	out	0x09, r24	; 9
     c02:	8a b1       	in	r24, 0x0a	; 10
     c04:	88 61       	ori	r24, 0x18	; 24
     c06:	8a b9       	out	0x0a, r24	; 10
     c08:	86 e8       	ldi	r24, 0x86	; 134
     c0a:	80 bd       	out	0x20, r24	; 32
     c0c:	08 95       	ret

00000c0e <USART_transmit>:
     c0e:	5d 9b       	sbis	0x0b, 5	; 11
     c10:	fe cf       	rjmp	.-4      	; 0xc0e <USART_transmit>
     c12:	8c b9       	out	0x0c, r24	; 12
     c14:	08 95       	ret

00000c16 <USART_receive>:
     c16:	5f 9b       	sbis	0x0b, 7	; 11
     c18:	fe cf       	rjmp	.-4      	; 0xc16 <USART_receive>
     c1a:	8c b1       	in	r24, 0x0c	; 12
     c1c:	08 95       	ret

00000c1e <USART_Transmit_string>:
     c1e:	0f 93       	push	r16
     c20:	1f 93       	push	r17
     c22:	cf 93       	push	r28
     c24:	fc 01       	movw	r30, r24
     c26:	80 81       	ld	r24, Z
     c28:	88 23       	and	r24, r24
     c2a:	59 f0       	breq	.+22     	; 0xc42 <USART_Transmit_string+0x24>
     c2c:	8f 01       	movw	r16, r30
     c2e:	c0 e0       	ldi	r28, 0x00	; 0
     c30:	0e 94 07 06 	call	0xc0e	; 0xc0e <USART_transmit>
     c34:	cf 5f       	subi	r28, 0xFF	; 255
     c36:	f8 01       	movw	r30, r16
     c38:	ec 0f       	add	r30, r28
     c3a:	f1 1d       	adc	r31, r1
     c3c:	80 81       	ld	r24, Z
     c3e:	81 11       	cpse	r24, r1
     c40:	f7 cf       	rjmp	.-18     	; 0xc30 <USART_Transmit_string+0x12>
     c42:	cf 91       	pop	r28
     c44:	1f 91       	pop	r17
     c46:	0f 91       	pop	r16
     c48:	08 95       	ret

00000c4a <USART_receive_string>:
     c4a:	0f 93       	push	r16
     c4c:	1f 93       	push	r17
     c4e:	cf 93       	push	r28
     c50:	8c 01       	movw	r16, r24
     c52:	c0 e0       	ldi	r28, 0x00	; 0
     c54:	01 c0       	rjmp	.+2      	; 0xc58 <USART_receive_string+0xe>
     c56:	c9 2f       	mov	r28, r25
     c58:	0e 94 0b 06 	call	0xc16	; 0xc16 <USART_receive>
     c5c:	f8 01       	movw	r30, r16
     c5e:	ec 0f       	add	r30, r28
     c60:	f1 1d       	adc	r31, r1
     c62:	80 83       	st	Z, r24
     c64:	91 e0       	ldi	r25, 0x01	; 1
     c66:	9c 0f       	add	r25, r28
     c68:	8a 30       	cpi	r24, 0x0A	; 10
     c6a:	11 f0       	breq	.+4      	; 0xc70 <USART_receive_string+0x26>
     c6c:	8d 30       	cpi	r24, 0x0D	; 13
     c6e:	99 f7       	brne	.-26     	; 0xc56 <USART_receive_string+0xc>
     c70:	ce 5f       	subi	r28, 0xFE	; 254
     c72:	f8 01       	movw	r30, r16
     c74:	ec 0f       	add	r30, r28
     c76:	f1 1d       	adc	r31, r1
     c78:	10 82       	st	Z, r1
     c7a:	f8 01       	movw	r30, r16
     c7c:	80 81       	ld	r24, Z
     c7e:	88 23       	and	r24, r24
     c80:	49 f0       	breq	.+18     	; 0xc94 <USART_receive_string+0x4a>
     c82:	31 96       	adiw	r30, 0x01	; 1
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	01 96       	adiw	r24, 0x01	; 1
     c8a:	ac 01       	movw	r20, r24
     c8c:	21 91       	ld	r18, Z+
     c8e:	21 11       	cpse	r18, r1
     c90:	fb cf       	rjmp	.-10     	; 0xc88 <USART_receive_string+0x3e>
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <USART_receive_string+0x4e>
     c94:	40 e0       	ldi	r20, 0x00	; 0
     c96:	50 e0       	ldi	r21, 0x00	; 0
     c98:	40 0f       	add	r20, r16
     c9a:	51 1f       	adc	r21, r17
     c9c:	fa 01       	movw	r30, r20
     c9e:	31 97       	sbiw	r30, 0x01	; 1
     ca0:	10 82       	st	Z, r1
     ca2:	c8 01       	movw	r24, r16
     ca4:	cf 91       	pop	r28
     ca6:	1f 91       	pop	r17
     ca8:	0f 91       	pop	r16
     caa:	08 95       	ret

00000cac <__udivmodsi4>:
     cac:	a1 e2       	ldi	r26, 0x21	; 33
     cae:	1a 2e       	mov	r1, r26
     cb0:	aa 1b       	sub	r26, r26
     cb2:	bb 1b       	sub	r27, r27
     cb4:	fd 01       	movw	r30, r26
     cb6:	0d c0       	rjmp	.+26     	; 0xcd2 <__udivmodsi4_ep>

00000cb8 <__udivmodsi4_loop>:
     cb8:	aa 1f       	adc	r26, r26
     cba:	bb 1f       	adc	r27, r27
     cbc:	ee 1f       	adc	r30, r30
     cbe:	ff 1f       	adc	r31, r31
     cc0:	a2 17       	cp	r26, r18
     cc2:	b3 07       	cpc	r27, r19
     cc4:	e4 07       	cpc	r30, r20
     cc6:	f5 07       	cpc	r31, r21
     cc8:	20 f0       	brcs	.+8      	; 0xcd2 <__udivmodsi4_ep>
     cca:	a2 1b       	sub	r26, r18
     ccc:	b3 0b       	sbc	r27, r19
     cce:	e4 0b       	sbc	r30, r20
     cd0:	f5 0b       	sbc	r31, r21

00000cd2 <__udivmodsi4_ep>:
     cd2:	66 1f       	adc	r22, r22
     cd4:	77 1f       	adc	r23, r23
     cd6:	88 1f       	adc	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	1a 94       	dec	r1
     cdc:	69 f7       	brne	.-38     	; 0xcb8 <__udivmodsi4_loop>
     cde:	60 95       	com	r22
     ce0:	70 95       	com	r23
     ce2:	80 95       	com	r24
     ce4:	90 95       	com	r25
     ce6:	9b 01       	movw	r18, r22
     ce8:	ac 01       	movw	r20, r24
     cea:	bd 01       	movw	r22, r26
     cec:	cf 01       	movw	r24, r30
     cee:	08 95       	ret

00000cf0 <__subsf3>:
     cf0:	50 58       	subi	r21, 0x80	; 128

00000cf2 <__addsf3>:
     cf2:	bb 27       	eor	r27, r27
     cf4:	aa 27       	eor	r26, r26
     cf6:	0e 94 90 06 	call	0xd20	; 0xd20 <__addsf3x>
     cfa:	0c 94 e8 07 	jmp	0xfd0	; 0xfd0 <__fp_round>
     cfe:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__fp_pscA>
     d02:	38 f0       	brcs	.+14     	; 0xd12 <__addsf3+0x20>
     d04:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__fp_pscB>
     d08:	20 f0       	brcs	.+8      	; 0xd12 <__addsf3+0x20>
     d0a:	39 f4       	brne	.+14     	; 0xd1a <__addsf3+0x28>
     d0c:	9f 3f       	cpi	r25, 0xFF	; 255
     d0e:	19 f4       	brne	.+6      	; 0xd16 <__addsf3+0x24>
     d10:	26 f4       	brtc	.+8      	; 0xd1a <__addsf3+0x28>
     d12:	0c 94 d7 07 	jmp	0xfae	; 0xfae <__fp_nan>
     d16:	0e f4       	brtc	.+2      	; 0xd1a <__addsf3+0x28>
     d18:	e0 95       	com	r30
     d1a:	e7 fb       	bst	r30, 7
     d1c:	0c 94 c3 07 	jmp	0xf86	; 0xf86 <__fp_inf>

00000d20 <__addsf3x>:
     d20:	e9 2f       	mov	r30, r25
     d22:	0e 94 f9 07 	call	0xff2	; 0xff2 <__fp_split3>
     d26:	58 f3       	brcs	.-42     	; 0xcfe <__addsf3+0xc>
     d28:	ba 17       	cp	r27, r26
     d2a:	62 07       	cpc	r22, r18
     d2c:	73 07       	cpc	r23, r19
     d2e:	84 07       	cpc	r24, r20
     d30:	95 07       	cpc	r25, r21
     d32:	20 f0       	brcs	.+8      	; 0xd3c <__addsf3x+0x1c>
     d34:	79 f4       	brne	.+30     	; 0xd54 <__addsf3x+0x34>
     d36:	a6 f5       	brtc	.+104    	; 0xda0 <__addsf3x+0x80>
     d38:	0c 94 1b 08 	jmp	0x1036	; 0x1036 <__fp_zero>
     d3c:	0e f4       	brtc	.+2      	; 0xd40 <__addsf3x+0x20>
     d3e:	e0 95       	com	r30
     d40:	0b 2e       	mov	r0, r27
     d42:	ba 2f       	mov	r27, r26
     d44:	a0 2d       	mov	r26, r0
     d46:	0b 01       	movw	r0, r22
     d48:	b9 01       	movw	r22, r18
     d4a:	90 01       	movw	r18, r0
     d4c:	0c 01       	movw	r0, r24
     d4e:	ca 01       	movw	r24, r20
     d50:	a0 01       	movw	r20, r0
     d52:	11 24       	eor	r1, r1
     d54:	ff 27       	eor	r31, r31
     d56:	59 1b       	sub	r21, r25
     d58:	99 f0       	breq	.+38     	; 0xd80 <__addsf3x+0x60>
     d5a:	59 3f       	cpi	r21, 0xF9	; 249
     d5c:	50 f4       	brcc	.+20     	; 0xd72 <__addsf3x+0x52>
     d5e:	50 3e       	cpi	r21, 0xE0	; 224
     d60:	68 f1       	brcs	.+90     	; 0xdbc <__addsf3x+0x9c>
     d62:	1a 16       	cp	r1, r26
     d64:	f0 40       	sbci	r31, 0x00	; 0
     d66:	a2 2f       	mov	r26, r18
     d68:	23 2f       	mov	r18, r19
     d6a:	34 2f       	mov	r19, r20
     d6c:	44 27       	eor	r20, r20
     d6e:	58 5f       	subi	r21, 0xF8	; 248
     d70:	f3 cf       	rjmp	.-26     	; 0xd58 <__addsf3x+0x38>
     d72:	46 95       	lsr	r20
     d74:	37 95       	ror	r19
     d76:	27 95       	ror	r18
     d78:	a7 95       	ror	r26
     d7a:	f0 40       	sbci	r31, 0x00	; 0
     d7c:	53 95       	inc	r21
     d7e:	c9 f7       	brne	.-14     	; 0xd72 <__addsf3x+0x52>
     d80:	7e f4       	brtc	.+30     	; 0xda0 <__addsf3x+0x80>
     d82:	1f 16       	cp	r1, r31
     d84:	ba 0b       	sbc	r27, r26
     d86:	62 0b       	sbc	r22, r18
     d88:	73 0b       	sbc	r23, r19
     d8a:	84 0b       	sbc	r24, r20
     d8c:	ba f0       	brmi	.+46     	; 0xdbc <__addsf3x+0x9c>
     d8e:	91 50       	subi	r25, 0x01	; 1
     d90:	a1 f0       	breq	.+40     	; 0xdba <__addsf3x+0x9a>
     d92:	ff 0f       	add	r31, r31
     d94:	bb 1f       	adc	r27, r27
     d96:	66 1f       	adc	r22, r22
     d98:	77 1f       	adc	r23, r23
     d9a:	88 1f       	adc	r24, r24
     d9c:	c2 f7       	brpl	.-16     	; 0xd8e <__addsf3x+0x6e>
     d9e:	0e c0       	rjmp	.+28     	; 0xdbc <__addsf3x+0x9c>
     da0:	ba 0f       	add	r27, r26
     da2:	62 1f       	adc	r22, r18
     da4:	73 1f       	adc	r23, r19
     da6:	84 1f       	adc	r24, r20
     da8:	48 f4       	brcc	.+18     	; 0xdbc <__addsf3x+0x9c>
     daa:	87 95       	ror	r24
     dac:	77 95       	ror	r23
     dae:	67 95       	ror	r22
     db0:	b7 95       	ror	r27
     db2:	f7 95       	ror	r31
     db4:	9e 3f       	cpi	r25, 0xFE	; 254
     db6:	08 f0       	brcs	.+2      	; 0xdba <__addsf3x+0x9a>
     db8:	b0 cf       	rjmp	.-160    	; 0xd1a <__addsf3+0x28>
     dba:	93 95       	inc	r25
     dbc:	88 0f       	add	r24, r24
     dbe:	08 f0       	brcs	.+2      	; 0xdc2 <__addsf3x+0xa2>
     dc0:	99 27       	eor	r25, r25
     dc2:	ee 0f       	add	r30, r30
     dc4:	97 95       	ror	r25
     dc6:	87 95       	ror	r24
     dc8:	08 95       	ret

00000dca <__divsf3>:
     dca:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <__divsf3x>
     dce:	0c 94 e8 07 	jmp	0xfd0	; 0xfd0 <__fp_round>
     dd2:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__fp_pscB>
     dd6:	58 f0       	brcs	.+22     	; 0xdee <__divsf3+0x24>
     dd8:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__fp_pscA>
     ddc:	40 f0       	brcs	.+16     	; 0xdee <__divsf3+0x24>
     dde:	29 f4       	brne	.+10     	; 0xdea <__divsf3+0x20>
     de0:	5f 3f       	cpi	r21, 0xFF	; 255
     de2:	29 f0       	breq	.+10     	; 0xdee <__divsf3+0x24>
     de4:	0c 94 c3 07 	jmp	0xf86	; 0xf86 <__fp_inf>
     de8:	51 11       	cpse	r21, r1
     dea:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__fp_szero>
     dee:	0c 94 d7 07 	jmp	0xfae	; 0xfae <__fp_nan>

00000df2 <__divsf3x>:
     df2:	0e 94 f9 07 	call	0xff2	; 0xff2 <__fp_split3>
     df6:	68 f3       	brcs	.-38     	; 0xdd2 <__divsf3+0x8>

00000df8 <__divsf3_pse>:
     df8:	99 23       	and	r25, r25
     dfa:	b1 f3       	breq	.-20     	; 0xde8 <__divsf3+0x1e>
     dfc:	55 23       	and	r21, r21
     dfe:	91 f3       	breq	.-28     	; 0xde4 <__divsf3+0x1a>
     e00:	95 1b       	sub	r25, r21
     e02:	55 0b       	sbc	r21, r21
     e04:	bb 27       	eor	r27, r27
     e06:	aa 27       	eor	r26, r26
     e08:	62 17       	cp	r22, r18
     e0a:	73 07       	cpc	r23, r19
     e0c:	84 07       	cpc	r24, r20
     e0e:	38 f0       	brcs	.+14     	; 0xe1e <__divsf3_pse+0x26>
     e10:	9f 5f       	subi	r25, 0xFF	; 255
     e12:	5f 4f       	sbci	r21, 0xFF	; 255
     e14:	22 0f       	add	r18, r18
     e16:	33 1f       	adc	r19, r19
     e18:	44 1f       	adc	r20, r20
     e1a:	aa 1f       	adc	r26, r26
     e1c:	a9 f3       	breq	.-22     	; 0xe08 <__divsf3_pse+0x10>
     e1e:	35 d0       	rcall	.+106    	; 0xe8a <__divsf3_pse+0x92>
     e20:	0e 2e       	mov	r0, r30
     e22:	3a f0       	brmi	.+14     	; 0xe32 <__divsf3_pse+0x3a>
     e24:	e0 e8       	ldi	r30, 0x80	; 128
     e26:	32 d0       	rcall	.+100    	; 0xe8c <__divsf3_pse+0x94>
     e28:	91 50       	subi	r25, 0x01	; 1
     e2a:	50 40       	sbci	r21, 0x00	; 0
     e2c:	e6 95       	lsr	r30
     e2e:	00 1c       	adc	r0, r0
     e30:	ca f7       	brpl	.-14     	; 0xe24 <__divsf3_pse+0x2c>
     e32:	2b d0       	rcall	.+86     	; 0xe8a <__divsf3_pse+0x92>
     e34:	fe 2f       	mov	r31, r30
     e36:	29 d0       	rcall	.+82     	; 0xe8a <__divsf3_pse+0x92>
     e38:	66 0f       	add	r22, r22
     e3a:	77 1f       	adc	r23, r23
     e3c:	88 1f       	adc	r24, r24
     e3e:	bb 1f       	adc	r27, r27
     e40:	26 17       	cp	r18, r22
     e42:	37 07       	cpc	r19, r23
     e44:	48 07       	cpc	r20, r24
     e46:	ab 07       	cpc	r26, r27
     e48:	b0 e8       	ldi	r27, 0x80	; 128
     e4a:	09 f0       	breq	.+2      	; 0xe4e <__divsf3_pse+0x56>
     e4c:	bb 0b       	sbc	r27, r27
     e4e:	80 2d       	mov	r24, r0
     e50:	bf 01       	movw	r22, r30
     e52:	ff 27       	eor	r31, r31
     e54:	93 58       	subi	r25, 0x83	; 131
     e56:	5f 4f       	sbci	r21, 0xFF	; 255
     e58:	3a f0       	brmi	.+14     	; 0xe68 <__divsf3_pse+0x70>
     e5a:	9e 3f       	cpi	r25, 0xFE	; 254
     e5c:	51 05       	cpc	r21, r1
     e5e:	78 f0       	brcs	.+30     	; 0xe7e <__divsf3_pse+0x86>
     e60:	0c 94 c3 07 	jmp	0xf86	; 0xf86 <__fp_inf>
     e64:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__fp_szero>
     e68:	5f 3f       	cpi	r21, 0xFF	; 255
     e6a:	e4 f3       	brlt	.-8      	; 0xe64 <__divsf3_pse+0x6c>
     e6c:	98 3e       	cpi	r25, 0xE8	; 232
     e6e:	d4 f3       	brlt	.-12     	; 0xe64 <__divsf3_pse+0x6c>
     e70:	86 95       	lsr	r24
     e72:	77 95       	ror	r23
     e74:	67 95       	ror	r22
     e76:	b7 95       	ror	r27
     e78:	f7 95       	ror	r31
     e7a:	9f 5f       	subi	r25, 0xFF	; 255
     e7c:	c9 f7       	brne	.-14     	; 0xe70 <__divsf3_pse+0x78>
     e7e:	88 0f       	add	r24, r24
     e80:	91 1d       	adc	r25, r1
     e82:	96 95       	lsr	r25
     e84:	87 95       	ror	r24
     e86:	97 f9       	bld	r25, 7
     e88:	08 95       	ret
     e8a:	e1 e0       	ldi	r30, 0x01	; 1
     e8c:	66 0f       	add	r22, r22
     e8e:	77 1f       	adc	r23, r23
     e90:	88 1f       	adc	r24, r24
     e92:	bb 1f       	adc	r27, r27
     e94:	62 17       	cp	r22, r18
     e96:	73 07       	cpc	r23, r19
     e98:	84 07       	cpc	r24, r20
     e9a:	ba 07       	cpc	r27, r26
     e9c:	20 f0       	brcs	.+8      	; 0xea6 <__divsf3_pse+0xae>
     e9e:	62 1b       	sub	r22, r18
     ea0:	73 0b       	sbc	r23, r19
     ea2:	84 0b       	sbc	r24, r20
     ea4:	ba 0b       	sbc	r27, r26
     ea6:	ee 1f       	adc	r30, r30
     ea8:	88 f7       	brcc	.-30     	; 0xe8c <__divsf3_pse+0x94>
     eaa:	e0 95       	com	r30
     eac:	08 95       	ret

00000eae <__fixunssfsi>:
     eae:	0e 94 01 08 	call	0x1002	; 0x1002 <__fp_splitA>
     eb2:	88 f0       	brcs	.+34     	; 0xed6 <__fixunssfsi+0x28>
     eb4:	9f 57       	subi	r25, 0x7F	; 127
     eb6:	98 f0       	brcs	.+38     	; 0xede <__fixunssfsi+0x30>
     eb8:	b9 2f       	mov	r27, r25
     eba:	99 27       	eor	r25, r25
     ebc:	b7 51       	subi	r27, 0x17	; 23
     ebe:	b0 f0       	brcs	.+44     	; 0xeec <__fixunssfsi+0x3e>
     ec0:	e1 f0       	breq	.+56     	; 0xefa <__fixunssfsi+0x4c>
     ec2:	66 0f       	add	r22, r22
     ec4:	77 1f       	adc	r23, r23
     ec6:	88 1f       	adc	r24, r24
     ec8:	99 1f       	adc	r25, r25
     eca:	1a f0       	brmi	.+6      	; 0xed2 <__fixunssfsi+0x24>
     ecc:	ba 95       	dec	r27
     ece:	c9 f7       	brne	.-14     	; 0xec2 <__fixunssfsi+0x14>
     ed0:	14 c0       	rjmp	.+40     	; 0xefa <__fixunssfsi+0x4c>
     ed2:	b1 30       	cpi	r27, 0x01	; 1
     ed4:	91 f0       	breq	.+36     	; 0xefa <__fixunssfsi+0x4c>
     ed6:	0e 94 1b 08 	call	0x1036	; 0x1036 <__fp_zero>
     eda:	b1 e0       	ldi	r27, 0x01	; 1
     edc:	08 95       	ret
     ede:	0c 94 1b 08 	jmp	0x1036	; 0x1036 <__fp_zero>
     ee2:	67 2f       	mov	r22, r23
     ee4:	78 2f       	mov	r23, r24
     ee6:	88 27       	eor	r24, r24
     ee8:	b8 5f       	subi	r27, 0xF8	; 248
     eea:	39 f0       	breq	.+14     	; 0xefa <__fixunssfsi+0x4c>
     eec:	b9 3f       	cpi	r27, 0xF9	; 249
     eee:	cc f3       	brlt	.-14     	; 0xee2 <__fixunssfsi+0x34>
     ef0:	86 95       	lsr	r24
     ef2:	77 95       	ror	r23
     ef4:	67 95       	ror	r22
     ef6:	b3 95       	inc	r27
     ef8:	d9 f7       	brne	.-10     	; 0xef0 <__fixunssfsi+0x42>
     efa:	3e f4       	brtc	.+14     	; 0xf0a <__fixunssfsi+0x5c>
     efc:	90 95       	com	r25
     efe:	80 95       	com	r24
     f00:	70 95       	com	r23
     f02:	61 95       	neg	r22
     f04:	7f 4f       	sbci	r23, 0xFF	; 255
     f06:	8f 4f       	sbci	r24, 0xFF	; 255
     f08:	9f 4f       	sbci	r25, 0xFF	; 255
     f0a:	08 95       	ret

00000f0c <__floatunsisf>:
     f0c:	e8 94       	clt
     f0e:	09 c0       	rjmp	.+18     	; 0xf22 <__floatsisf+0x12>

00000f10 <__floatsisf>:
     f10:	97 fb       	bst	r25, 7
     f12:	3e f4       	brtc	.+14     	; 0xf22 <__floatsisf+0x12>
     f14:	90 95       	com	r25
     f16:	80 95       	com	r24
     f18:	70 95       	com	r23
     f1a:	61 95       	neg	r22
     f1c:	7f 4f       	sbci	r23, 0xFF	; 255
     f1e:	8f 4f       	sbci	r24, 0xFF	; 255
     f20:	9f 4f       	sbci	r25, 0xFF	; 255
     f22:	99 23       	and	r25, r25
     f24:	a9 f0       	breq	.+42     	; 0xf50 <__floatsisf+0x40>
     f26:	f9 2f       	mov	r31, r25
     f28:	96 e9       	ldi	r25, 0x96	; 150
     f2a:	bb 27       	eor	r27, r27
     f2c:	93 95       	inc	r25
     f2e:	f6 95       	lsr	r31
     f30:	87 95       	ror	r24
     f32:	77 95       	ror	r23
     f34:	67 95       	ror	r22
     f36:	b7 95       	ror	r27
     f38:	f1 11       	cpse	r31, r1
     f3a:	f8 cf       	rjmp	.-16     	; 0xf2c <__floatsisf+0x1c>
     f3c:	fa f4       	brpl	.+62     	; 0xf7c <__floatsisf+0x6c>
     f3e:	bb 0f       	add	r27, r27
     f40:	11 f4       	brne	.+4      	; 0xf46 <__floatsisf+0x36>
     f42:	60 ff       	sbrs	r22, 0
     f44:	1b c0       	rjmp	.+54     	; 0xf7c <__floatsisf+0x6c>
     f46:	6f 5f       	subi	r22, 0xFF	; 255
     f48:	7f 4f       	sbci	r23, 0xFF	; 255
     f4a:	8f 4f       	sbci	r24, 0xFF	; 255
     f4c:	9f 4f       	sbci	r25, 0xFF	; 255
     f4e:	16 c0       	rjmp	.+44     	; 0xf7c <__floatsisf+0x6c>
     f50:	88 23       	and	r24, r24
     f52:	11 f0       	breq	.+4      	; 0xf58 <__floatsisf+0x48>
     f54:	96 e9       	ldi	r25, 0x96	; 150
     f56:	11 c0       	rjmp	.+34     	; 0xf7a <__floatsisf+0x6a>
     f58:	77 23       	and	r23, r23
     f5a:	21 f0       	breq	.+8      	; 0xf64 <__floatsisf+0x54>
     f5c:	9e e8       	ldi	r25, 0x8E	; 142
     f5e:	87 2f       	mov	r24, r23
     f60:	76 2f       	mov	r23, r22
     f62:	05 c0       	rjmp	.+10     	; 0xf6e <__floatsisf+0x5e>
     f64:	66 23       	and	r22, r22
     f66:	71 f0       	breq	.+28     	; 0xf84 <__floatsisf+0x74>
     f68:	96 e8       	ldi	r25, 0x86	; 134
     f6a:	86 2f       	mov	r24, r22
     f6c:	70 e0       	ldi	r23, 0x00	; 0
     f6e:	60 e0       	ldi	r22, 0x00	; 0
     f70:	2a f0       	brmi	.+10     	; 0xf7c <__floatsisf+0x6c>
     f72:	9a 95       	dec	r25
     f74:	66 0f       	add	r22, r22
     f76:	77 1f       	adc	r23, r23
     f78:	88 1f       	adc	r24, r24
     f7a:	da f7       	brpl	.-10     	; 0xf72 <__floatsisf+0x62>
     f7c:	88 0f       	add	r24, r24
     f7e:	96 95       	lsr	r25
     f80:	87 95       	ror	r24
     f82:	97 f9       	bld	r25, 7
     f84:	08 95       	ret

00000f86 <__fp_inf>:
     f86:	97 f9       	bld	r25, 7
     f88:	9f 67       	ori	r25, 0x7F	; 127
     f8a:	80 e8       	ldi	r24, 0x80	; 128
     f8c:	70 e0       	ldi	r23, 0x00	; 0
     f8e:	60 e0       	ldi	r22, 0x00	; 0
     f90:	08 95       	ret

00000f92 <__fp_mpack>:
     f92:	9f 3f       	cpi	r25, 0xFF	; 255
     f94:	31 f0       	breq	.+12     	; 0xfa2 <__fp_mpack_finite+0xc>

00000f96 <__fp_mpack_finite>:
     f96:	91 50       	subi	r25, 0x01	; 1
     f98:	20 f4       	brcc	.+8      	; 0xfa2 <__fp_mpack_finite+0xc>
     f9a:	87 95       	ror	r24
     f9c:	77 95       	ror	r23
     f9e:	67 95       	ror	r22
     fa0:	b7 95       	ror	r27
     fa2:	88 0f       	add	r24, r24
     fa4:	91 1d       	adc	r25, r1
     fa6:	96 95       	lsr	r25
     fa8:	87 95       	ror	r24
     faa:	97 f9       	bld	r25, 7
     fac:	08 95       	ret

00000fae <__fp_nan>:
     fae:	9f ef       	ldi	r25, 0xFF	; 255
     fb0:	80 ec       	ldi	r24, 0xC0	; 192
     fb2:	08 95       	ret

00000fb4 <__fp_pscA>:
     fb4:	00 24       	eor	r0, r0
     fb6:	0a 94       	dec	r0
     fb8:	16 16       	cp	r1, r22
     fba:	17 06       	cpc	r1, r23
     fbc:	18 06       	cpc	r1, r24
     fbe:	09 06       	cpc	r0, r25
     fc0:	08 95       	ret

00000fc2 <__fp_pscB>:
     fc2:	00 24       	eor	r0, r0
     fc4:	0a 94       	dec	r0
     fc6:	12 16       	cp	r1, r18
     fc8:	13 06       	cpc	r1, r19
     fca:	14 06       	cpc	r1, r20
     fcc:	05 06       	cpc	r0, r21
     fce:	08 95       	ret

00000fd0 <__fp_round>:
     fd0:	09 2e       	mov	r0, r25
     fd2:	03 94       	inc	r0
     fd4:	00 0c       	add	r0, r0
     fd6:	11 f4       	brne	.+4      	; 0xfdc <__fp_round+0xc>
     fd8:	88 23       	and	r24, r24
     fda:	52 f0       	brmi	.+20     	; 0xff0 <__fp_round+0x20>
     fdc:	bb 0f       	add	r27, r27
     fde:	40 f4       	brcc	.+16     	; 0xff0 <__fp_round+0x20>
     fe0:	bf 2b       	or	r27, r31
     fe2:	11 f4       	brne	.+4      	; 0xfe8 <__fp_round+0x18>
     fe4:	60 ff       	sbrs	r22, 0
     fe6:	04 c0       	rjmp	.+8      	; 0xff0 <__fp_round+0x20>
     fe8:	6f 5f       	subi	r22, 0xFF	; 255
     fea:	7f 4f       	sbci	r23, 0xFF	; 255
     fec:	8f 4f       	sbci	r24, 0xFF	; 255
     fee:	9f 4f       	sbci	r25, 0xFF	; 255
     ff0:	08 95       	ret

00000ff2 <__fp_split3>:
     ff2:	57 fd       	sbrc	r21, 7
     ff4:	90 58       	subi	r25, 0x80	; 128
     ff6:	44 0f       	add	r20, r20
     ff8:	55 1f       	adc	r21, r21
     ffa:	59 f0       	breq	.+22     	; 0x1012 <__fp_splitA+0x10>
     ffc:	5f 3f       	cpi	r21, 0xFF	; 255
     ffe:	71 f0       	breq	.+28     	; 0x101c <__fp_splitA+0x1a>
    1000:	47 95       	ror	r20

00001002 <__fp_splitA>:
    1002:	88 0f       	add	r24, r24
    1004:	97 fb       	bst	r25, 7
    1006:	99 1f       	adc	r25, r25
    1008:	61 f0       	breq	.+24     	; 0x1022 <__fp_splitA+0x20>
    100a:	9f 3f       	cpi	r25, 0xFF	; 255
    100c:	79 f0       	breq	.+30     	; 0x102c <__fp_splitA+0x2a>
    100e:	87 95       	ror	r24
    1010:	08 95       	ret
    1012:	12 16       	cp	r1, r18
    1014:	13 06       	cpc	r1, r19
    1016:	14 06       	cpc	r1, r20
    1018:	55 1f       	adc	r21, r21
    101a:	f2 cf       	rjmp	.-28     	; 0x1000 <__fp_split3+0xe>
    101c:	46 95       	lsr	r20
    101e:	f1 df       	rcall	.-30     	; 0x1002 <__fp_splitA>
    1020:	08 c0       	rjmp	.+16     	; 0x1032 <__fp_splitA+0x30>
    1022:	16 16       	cp	r1, r22
    1024:	17 06       	cpc	r1, r23
    1026:	18 06       	cpc	r1, r24
    1028:	99 1f       	adc	r25, r25
    102a:	f1 cf       	rjmp	.-30     	; 0x100e <__fp_splitA+0xc>
    102c:	86 95       	lsr	r24
    102e:	71 05       	cpc	r23, r1
    1030:	61 05       	cpc	r22, r1
    1032:	08 94       	sec
    1034:	08 95       	ret

00001036 <__fp_zero>:
    1036:	e8 94       	clt

00001038 <__fp_szero>:
    1038:	bb 27       	eor	r27, r27
    103a:	66 27       	eor	r22, r22
    103c:	77 27       	eor	r23, r23
    103e:	cb 01       	movw	r24, r22
    1040:	97 f9       	bld	r25, 7
    1042:	08 95       	ret

00001044 <pow>:
    1044:	fa 01       	movw	r30, r20
    1046:	ee 0f       	add	r30, r30
    1048:	ff 1f       	adc	r31, r31
    104a:	30 96       	adiw	r30, 0x00	; 0
    104c:	21 05       	cpc	r18, r1
    104e:	31 05       	cpc	r19, r1
    1050:	a1 f1       	breq	.+104    	; 0x10ba <pow+0x76>
    1052:	61 15       	cp	r22, r1
    1054:	71 05       	cpc	r23, r1
    1056:	61 f4       	brne	.+24     	; 0x1070 <pow+0x2c>
    1058:	80 38       	cpi	r24, 0x80	; 128
    105a:	bf e3       	ldi	r27, 0x3F	; 63
    105c:	9b 07       	cpc	r25, r27
    105e:	49 f1       	breq	.+82     	; 0x10b2 <pow+0x6e>
    1060:	68 94       	set
    1062:	90 38       	cpi	r25, 0x80	; 128
    1064:	81 05       	cpc	r24, r1
    1066:	61 f0       	breq	.+24     	; 0x1080 <pow+0x3c>
    1068:	80 38       	cpi	r24, 0x80	; 128
    106a:	bf ef       	ldi	r27, 0xFF	; 255
    106c:	9b 07       	cpc	r25, r27
    106e:	41 f0       	breq	.+16     	; 0x1080 <pow+0x3c>
    1070:	99 23       	and	r25, r25
    1072:	4a f5       	brpl	.+82     	; 0x10c6 <pow+0x82>
    1074:	ff 3f       	cpi	r31, 0xFF	; 255
    1076:	e1 05       	cpc	r30, r1
    1078:	31 05       	cpc	r19, r1
    107a:	21 05       	cpc	r18, r1
    107c:	19 f1       	breq	.+70     	; 0x10c4 <pow+0x80>
    107e:	e8 94       	clt
    1080:	08 94       	sec
    1082:	e7 95       	ror	r30
    1084:	d9 01       	movw	r26, r18
    1086:	aa 23       	and	r26, r26
    1088:	29 f4       	brne	.+10     	; 0x1094 <pow+0x50>
    108a:	ab 2f       	mov	r26, r27
    108c:	be 2f       	mov	r27, r30
    108e:	f8 5f       	subi	r31, 0xF8	; 248
    1090:	d0 f3       	brcs	.-12     	; 0x1086 <pow+0x42>
    1092:	10 c0       	rjmp	.+32     	; 0x10b4 <pow+0x70>
    1094:	ff 5f       	subi	r31, 0xFF	; 255
    1096:	70 f4       	brcc	.+28     	; 0x10b4 <pow+0x70>
    1098:	a6 95       	lsr	r26
    109a:	e0 f7       	brcc	.-8      	; 0x1094 <pow+0x50>
    109c:	f7 39       	cpi	r31, 0x97	; 151
    109e:	50 f0       	brcs	.+20     	; 0x10b4 <pow+0x70>
    10a0:	19 f0       	breq	.+6      	; 0x10a8 <pow+0x64>
    10a2:	ff 3a       	cpi	r31, 0xAF	; 175
    10a4:	38 f4       	brcc	.+14     	; 0x10b4 <pow+0x70>
    10a6:	9f 77       	andi	r25, 0x7F	; 127
    10a8:	9f 93       	push	r25
    10aa:	0d d0       	rcall	.+26     	; 0x10c6 <pow+0x82>
    10ac:	0f 90       	pop	r0
    10ae:	07 fc       	sbrc	r0, 7
    10b0:	90 58       	subi	r25, 0x80	; 128
    10b2:	08 95       	ret
    10b4:	46 f0       	brts	.+16     	; 0x10c6 <pow+0x82>
    10b6:	0c 94 d7 07 	jmp	0xfae	; 0xfae <__fp_nan>
    10ba:	60 e0       	ldi	r22, 0x00	; 0
    10bc:	70 e0       	ldi	r23, 0x00	; 0
    10be:	80 e8       	ldi	r24, 0x80	; 128
    10c0:	9f e3       	ldi	r25, 0x3F	; 63
    10c2:	08 95       	ret
    10c4:	4f e7       	ldi	r20, 0x7F	; 127
    10c6:	9f 77       	andi	r25, 0x7F	; 127
    10c8:	5f 93       	push	r21
    10ca:	4f 93       	push	r20
    10cc:	3f 93       	push	r19
    10ce:	2f 93       	push	r18
    10d0:	0e 94 1d 09 	call	0x123a	; 0x123a <log>
    10d4:	2f 91       	pop	r18
    10d6:	3f 91       	pop	r19
    10d8:	4f 91       	pop	r20
    10da:	5f 91       	pop	r21
    10dc:	0e 94 99 09 	call	0x1332	; 0x1332 <__mulsf3>
    10e0:	0c 94 7a 08 	jmp	0x10f4	; 0x10f4 <exp>
    10e4:	29 f4       	brne	.+10     	; 0x10f0 <pow+0xac>
    10e6:	16 f0       	brts	.+4      	; 0x10ec <pow+0xa8>
    10e8:	0c 94 c3 07 	jmp	0xf86	; 0xf86 <__fp_inf>
    10ec:	0c 94 1b 08 	jmp	0x1036	; 0x1036 <__fp_zero>
    10f0:	0c 94 d7 07 	jmp	0xfae	; 0xfae <__fp_nan>

000010f4 <exp>:
    10f4:	0e 94 01 08 	call	0x1002	; 0x1002 <__fp_splitA>
    10f8:	a8 f3       	brcs	.-22     	; 0x10e4 <pow+0xa0>
    10fa:	96 38       	cpi	r25, 0x86	; 134
    10fc:	a0 f7       	brcc	.-24     	; 0x10e6 <pow+0xa2>
    10fe:	07 f8       	bld	r0, 7
    1100:	0f 92       	push	r0
    1102:	e8 94       	clt
    1104:	2b e3       	ldi	r18, 0x3B	; 59
    1106:	3a ea       	ldi	r19, 0xAA	; 170
    1108:	48 eb       	ldi	r20, 0xB8	; 184
    110a:	5f e7       	ldi	r21, 0x7F	; 127
    110c:	0e 94 af 09 	call	0x135e	; 0x135e <__mulsf3_pse>
    1110:	0f 92       	push	r0
    1112:	0f 92       	push	r0
    1114:	0f 92       	push	r0
    1116:	4d b7       	in	r20, 0x3d	; 61
    1118:	5e b7       	in	r21, 0x3e	; 62
    111a:	0f 92       	push	r0
    111c:	0e 94 65 09 	call	0x12ca	; 0x12ca <modf>
    1120:	e4 e5       	ldi	r30, 0x54	; 84
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	0e 94 ac 08 	call	0x1158	; 0x1158 <__fp_powser>
    1128:	4f 91       	pop	r20
    112a:	5f 91       	pop	r21
    112c:	ef 91       	pop	r30
    112e:	ff 91       	pop	r31
    1130:	e5 95       	asr	r30
    1132:	ee 1f       	adc	r30, r30
    1134:	ff 1f       	adc	r31, r31
    1136:	49 f0       	breq	.+18     	; 0x114a <exp+0x56>
    1138:	fe 57       	subi	r31, 0x7E	; 126
    113a:	e0 68       	ori	r30, 0x80	; 128
    113c:	44 27       	eor	r20, r20
    113e:	ee 0f       	add	r30, r30
    1140:	44 1f       	adc	r20, r20
    1142:	fa 95       	dec	r31
    1144:	e1 f7       	brne	.-8      	; 0x113e <exp+0x4a>
    1146:	41 95       	neg	r20
    1148:	55 0b       	sbc	r21, r21
    114a:	0e 94 df 08 	call	0x11be	; 0x11be <ldexp>
    114e:	0f 90       	pop	r0
    1150:	07 fe       	sbrs	r0, 7
    1152:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <inverse>
    1156:	08 95       	ret

00001158 <__fp_powser>:
    1158:	df 93       	push	r29
    115a:	cf 93       	push	r28
    115c:	1f 93       	push	r17
    115e:	0f 93       	push	r16
    1160:	ff 92       	push	r15
    1162:	ef 92       	push	r14
    1164:	df 92       	push	r13
    1166:	7b 01       	movw	r14, r22
    1168:	8c 01       	movw	r16, r24
    116a:	68 94       	set
    116c:	06 c0       	rjmp	.+12     	; 0x117a <__fp_powser+0x22>
    116e:	da 2e       	mov	r13, r26
    1170:	ef 01       	movw	r28, r30
    1172:	0e 94 ac 09 	call	0x1358	; 0x1358 <__mulsf3x>
    1176:	fe 01       	movw	r30, r28
    1178:	e8 94       	clt
    117a:	a5 91       	lpm	r26, Z+
    117c:	25 91       	lpm	r18, Z+
    117e:	35 91       	lpm	r19, Z+
    1180:	45 91       	lpm	r20, Z+
    1182:	55 91       	lpm	r21, Z+
    1184:	a6 f3       	brts	.-24     	; 0x116e <__fp_powser+0x16>
    1186:	ef 01       	movw	r28, r30
    1188:	0e 94 90 06 	call	0xd20	; 0xd20 <__addsf3x>
    118c:	fe 01       	movw	r30, r28
    118e:	97 01       	movw	r18, r14
    1190:	a8 01       	movw	r20, r16
    1192:	da 94       	dec	r13
    1194:	69 f7       	brne	.-38     	; 0x1170 <__fp_powser+0x18>
    1196:	df 90       	pop	r13
    1198:	ef 90       	pop	r14
    119a:	ff 90       	pop	r15
    119c:	0f 91       	pop	r16
    119e:	1f 91       	pop	r17
    11a0:	cf 91       	pop	r28
    11a2:	df 91       	pop	r29
    11a4:	08 95       	ret

000011a6 <inverse>:
    11a6:	9b 01       	movw	r18, r22
    11a8:	ac 01       	movw	r20, r24
    11aa:	60 e0       	ldi	r22, 0x00	; 0
    11ac:	70 e0       	ldi	r23, 0x00	; 0
    11ae:	80 e8       	ldi	r24, 0x80	; 128
    11b0:	9f e3       	ldi	r25, 0x3F	; 63
    11b2:	0c 94 e5 06 	jmp	0xdca	; 0xdca <__divsf3>
    11b6:	0c 94 c3 07 	jmp	0xf86	; 0xf86 <__fp_inf>
    11ba:	0c 94 c9 07 	jmp	0xf92	; 0xf92 <__fp_mpack>

000011be <ldexp>:
    11be:	0e 94 01 08 	call	0x1002	; 0x1002 <__fp_splitA>
    11c2:	d8 f3       	brcs	.-10     	; 0x11ba <inverse+0x14>
    11c4:	99 23       	and	r25, r25
    11c6:	c9 f3       	breq	.-14     	; 0x11ba <inverse+0x14>
    11c8:	94 0f       	add	r25, r20
    11ca:	51 1d       	adc	r21, r1
    11cc:	a3 f3       	brvs	.-24     	; 0x11b6 <inverse+0x10>
    11ce:	91 50       	subi	r25, 0x01	; 1
    11d0:	50 40       	sbci	r21, 0x00	; 0
    11d2:	94 f0       	brlt	.+36     	; 0x11f8 <ldexp+0x3a>
    11d4:	59 f0       	breq	.+22     	; 0x11ec <ldexp+0x2e>
    11d6:	88 23       	and	r24, r24
    11d8:	32 f0       	brmi	.+12     	; 0x11e6 <ldexp+0x28>
    11da:	66 0f       	add	r22, r22
    11dc:	77 1f       	adc	r23, r23
    11de:	88 1f       	adc	r24, r24
    11e0:	91 50       	subi	r25, 0x01	; 1
    11e2:	50 40       	sbci	r21, 0x00	; 0
    11e4:	c1 f7       	brne	.-16     	; 0x11d6 <ldexp+0x18>
    11e6:	9e 3f       	cpi	r25, 0xFE	; 254
    11e8:	51 05       	cpc	r21, r1
    11ea:	2c f7       	brge	.-54     	; 0x11b6 <inverse+0x10>
    11ec:	88 0f       	add	r24, r24
    11ee:	91 1d       	adc	r25, r1
    11f0:	96 95       	lsr	r25
    11f2:	87 95       	ror	r24
    11f4:	97 f9       	bld	r25, 7
    11f6:	08 95       	ret
    11f8:	5f 3f       	cpi	r21, 0xFF	; 255
    11fa:	ac f0       	brlt	.+42     	; 0x1226 <ldexp+0x68>
    11fc:	98 3e       	cpi	r25, 0xE8	; 232
    11fe:	9c f0       	brlt	.+38     	; 0x1226 <ldexp+0x68>
    1200:	bb 27       	eor	r27, r27
    1202:	86 95       	lsr	r24
    1204:	77 95       	ror	r23
    1206:	67 95       	ror	r22
    1208:	b7 95       	ror	r27
    120a:	08 f4       	brcc	.+2      	; 0x120e <ldexp+0x50>
    120c:	b1 60       	ori	r27, 0x01	; 1
    120e:	93 95       	inc	r25
    1210:	c1 f7       	brne	.-16     	; 0x1202 <ldexp+0x44>
    1212:	bb 0f       	add	r27, r27
    1214:	58 f7       	brcc	.-42     	; 0x11ec <ldexp+0x2e>
    1216:	11 f4       	brne	.+4      	; 0x121c <ldexp+0x5e>
    1218:	60 ff       	sbrs	r22, 0
    121a:	e8 cf       	rjmp	.-48     	; 0x11ec <ldexp+0x2e>
    121c:	6f 5f       	subi	r22, 0xFF	; 255
    121e:	7f 4f       	sbci	r23, 0xFF	; 255
    1220:	8f 4f       	sbci	r24, 0xFF	; 255
    1222:	9f 4f       	sbci	r25, 0xFF	; 255
    1224:	e3 cf       	rjmp	.-58     	; 0x11ec <ldexp+0x2e>
    1226:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__fp_szero>
    122a:	16 f0       	brts	.+4      	; 0x1230 <ldexp+0x72>
    122c:	0c 94 c9 07 	jmp	0xf92	; 0xf92 <__fp_mpack>
    1230:	0c 94 d7 07 	jmp	0xfae	; 0xfae <__fp_nan>
    1234:	68 94       	set
    1236:	0c 94 c3 07 	jmp	0xf86	; 0xf86 <__fp_inf>

0000123a <log>:
    123a:	0e 94 01 08 	call	0x1002	; 0x1002 <__fp_splitA>
    123e:	a8 f3       	brcs	.-22     	; 0x122a <ldexp+0x6c>
    1240:	99 23       	and	r25, r25
    1242:	c1 f3       	breq	.-16     	; 0x1234 <ldexp+0x76>
    1244:	ae f3       	brts	.-22     	; 0x1230 <ldexp+0x72>
    1246:	df 93       	push	r29
    1248:	cf 93       	push	r28
    124a:	1f 93       	push	r17
    124c:	0f 93       	push	r16
    124e:	ff 92       	push	r15
    1250:	c9 2f       	mov	r28, r25
    1252:	dd 27       	eor	r29, r29
    1254:	88 23       	and	r24, r24
    1256:	2a f0       	brmi	.+10     	; 0x1262 <log+0x28>
    1258:	21 97       	sbiw	r28, 0x01	; 1
    125a:	66 0f       	add	r22, r22
    125c:	77 1f       	adc	r23, r23
    125e:	88 1f       	adc	r24, r24
    1260:	da f7       	brpl	.-10     	; 0x1258 <log+0x1e>
    1262:	20 e0       	ldi	r18, 0x00	; 0
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	40 e8       	ldi	r20, 0x80	; 128
    1268:	5f eb       	ldi	r21, 0xBF	; 191
    126a:	9f e3       	ldi	r25, 0x3F	; 63
    126c:	88 39       	cpi	r24, 0x98	; 152
    126e:	20 f0       	brcs	.+8      	; 0x1278 <log+0x3e>
    1270:	80 3e       	cpi	r24, 0xE0	; 224
    1272:	38 f0       	brcs	.+14     	; 0x1282 <log+0x48>
    1274:	21 96       	adiw	r28, 0x01	; 1
    1276:	8f 77       	andi	r24, 0x7F	; 127
    1278:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__addsf3>
    127c:	ec e7       	ldi	r30, 0x7C	; 124
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	04 c0       	rjmp	.+8      	; 0x128a <log+0x50>
    1282:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__addsf3>
    1286:	e9 ea       	ldi	r30, 0xA9	; 169
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	0e 94 ac 08 	call	0x1158	; 0x1158 <__fp_powser>
    128e:	8b 01       	movw	r16, r22
    1290:	be 01       	movw	r22, r28
    1292:	ec 01       	movw	r28, r24
    1294:	fb 2e       	mov	r15, r27
    1296:	6f 57       	subi	r22, 0x7F	; 127
    1298:	71 09       	sbc	r23, r1
    129a:	75 95       	asr	r23
    129c:	77 1f       	adc	r23, r23
    129e:	88 0b       	sbc	r24, r24
    12a0:	99 0b       	sbc	r25, r25
    12a2:	0e 94 88 07 	call	0xf10	; 0xf10 <__floatsisf>
    12a6:	28 e1       	ldi	r18, 0x18	; 24
    12a8:	32 e7       	ldi	r19, 0x72	; 114
    12aa:	41 e3       	ldi	r20, 0x31	; 49
    12ac:	5f e3       	ldi	r21, 0x3F	; 63
    12ae:	0e 94 ac 09 	call	0x1358	; 0x1358 <__mulsf3x>
    12b2:	af 2d       	mov	r26, r15
    12b4:	98 01       	movw	r18, r16
    12b6:	ae 01       	movw	r20, r28
    12b8:	ff 90       	pop	r15
    12ba:	0f 91       	pop	r16
    12bc:	1f 91       	pop	r17
    12be:	cf 91       	pop	r28
    12c0:	df 91       	pop	r29
    12c2:	0e 94 90 06 	call	0xd20	; 0xd20 <__addsf3x>
    12c6:	0c 94 e8 07 	jmp	0xfd0	; 0xfd0 <__fp_round>

000012ca <modf>:
    12ca:	fa 01       	movw	r30, r20
    12cc:	dc 01       	movw	r26, r24
    12ce:	aa 0f       	add	r26, r26
    12d0:	bb 1f       	adc	r27, r27
    12d2:	9b 01       	movw	r18, r22
    12d4:	ac 01       	movw	r20, r24
    12d6:	bf 57       	subi	r27, 0x7F	; 127
    12d8:	28 f4       	brcc	.+10     	; 0x12e4 <modf+0x1a>
    12da:	22 27       	eor	r18, r18
    12dc:	33 27       	eor	r19, r19
    12de:	44 27       	eor	r20, r20
    12e0:	50 78       	andi	r21, 0x80	; 128
    12e2:	20 c0       	rjmp	.+64     	; 0x1324 <modf+0x5a>
    12e4:	b7 51       	subi	r27, 0x17	; 23
    12e6:	90 f4       	brcc	.+36     	; 0x130c <modf+0x42>
    12e8:	ab 2f       	mov	r26, r27
    12ea:	00 24       	eor	r0, r0
    12ec:	46 95       	lsr	r20
    12ee:	37 95       	ror	r19
    12f0:	27 95       	ror	r18
    12f2:	01 1c       	adc	r0, r1
    12f4:	a3 95       	inc	r26
    12f6:	d2 f3       	brmi	.-12     	; 0x12ec <modf+0x22>
    12f8:	00 20       	and	r0, r0
    12fa:	71 f0       	breq	.+28     	; 0x1318 <modf+0x4e>
    12fc:	22 0f       	add	r18, r18
    12fe:	33 1f       	adc	r19, r19
    1300:	44 1f       	adc	r20, r20
    1302:	b3 95       	inc	r27
    1304:	da f3       	brmi	.-10     	; 0x12fc <modf+0x32>
    1306:	0e d0       	rcall	.+28     	; 0x1324 <modf+0x5a>
    1308:	0c 94 78 06 	jmp	0xcf0	; 0xcf0 <__subsf3>
    130c:	61 30       	cpi	r22, 0x01	; 1
    130e:	71 05       	cpc	r23, r1
    1310:	a0 e8       	ldi	r26, 0x80	; 128
    1312:	8a 07       	cpc	r24, r26
    1314:	b9 46       	sbci	r27, 0x69	; 105
    1316:	30 f4       	brcc	.+12     	; 0x1324 <modf+0x5a>
    1318:	9b 01       	movw	r18, r22
    131a:	ac 01       	movw	r20, r24
    131c:	66 27       	eor	r22, r22
    131e:	77 27       	eor	r23, r23
    1320:	88 27       	eor	r24, r24
    1322:	90 78       	andi	r25, 0x80	; 128
    1324:	30 96       	adiw	r30, 0x00	; 0
    1326:	21 f0       	breq	.+8      	; 0x1330 <modf+0x66>
    1328:	20 83       	st	Z, r18
    132a:	31 83       	std	Z+1, r19	; 0x01
    132c:	42 83       	std	Z+2, r20	; 0x02
    132e:	53 83       	std	Z+3, r21	; 0x03
    1330:	08 95       	ret

00001332 <__mulsf3>:
    1332:	0e 94 ac 09 	call	0x1358	; 0x1358 <__mulsf3x>
    1336:	0c 94 e8 07 	jmp	0xfd0	; 0xfd0 <__fp_round>
    133a:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__fp_pscA>
    133e:	38 f0       	brcs	.+14     	; 0x134e <__mulsf3+0x1c>
    1340:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__fp_pscB>
    1344:	20 f0       	brcs	.+8      	; 0x134e <__mulsf3+0x1c>
    1346:	95 23       	and	r25, r21
    1348:	11 f0       	breq	.+4      	; 0x134e <__mulsf3+0x1c>
    134a:	0c 94 c3 07 	jmp	0xf86	; 0xf86 <__fp_inf>
    134e:	0c 94 d7 07 	jmp	0xfae	; 0xfae <__fp_nan>
    1352:	11 24       	eor	r1, r1
    1354:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__fp_szero>

00001358 <__mulsf3x>:
    1358:	0e 94 f9 07 	call	0xff2	; 0xff2 <__fp_split3>
    135c:	70 f3       	brcs	.-36     	; 0x133a <__mulsf3+0x8>

0000135e <__mulsf3_pse>:
    135e:	95 9f       	mul	r25, r21
    1360:	c1 f3       	breq	.-16     	; 0x1352 <__mulsf3+0x20>
    1362:	95 0f       	add	r25, r21
    1364:	50 e0       	ldi	r21, 0x00	; 0
    1366:	55 1f       	adc	r21, r21
    1368:	62 9f       	mul	r22, r18
    136a:	f0 01       	movw	r30, r0
    136c:	72 9f       	mul	r23, r18
    136e:	bb 27       	eor	r27, r27
    1370:	f0 0d       	add	r31, r0
    1372:	b1 1d       	adc	r27, r1
    1374:	63 9f       	mul	r22, r19
    1376:	aa 27       	eor	r26, r26
    1378:	f0 0d       	add	r31, r0
    137a:	b1 1d       	adc	r27, r1
    137c:	aa 1f       	adc	r26, r26
    137e:	64 9f       	mul	r22, r20
    1380:	66 27       	eor	r22, r22
    1382:	b0 0d       	add	r27, r0
    1384:	a1 1d       	adc	r26, r1
    1386:	66 1f       	adc	r22, r22
    1388:	82 9f       	mul	r24, r18
    138a:	22 27       	eor	r18, r18
    138c:	b0 0d       	add	r27, r0
    138e:	a1 1d       	adc	r26, r1
    1390:	62 1f       	adc	r22, r18
    1392:	73 9f       	mul	r23, r19
    1394:	b0 0d       	add	r27, r0
    1396:	a1 1d       	adc	r26, r1
    1398:	62 1f       	adc	r22, r18
    139a:	83 9f       	mul	r24, r19
    139c:	a0 0d       	add	r26, r0
    139e:	61 1d       	adc	r22, r1
    13a0:	22 1f       	adc	r18, r18
    13a2:	74 9f       	mul	r23, r20
    13a4:	33 27       	eor	r19, r19
    13a6:	a0 0d       	add	r26, r0
    13a8:	61 1d       	adc	r22, r1
    13aa:	23 1f       	adc	r18, r19
    13ac:	84 9f       	mul	r24, r20
    13ae:	60 0d       	add	r22, r0
    13b0:	21 1d       	adc	r18, r1
    13b2:	82 2f       	mov	r24, r18
    13b4:	76 2f       	mov	r23, r22
    13b6:	6a 2f       	mov	r22, r26
    13b8:	11 24       	eor	r1, r1
    13ba:	9f 57       	subi	r25, 0x7F	; 127
    13bc:	50 40       	sbci	r21, 0x00	; 0
    13be:	9a f0       	brmi	.+38     	; 0x13e6 <__mulsf3_pse+0x88>
    13c0:	f1 f0       	breq	.+60     	; 0x13fe <__mulsf3_pse+0xa0>
    13c2:	88 23       	and	r24, r24
    13c4:	4a f0       	brmi	.+18     	; 0x13d8 <__mulsf3_pse+0x7a>
    13c6:	ee 0f       	add	r30, r30
    13c8:	ff 1f       	adc	r31, r31
    13ca:	bb 1f       	adc	r27, r27
    13cc:	66 1f       	adc	r22, r22
    13ce:	77 1f       	adc	r23, r23
    13d0:	88 1f       	adc	r24, r24
    13d2:	91 50       	subi	r25, 0x01	; 1
    13d4:	50 40       	sbci	r21, 0x00	; 0
    13d6:	a9 f7       	brne	.-22     	; 0x13c2 <__mulsf3_pse+0x64>
    13d8:	9e 3f       	cpi	r25, 0xFE	; 254
    13da:	51 05       	cpc	r21, r1
    13dc:	80 f0       	brcs	.+32     	; 0x13fe <__mulsf3_pse+0xa0>
    13de:	0c 94 c3 07 	jmp	0xf86	; 0xf86 <__fp_inf>
    13e2:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__fp_szero>
    13e6:	5f 3f       	cpi	r21, 0xFF	; 255
    13e8:	e4 f3       	brlt	.-8      	; 0x13e2 <__mulsf3_pse+0x84>
    13ea:	98 3e       	cpi	r25, 0xE8	; 232
    13ec:	d4 f3       	brlt	.-12     	; 0x13e2 <__mulsf3_pse+0x84>
    13ee:	86 95       	lsr	r24
    13f0:	77 95       	ror	r23
    13f2:	67 95       	ror	r22
    13f4:	b7 95       	ror	r27
    13f6:	f7 95       	ror	r31
    13f8:	e7 95       	ror	r30
    13fa:	9f 5f       	subi	r25, 0xFF	; 255
    13fc:	c1 f7       	brne	.-16     	; 0x13ee <__mulsf3_pse+0x90>
    13fe:	fe 2b       	or	r31, r30
    1400:	88 0f       	add	r24, r24
    1402:	91 1d       	adc	r25, r1
    1404:	96 95       	lsr	r25
    1406:	87 95       	ror	r24
    1408:	97 f9       	bld	r25, 7
    140a:	08 95       	ret

0000140c <_exit>:
    140c:	f8 94       	cli

0000140e <__stop_program>:
    140e:	ff cf       	rjmp	.-2      	; 0x140e <__stop_program>
