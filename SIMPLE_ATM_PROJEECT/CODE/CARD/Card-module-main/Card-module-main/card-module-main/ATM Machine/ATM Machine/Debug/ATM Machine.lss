
ATM Machine.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000012b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005c  00800060  000012b6  0000134a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  008000bc  008000bc  000013a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000013a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000013d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000288  00000000  00000000  00001414  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002df6  00000000  00000000  0000169c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fa2  00000000  00000000  00004492  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001aa3  00000000  00000000  00005434  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000068c  00000000  00000000  00006ed8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c63  00000000  00000000  00007564  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000025b9  00000000  00000000  000081c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000208  00000000  00000000  0000a780  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
       8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
       c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      10:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      14:	0c 94 96 04 	jmp	0x92c	; 0x92c <__vector_5>
      18:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      1c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      20:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      24:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      28:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      2c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      30:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      34:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      3c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      40:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      44:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      48:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      4c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      50:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      54:	74 04       	cpc	r7, r4
      56:	78 04       	cpc	r7, r8
      58:	7c 04       	cpc	r7, r12
      5a:	80 04       	cpc	r8, r0
      5c:	84 04       	cpc	r8, r4
      5e:	88 04       	cpc	r8, r8
      60:	8c 04       	cpc	r8, r12
      62:	07 63       	ori	r16, 0x37	; 55
      64:	42 36       	cpi	r20, 0x62	; 98
      66:	b7 9b       	sbis	0x16, 7	; 22
      68:	d8 a7       	std	Y+40, r29	; 0x28
      6a:	1a 39       	cpi	r17, 0x9A	; 154
      6c:	68 56       	subi	r22, 0x68	; 104
      6e:	18 ae       	std	Y+56, r1	; 0x38
      70:	ba ab       	std	Y+50, r27	; 0x32
      72:	55 8c       	ldd	r5, Z+29	; 0x1d
      74:	1d 3c       	cpi	r17, 0xCD	; 205
      76:	b7 cc       	rjmp	.-1682   	; 0xfffff9e6 <__eeprom_end+0xff7ef9e6>
      78:	57 63       	ori	r21, 0x37	; 55
      7a:	bd 6d       	ori	r27, 0xDD	; 221
      7c:	ed fd       	.word	0xfded	; ????
      7e:	75 3e       	cpi	r23, 0xE5	; 229
      80:	f6 17       	cp	r31, r22
      82:	72 31       	cpi	r23, 0x12	; 18
      84:	bf 00       	.word	0x00bf	; ????
      86:	00 00       	nop
      88:	80 3f       	cpi	r24, 0xF0	; 240
      8a:	08 00       	.word	0x0008	; ????
      8c:	00 00       	nop
      8e:	be 92       	st	-X, r11
      90:	24 49       	sbci	r18, 0x94	; 148
      92:	12 3e       	cpi	r17, 0xE2	; 226
      94:	ab aa       	std	Y+51, r10	; 0x33
      96:	aa 2a       	or	r10, r26
      98:	be cd       	rjmp	.-1156   	; 0xfffffc16 <__eeprom_end+0xff7efc16>
      9a:	cc cc       	rjmp	.-1640   	; 0xfffffa34 <__eeprom_end+0xff7efa34>
      9c:	4c 3e       	cpi	r20, 0xEC	; 236
      9e:	00 00       	nop
      a0:	00 80       	ld	r0, Z
      a2:	be ab       	std	Y+54, r27	; 0x36
      a4:	aa aa       	std	Y+50, r10	; 0x32
      a6:	aa 3e       	cpi	r26, 0xEA	; 234
      a8:	00 00       	nop
      aa:	00 00       	nop
      ac:	bf 00       	.word	0x00bf	; ????
      ae:	00 00       	nop
      b0:	80 3f       	cpi	r24, 0xF0	; 240
      b2:	00 00       	nop
      b4:	00 00       	nop
      b6:	00 08       	sbc	r0, r0
      b8:	41 78       	andi	r20, 0x81	; 129
      ba:	d3 bb       	out	0x13, r29	; 19
      bc:	43 87       	std	Z+11, r20	; 0x0b
      be:	d1 13       	cpse	r29, r17
      c0:	3d 19       	sub	r19, r13
      c2:	0e 3c       	cpi	r16, 0xCE	; 206
      c4:	c3 bd       	out	0x23, r28	; 35
      c6:	42 82       	std	Z+2, r4	; 0x02
      c8:	ad 2b       	or	r26, r29
      ca:	3e 68       	ori	r19, 0x8E	; 142
      cc:	ec 82       	std	Y+4, r14	; 0x04
      ce:	76 be       	out	0x36, r7	; 54
      d0:	d9 8f       	std	Y+25, r29	; 0x19
      d2:	e1 a9       	ldd	r30, Z+49	; 0x31
      d4:	3e 4c       	sbci	r19, 0xCE	; 206
      d6:	80 ef       	ldi	r24, 0xF0	; 240
      d8:	ff be       	out	0x3f, r15	; 63
      da:	01 c4       	rjmp	.+2050   	; 0x8de <SPI_MasterInit+0x3a>
      dc:	ff 7f       	andi	r31, 0xFF	; 255
      de:	3f 00       	.word	0x003f	; ????
      e0:	00 00       	nop
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf e5       	ldi	r28, 0x5F	; 95
      ea:	d8 e0       	ldi	r29, 0x08	; 8
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
      f0:	10 e0       	ldi	r17, 0x00	; 0
      f2:	a0 e6       	ldi	r26, 0x60	; 96
      f4:	b0 e0       	ldi	r27, 0x00	; 0
      f6:	e6 eb       	ldi	r30, 0xB6	; 182
      f8:	f2 e1       	ldi	r31, 0x12	; 18
      fa:	02 c0       	rjmp	.+4      	; 0x100 <__do_copy_data+0x10>
      fc:	05 90       	lpm	r0, Z+
      fe:	0d 92       	st	X+, r0
     100:	ac 3b       	cpi	r26, 0xBC	; 188
     102:	b1 07       	cpc	r27, r17
     104:	d9 f7       	brne	.-10     	; 0xfc <__do_copy_data+0xc>

00000106 <__do_clear_bss>:
     106:	20 e0       	ldi	r18, 0x00	; 0
     108:	ac eb       	ldi	r26, 0xBC	; 188
     10a:	b0 e0       	ldi	r27, 0x00	; 0
     10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
     10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
     110:	a1 3d       	cpi	r26, 0xD1	; 209
     112:	b2 07       	cpc	r27, r18
     114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>
     116:	0e 94 a3 01 	call	0x346	; 0x346 <main>
     11a:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <_exit>

0000011e <__bad_interrupt>:
     11e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000122 <EEPROM_Read>:
		EEPROM_Read(&a_STR[LV_Index_I]);
		
	
	}

}
     122:	cf 93       	push	r28
     124:	df 93       	push	r29
     126:	ec 01       	movw	r28, r24
     128:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <I2C_start>
     12c:	81 11       	cpse	r24, r1
     12e:	0e c0       	rjmp	.+28     	; 0x14c <EEPROM_Read+0x2a>
     130:	61 e0       	ldi	r22, 0x01	; 1
     132:	80 ea       	ldi	r24, 0xA0	; 160
     134:	0e 94 e6 04 	call	0x9cc	; 0x9cc <I2C_addressEvent>
     138:	86 30       	cpi	r24, 0x06	; 6
     13a:	41 f4       	brne	.+16     	; 0x14c <EEPROM_Read+0x2a>
     13c:	61 e0       	ldi	r22, 0x01	; 1
     13e:	ce 01       	movw	r24, r28
     140:	0e 94 47 05 	call	0xa8e	; 0xa8e <I2C_receiveData>
     144:	8d 30       	cpi	r24, 0x0D	; 13
     146:	11 f4       	brne	.+4      	; 0x14c <EEPROM_Read+0x2a>
     148:	0e 94 37 05 	call	0xa6e	; 0xa6e <I2C_stop>
     14c:	df 91       	pop	r29
     14e:	cf 91       	pop	r28
     150:	08 95       	ret

00000152 <EEPROM_Read_String_With_size>:

void EEPROM_Read_String_With_size(uint8_t * a_STR, uint8_t a_Length){
     152:	0f 93       	push	r16
     154:	1f 93       	push	r17
     156:	cf 93       	push	r28
     158:	df 93       	push	r29
	uint8_t LV_Index_I=0;

	for (LV_Index_I=0;LV_Index_I<a_Length;LV_Index_I++)
     15a:	66 23       	and	r22, r22
     15c:	79 f0       	breq	.+30     	; 0x17c <EEPROM_Read_String_With_size+0x2a>
     15e:	ec 01       	movw	r28, r24
     160:	61 50       	subi	r22, 0x01	; 1
     162:	06 2f       	mov	r16, r22
     164:	10 e0       	ldi	r17, 0x00	; 0
     166:	0f 5f       	subi	r16, 0xFF	; 255
     168:	1f 4f       	sbci	r17, 0xFF	; 255
     16a:	08 0f       	add	r16, r24
     16c:	19 1f       	adc	r17, r25
	{
		EEPROM_Read(&a_STR[LV_Index_I]);
     16e:	ce 01       	movw	r24, r28
     170:	0e 94 91 00 	call	0x122	; 0x122 <EEPROM_Read>
     174:	21 96       	adiw	r28, 0x01	; 1
}

void EEPROM_Read_String_With_size(uint8_t * a_STR, uint8_t a_Length){
	uint8_t LV_Index_I=0;

	for (LV_Index_I=0;LV_Index_I<a_Length;LV_Index_I++)
     176:	c0 17       	cp	r28, r16
     178:	d1 07       	cpc	r29, r17
     17a:	c9 f7       	brne	.-14     	; 0x16e <EEPROM_Read_String_With_size+0x1c>
		EEPROM_Read(&a_STR[LV_Index_I]);
		
		
	}

}
     17c:	df 91       	pop	r29
     17e:	cf 91       	pop	r28
     180:	1f 91       	pop	r17
     182:	0f 91       	pop	r16
     184:	08 95       	ret

00000186 <EEPROM_Write_WithSize>:

/******************************************/

void EEPROM_Write_WithSize (uint8_t *data, uint8_t *_address,uint8_t LV_Length){
     186:	ef 92       	push	r14
     188:	ff 92       	push	r15
     18a:	0f 93       	push	r16
     18c:	1f 93       	push	r17
     18e:	cf 93       	push	r28
     190:	8c 01       	movw	r16, r24
     192:	7b 01       	movw	r14, r22
     194:	c4 2f       	mov	r28, r20
	
	uint8_t LV_Index_I=0;	
	
	if(I2C_start()==EVENT_OK){										//Send a Starting Bit and Wait For ACK
     196:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <I2C_start>
     19a:	81 11       	cpse	r24, r1
     19c:	18 c0       	rjmp	.+48     	; 0x1ce <EEPROM_Write_WithSize+0x48>
		if(I2C_addressEvent(0xa0,WRITE)==AD_W_SENT_ACK_OK){			//Send an Initializer "0b1010" Specified In the Data Sheet  and an Event Type "R/W" and Wait For ACK
     19e:	60 e0       	ldi	r22, 0x00	; 0
     1a0:	80 ea       	ldi	r24, 0xA0	; 160
     1a2:	0e 94 e6 04 	call	0x9cc	; 0x9cc <I2C_addressEvent>
     1a6:	82 30       	cpi	r24, 0x02	; 2
     1a8:	91 f4       	brne	.+36     	; 0x1ce <EEPROM_Write_WithSize+0x48>
			if(I2C_sendData(_address)== DATA_SENT_ACK_OK){			//Send an Address In the EEPROM  To Start Writing In It
     1aa:	c7 01       	movw	r24, r14
     1ac:	0e 94 1d 05 	call	0xa3a	; 0xa3a <I2C_sendData>
     1b0:	89 30       	cpi	r24, 0x09	; 9
     1b2:	69 f4       	brne	.+26     	; 0x1ce <EEPROM_Write_WithSize+0x48>
				for (LV_Index_I=0;LV_Index_I<LV_Length;){		//To Send The Whole Data String
     1b4:	cc 23       	and	r28, r28
     1b6:	59 f0       	breq	.+22     	; 0x1ce <EEPROM_Write_WithSize+0x48>
     1b8:	f1 2c       	mov	r15, r1
					if(I2C_sendData(&data[LV_Index_I])== DATA_SENT_ACK_OK){		//Send Data Byte By Byte and Wait For AcK Each Time
     1ba:	c8 01       	movw	r24, r16
     1bc:	8f 0d       	add	r24, r15
     1be:	91 1d       	adc	r25, r1
     1c0:	0e 94 1d 05 	call	0xa3a	; 0xa3a <I2C_sendData>
     1c4:	89 30       	cpi	r24, 0x09	; 9
     1c6:	09 f4       	brne	.+2      	; 0x1ca <EEPROM_Write_WithSize+0x44>
						
						LV_Index_I++;
     1c8:	f3 94       	inc	r15
	uint8_t LV_Index_I=0;	
	
	if(I2C_start()==EVENT_OK){										//Send a Starting Bit and Wait For ACK
		if(I2C_addressEvent(0xa0,WRITE)==AD_W_SENT_ACK_OK){			//Send an Initializer "0b1010" Specified In the Data Sheet  and an Event Type "R/W" and Wait For ACK
			if(I2C_sendData(_address)== DATA_SENT_ACK_OK){			//Send an Address In the EEPROM  To Start Writing In It
				for (LV_Index_I=0;LV_Index_I<LV_Length;){		//To Send The Whole Data String
     1ca:	fc 16       	cp	r15, r28
     1cc:	b0 f3       	brcs	.-20     	; 0x1ba <EEPROM_Write_WithSize+0x34>
				
			}
		}
	}
	
	I2C_stop();															//End Of Communication
     1ce:	0e 94 37 05 	call	0xa6e	; 0xa6e <I2C_stop>
	
}
     1d2:	cf 91       	pop	r28
     1d4:	1f 91       	pop	r17
     1d6:	0f 91       	pop	r16
     1d8:	ff 90       	pop	r15
     1da:	ef 90       	pop	r14
     1dc:	08 95       	ret

000001de <LCD_WRITE_COMMAND>:
	DIO_WRITEPIN(D7,read_bit(a_DATA,3));
	DIO_WRITEPIN(EN,HIGH);
	_delay_ms(1);
	DIO_WRITEPIN(EN,LOW);
	_delay_ms(1);
}
     1de:	cf 93       	push	r28
     1e0:	c8 2f       	mov	r28, r24
     1e2:	60 e0       	ldi	r22, 0x00	; 0
     1e4:	8a e1       	ldi	r24, 0x1A	; 26
     1e6:	0e 94 b5 03 	call	0x76a	; 0x76a <DIO_WRITEPIN>
     1ea:	60 e0       	ldi	r22, 0x00	; 0
     1ec:	8b e1       	ldi	r24, 0x1B	; 27
     1ee:	0e 94 b5 03 	call	0x76a	; 0x76a <DIO_WRITEPIN>
     1f2:	c4 fb       	bst	r28, 4
     1f4:	66 27       	eor	r22, r22
     1f6:	60 f9       	bld	r22, 0
     1f8:	84 e1       	ldi	r24, 0x14	; 20
     1fa:	0e 94 b5 03 	call	0x76a	; 0x76a <DIO_WRITEPIN>
     1fe:	c5 fb       	bst	r28, 5
     200:	66 27       	eor	r22, r22
     202:	60 f9       	bld	r22, 0
     204:	85 e1       	ldi	r24, 0x15	; 21
     206:	0e 94 b5 03 	call	0x76a	; 0x76a <DIO_WRITEPIN>
     20a:	c6 fb       	bst	r28, 6
     20c:	66 27       	eor	r22, r22
     20e:	60 f9       	bld	r22, 0
     210:	86 e1       	ldi	r24, 0x16	; 22
     212:	0e 94 b5 03 	call	0x76a	; 0x76a <DIO_WRITEPIN>
     216:	6c 2f       	mov	r22, r28
     218:	66 1f       	adc	r22, r22
     21a:	66 27       	eor	r22, r22
     21c:	66 1f       	adc	r22, r22
     21e:	87 e1       	ldi	r24, 0x17	; 23
     220:	0e 94 b5 03 	call	0x76a	; 0x76a <DIO_WRITEPIN>
     224:	61 e0       	ldi	r22, 0x01	; 1
     226:	8c e1       	ldi	r24, 0x1C	; 28
     228:	0e 94 b5 03 	call	0x76a	; 0x76a <DIO_WRITEPIN>
     22c:	89 ef       	ldi	r24, 0xF9	; 249
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	01 97       	sbiw	r24, 0x01	; 1
     232:	f1 f7       	brne	.-4      	; 0x230 <LCD_WRITE_COMMAND+0x52>
     234:	00 c0       	rjmp	.+0      	; 0x236 <LCD_WRITE_COMMAND+0x58>
     236:	00 00       	nop
     238:	60 e0       	ldi	r22, 0x00	; 0
     23a:	8c e1       	ldi	r24, 0x1C	; 28
     23c:	0e 94 b5 03 	call	0x76a	; 0x76a <DIO_WRITEPIN>
     240:	89 ef       	ldi	r24, 0xF9	; 249
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	01 97       	sbiw	r24, 0x01	; 1
     246:	f1 f7       	brne	.-4      	; 0x244 <LCD_WRITE_COMMAND+0x66>
     248:	00 c0       	rjmp	.+0      	; 0x24a <LCD_WRITE_COMMAND+0x6c>
     24a:	00 00       	nop
     24c:	6c 2f       	mov	r22, r28
     24e:	61 70       	andi	r22, 0x01	; 1
     250:	84 e1       	ldi	r24, 0x14	; 20
     252:	0e 94 b5 03 	call	0x76a	; 0x76a <DIO_WRITEPIN>
     256:	c1 fb       	bst	r28, 1
     258:	66 27       	eor	r22, r22
     25a:	60 f9       	bld	r22, 0
     25c:	85 e1       	ldi	r24, 0x15	; 21
     25e:	0e 94 b5 03 	call	0x76a	; 0x76a <DIO_WRITEPIN>
     262:	c2 fb       	bst	r28, 2
     264:	66 27       	eor	r22, r22
     266:	60 f9       	bld	r22, 0
     268:	86 e1       	ldi	r24, 0x16	; 22
     26a:	0e 94 b5 03 	call	0x76a	; 0x76a <DIO_WRITEPIN>
     26e:	c3 fb       	bst	r28, 3
     270:	66 27       	eor	r22, r22
     272:	60 f9       	bld	r22, 0
     274:	87 e1       	ldi	r24, 0x17	; 23
     276:	0e 94 b5 03 	call	0x76a	; 0x76a <DIO_WRITEPIN>
     27a:	61 e0       	ldi	r22, 0x01	; 1
     27c:	8c e1       	ldi	r24, 0x1C	; 28
     27e:	0e 94 b5 03 	call	0x76a	; 0x76a <DIO_WRITEPIN>
     282:	89 ef       	ldi	r24, 0xF9	; 249
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	01 97       	sbiw	r24, 0x01	; 1
     288:	f1 f7       	brne	.-4      	; 0x286 <LCD_WRITE_COMMAND+0xa8>
     28a:	00 c0       	rjmp	.+0      	; 0x28c <LCD_WRITE_COMMAND+0xae>
     28c:	00 00       	nop
     28e:	60 e0       	ldi	r22, 0x00	; 0
     290:	8c e1       	ldi	r24, 0x1C	; 28
     292:	0e 94 b5 03 	call	0x76a	; 0x76a <DIO_WRITEPIN>
     296:	89 ef       	ldi	r24, 0xF9	; 249
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	01 97       	sbiw	r24, 0x01	; 1
     29c:	f1 f7       	brne	.-4      	; 0x29a <LCD_WRITE_COMMAND+0xbc>
     29e:	00 c0       	rjmp	.+0      	; 0x2a0 <LCD_WRITE_COMMAND+0xc2>
     2a0:	00 00       	nop
     2a2:	cf 91       	pop	r28
     2a4:	08 95       	ret

000002a6 <LCD_INIT>:
/*************************************************************************************************************************/

void LCD_INIT(void)
{
	
	DIO_INITPIN(pina4,OUTPUT);
     2a6:	60 e0       	ldi	r22, 0x00	; 0
     2a8:	84 e0       	ldi	r24, 0x04	; 4
     2aa:	0e 94 b3 02 	call	0x566	; 0x566 <DIO_INITPIN>
	DIO_INITPIN(pina5,OUTPUT);
     2ae:	60 e0       	ldi	r22, 0x00	; 0
     2b0:	85 e0       	ldi	r24, 0x05	; 5
     2b2:	0e 94 b3 02 	call	0x566	; 0x566 <DIO_INITPIN>
	DIO_INITPIN(pina6,OUTPUT);
     2b6:	60 e0       	ldi	r22, 0x00	; 0
     2b8:	86 e0       	ldi	r24, 0x06	; 6
     2ba:	0e 94 b3 02 	call	0x566	; 0x566 <DIO_INITPIN>
	DIO_INITPIN(pina7,OUTPUT);
     2be:	60 e0       	ldi	r22, 0x00	; 0
     2c0:	87 e0       	ldi	r24, 0x07	; 7
     2c2:	0e 94 b3 02 	call	0x566	; 0x566 <DIO_INITPIN>
	DIO_INITPIN(RS,OUTPUT);
     2c6:	60 e0       	ldi	r22, 0x00	; 0
     2c8:	8a e1       	ldi	r24, 0x1A	; 26
     2ca:	0e 94 b3 02 	call	0x566	; 0x566 <DIO_INITPIN>
	DIO_INITPIN(RW,OUTPUT);
     2ce:	60 e0       	ldi	r22, 0x00	; 0
     2d0:	8b e1       	ldi	r24, 0x1B	; 27
     2d2:	0e 94 b3 02 	call	0x566	; 0x566 <DIO_INITPIN>
	DIO_INITPIN(EN,OUTPUT);
     2d6:	60 e0       	ldi	r22, 0x00	; 0
     2d8:	8c e1       	ldi	r24, 0x1C	; 28
     2da:	0e 94 b3 02 	call	0x566	; 0x566 <DIO_INITPIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2de:	83 ed       	ldi	r24, 0xD3	; 211
     2e0:	90 e3       	ldi	r25, 0x30	; 48
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	f1 f7       	brne	.-4      	; 0x2e2 <LCD_INIT+0x3c>
     2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <LCD_INIT+0x42>
     2e8:	00 00       	nop
	
	
	_delay_ms(50);
	LCD_WRITE_COMMAND(0x02);
     2ea:	82 e0       	ldi	r24, 0x02	; 2
     2ec:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_WRITE_COMMAND>
     2f0:	89 ef       	ldi	r24, 0xF9	; 249
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	f1 f7       	brne	.-4      	; 0x2f4 <LCD_INIT+0x4e>
     2f8:	00 c0       	rjmp	.+0      	; 0x2fa <LCD_INIT+0x54>
     2fa:	00 00       	nop
	_delay_ms(1);
	LCD_WRITE_COMMAND(0X28);                     /* THIS IS FOR FUNCTION SET IN THE DATA SHEET  4BIT MODE, 2LINE, 5*7*/
     2fc:	88 e2       	ldi	r24, 0x28	; 40
     2fe:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_WRITE_COMMAND>
     302:	89 ef       	ldi	r24, 0xF9	; 249
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	01 97       	sbiw	r24, 0x01	; 1
     308:	f1 f7       	brne	.-4      	; 0x306 <LCD_INIT+0x60>
     30a:	00 c0       	rjmp	.+0      	; 0x30c <LCD_INIT+0x66>
     30c:	00 00       	nop
	_delay_ms(1);
	LCD_WRITE_COMMAND(0x0c);                     /*SCREEN ON, CURSOR OFF*/
     30e:	8c e0       	ldi	r24, 0x0C	; 12
     310:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_WRITE_COMMAND>
     314:	89 ef       	ldi	r24, 0xF9	; 249
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	01 97       	sbiw	r24, 0x01	; 1
     31a:	f1 f7       	brne	.-4      	; 0x318 <LCD_INIT+0x72>
     31c:	00 c0       	rjmp	.+0      	; 0x31e <LCD_INIT+0x78>
     31e:	00 00       	nop
	_delay_ms(1);
	LCD_WRITE_COMMAND(0X01);                      /*CLEAR SCREEN*/
     320:	81 e0       	ldi	r24, 0x01	; 1
     322:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_WRITE_COMMAND>
     326:	83 ef       	ldi	r24, 0xF3	; 243
     328:	91 e0       	ldi	r25, 0x01	; 1
     32a:	01 97       	sbiw	r24, 0x01	; 1
     32c:	f1 f7       	brne	.-4      	; 0x32a <LCD_INIT+0x84>
     32e:	00 c0       	rjmp	.+0      	; 0x330 <LCD_INIT+0x8a>
     330:	00 00       	nop
	_delay_ms(2);
	LCD_WRITE_COMMAND(0X06);
     332:	86 e0       	ldi	r24, 0x06	; 6
     334:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_WRITE_COMMAND>
     338:	89 ef       	ldi	r24, 0xF9	; 249
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	01 97       	sbiw	r24, 0x01	; 1
     33e:	f1 f7       	brne	.-4      	; 0x33c <LCD_INIT+0x96>
     340:	00 c0       	rjmp	.+0      	; 0x342 <LCD_INIT+0x9c>
     342:	00 00       	nop
     344:	08 95       	ret

00000346 <main>:
#include "application/app.h"
#include <util/delay.h>
#define F_CPU   8000000u
uint8_t ad=0x00,ad2=0x10,str1[16]={0},str2[4]={},ad3=0b1010000,ad4=0b1010001;
int main(void)
{
     346:	3f 92       	push	r3
     348:	4f 92       	push	r4
     34a:	5f 92       	push	r5
     34c:	6f 92       	push	r6
     34e:	7f 92       	push	r7
     350:	8f 92       	push	r8
     352:	9f 92       	push	r9
     354:	af 92       	push	r10
     356:	bf 92       	push	r11
     358:	cf 92       	push	r12
     35a:	df 92       	push	r13
     35c:	ef 92       	push	r14
     35e:	ff 92       	push	r15
     360:	0f 93       	push	r16
     362:	1f 93       	push	r17
     364:	cf 93       	push	r28
     366:	df 93       	push	r29
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	a1 97       	sbiw	r28, 0x21	; 33
     36e:	0f b6       	in	r0, 0x3f	; 63
     370:	f8 94       	cli
     372:	de bf       	out	0x3e, r29	; 62
     374:	0f be       	out	0x3f, r0	; 63
     376:	cd bf       	out	0x3d, r28	; 61

	SPI_MasterInit(PRESCALER_16);
     378:	83 e0       	ldi	r24, 0x03	; 3
     37a:	0e 94 52 04 	call	0x8a4	; 0x8a4 <SPI_MasterInit>
	// Programming mode
	DIO_INITPIN(pinb0,OUTPUT);
     37e:	60 e0       	ldi	r22, 0x00	; 0
     380:	88 e0       	ldi	r24, 0x08	; 8
     382:	0e 94 b3 02 	call	0x566	; 0x566 <DIO_INITPIN>
	DIO_WRITEPIN(pinb0,HIGH);
     386:	61 e0       	ldi	r22, 0x01	; 1
     388:	88 e0       	ldi	r24, 0x08	; 8
     38a:	0e 94 b5 03 	call	0x76a	; 0x76a <DIO_WRITEPIN>
	
	LCD_INIT();
     38e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCD_INIT>
	USART_init();
     392:	0e 94 6d 05 	call	0xada	; 0xada <USART_init>
	I2C_init(I2C_PRESCALER_16);
     396:	82 e0       	ldi	r24, 0x02	; 2
     398:	0e 94 a0 04 	call	0x940	; 0x940 <I2C_init>
	//******************************************************************************************************
	
	
	// PAN RECIEVE AND SEND
	unsigned char arr_pan[16]={0};
     39c:	8e 01       	movw	r16, r28
     39e:	0f 5f       	subi	r16, 0xFF	; 255
     3a0:	1f 4f       	sbci	r17, 0xFF	; 255
     3a2:	80 e1       	ldi	r24, 0x10	; 16
     3a4:	f8 01       	movw	r30, r16
     3a6:	11 92       	st	Z+, r1
     3a8:	8a 95       	dec	r24
     3aa:	e9 f7       	brne	.-6      	; 0x3a6 <main+0x60>
	USART_Transmit_string ("Please Enter Card PAN:");
     3ac:	81 e6       	ldi	r24, 0x61	; 97
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	0e 94 7e 05 	call	0xafc	; 0xafc <USART_Transmit_string>
	char *pan =  USART_receive_string(arr_pan);
     3b4:	c8 01       	movw	r24, r16
     3b6:	0e 94 94 05 	call	0xb28	; 0xb28 <USART_receive_string>
     3ba:	99 a3       	std	Y+33, r25	; 0x21
     3bc:	88 a3       	std	Y+32, r24	; 0x20
	USART_transmit('\n');
     3be:	8a e0       	ldi	r24, 0x0A	; 10
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	0e 94 76 05 	call	0xaec	; 0xaec <USART_transmit>
  // _delay_ms(100);
  
   
	//*********************************************************************************************************
	// PIN RECIEVE AND SEND
	uint8_t pinRecieved='0';
     3c6:	f0 e3       	ldi	r31, 0x30	; 48
     3c8:	ff 8f       	std	Y+31, r31	; 0x1f
	char *pin;
	while (pinRecieved=='0')
	{
	// PIN RECIEVE 
	unsigned char arr_pin[7]={0};
     3ca:	0f 2e       	mov	r0, r31
     3cc:	f7 e0       	ldi	r31, 0x07	; 7
     3ce:	7f 2e       	mov	r7, r31
     3d0:	f0 2d       	mov	r31, r0
     3d2:	7e 01       	movw	r14, r28
     3d4:	28 e1       	ldi	r18, 0x18	; 24
     3d6:	e2 0e       	add	r14, r18
     3d8:	f1 1c       	adc	r15, r1
	unsigned char arr_npin[7]={0};
     3da:	5e 01       	movw	r10, r28
     3dc:	81 e1       	ldi	r24, 0x11	; 17
     3de:	a8 0e       	add	r10, r24
     3e0:	b1 1c       	adc	r11, r1
     3e2:	6e 01       	movw	r12, r28
     3e4:	9c e1       	ldi	r25, 0x1C	; 28
     3e6:	c9 0e       	add	r12, r25
     3e8:	d1 1c       	adc	r13, r1
	uint8_t pinRecieved='0';
	char *pin;
	while (pinRecieved=='0')
	{
	// PIN RECIEVE 
	unsigned char arr_pin[7]={0};
     3ea:	f7 01       	movw	r30, r14
     3ec:	27 2d       	mov	r18, r7
     3ee:	11 92       	st	Z+, r1
     3f0:	2a 95       	dec	r18
     3f2:	e9 f7       	brne	.-6      	; 0x3ee <main+0xa8>
	unsigned char arr_npin[7]={0};
     3f4:	f5 01       	movw	r30, r10
     3f6:	27 2d       	mov	r18, r7
     3f8:	11 92       	st	Z+, r1
     3fa:	2a 95       	dec	r18
     3fc:	e9 f7       	brne	.-6      	; 0x3f8 <main+0xb2>
	USART_Transmit_string ("Please Enter New PIN:");
     3fe:	88 e7       	ldi	r24, 0x78	; 120
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	0e 94 7e 05 	call	0xafc	; 0xafc <USART_Transmit_string>
	pin =  USART_receive_string(arr_pin);
     406:	c7 01       	movw	r24, r14
     408:	0e 94 94 05 	call	0xb28	; 0xb28 <USART_receive_string>
     40c:	8c 01       	movw	r16, r24
     40e:	38 2e       	mov	r3, r24
     410:	41 2e       	mov	r4, r17
	//**************************************************
	// CONFIRM PIN RECIEVE
	USART_Transmit_string ("Please Confirm New PIN:");
     412:	8e e8       	ldi	r24, 0x8E	; 142
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	0e 94 7e 05 	call	0xafc	; 0xafc <USART_Transmit_string>
	char *new_pin = USART_receive_string(arr_npin);
     41a:	c5 01       	movw	r24, r10
     41c:	0e 94 94 05 	call	0xb28	; 0xb28 <USART_receive_string>
     420:	58 2e       	mov	r5, r24
     422:	69 2e       	mov	r6, r25
   //***********************************************
   // CHECK PIN CONDITION
	if (arr_pin[4] == 0 && arr_pin[3]!= 0) 
     424:	8c 8d       	ldd	r24, Y+28	; 0x1c
     426:	81 11       	cpse	r24, r1
     428:	18 c0       	rjmp	.+48     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     42a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     42c:	88 23       	and	r24, r24
     42e:	a9 f0       	breq	.+42     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     430:	4e 01       	movw	r8, r28
     432:	88 e1       	ldi	r24, 0x18	; 24
     434:	88 0e       	add	r8, r24
     436:	91 1c       	adc	r9, r1
     438:	91 e3       	ldi	r25, 0x31	; 49
     43a:	9f 8f       	std	Y+31, r25	; 0x1f
	{
	 pinRecieved='1';
	 	 for (int y=0;y<4;y++)
	 	 {
		 	 if (arr_pin[y]<48 || arr_pin[y]>57) 
     43c:	f4 01       	movw	r30, r8
     43e:	81 91       	ld	r24, Z+
     440:	4f 01       	movw	r8, r30
     442:	80 53       	subi	r24, 0x30	; 48
     444:	8a 30       	cpi	r24, 0x0A	; 10
     446:	30 f0       	brcs	.+12     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
			  {
				  USART_transmit('\n');  
     448:	8a e0       	ldi	r24, 0x0A	; 10
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	0e 94 76 05 	call	0xaec	; 0xaec <USART_transmit>
				  pinRecieved='0'; 
     450:	f0 e3       	ldi	r31, 0x30	; 48
     452:	ff 8f       	std	Y+31, r31	; 0x1f
   //***********************************************
   // CHECK PIN CONDITION
	if (arr_pin[4] == 0 && arr_pin[3]!= 0) 
	{
	 pinRecieved='1';
	 	 for (int y=0;y<4;y++)
     454:	c8 14       	cp	r12, r8
     456:	d9 04       	cpc	r13, r9
     458:	89 f7       	brne	.-30     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     45a:	a5 2d       	mov	r26, r5
     45c:	b6 2d       	mov	r27, r6
     45e:	f8 01       	movw	r30, r16
     460:	0c 5f       	subi	r16, 0xFC	; 252
     462:	1f 4f       	sbci	r17, 0xFF	; 255
		uint8_t npin = *(new_pin);
		uint8_t pin_in = *(pin);
		int c=0;
		for (c=0;c<4;c++)
		{
			if ((*(new_pin+c)) != (*(pin+c)) ) 
     464:	9d 91       	ld	r25, X+
     466:	81 91       	ld	r24, Z+
     468:	98 17       	cp	r25, r24
     46a:	11 f0       	breq	.+4      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
			{ 
				pinRecieved='0';
     46c:	20 e3       	ldi	r18, 0x30	; 48
     46e:	2f 8f       	std	Y+31, r18	; 0x1f
	//**************************************************************
	// CHECK PIN CONFIRMATION
		uint8_t npin = *(new_pin);
		uint8_t pin_in = *(pin);
		int c=0;
		for (c=0;c<4;c++)
     470:	e0 17       	cp	r30, r16
     472:	f1 07       	cpc	r31, r17
     474:	b9 f7       	brne	.-18     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
			if ((*(new_pin+c)) != (*(pin+c)) ) 
			{ 
				pinRecieved='0';
			}
		}
		if (pinRecieved=='0') USART_Transmit_string ("Wrong PIN "); 	 
     476:	8f 8d       	ldd	r24, Y+31	; 0x1f
     478:	80 33       	cpi	r24, 0x30	; 48
     47a:	d1 f4       	brne	.+52     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
     47c:	86 ea       	ldi	r24, 0xA6	; 166
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	0e 94 7e 05 	call	0xafc	; 0xafc <USART_Transmit_string>
     484:	b2 cf       	rjmp	.-156    	; 0x3ea <main+0xa4>
	
	// sending 
	uint8_t index = 0;
	DIO_WRITEPIN(SS, LOW);

	while (str1[index] != '\0')
     486:	10 e0       	ldi	r17, 0x00	; 0
	{
		SPI_SendReceive(str1[index]);
     488:	0e 94 91 04 	call	0x922	; 0x922 <SPI_SendReceive>
		index++;
     48c:	1f 5f       	subi	r17, 0xFF	; 255
     48e:	9f ef       	ldi	r25, 0xFF	; 255
     490:	e0 e7       	ldi	r30, 0x70	; 112
     492:	f2 e0       	ldi	r31, 0x02	; 2
     494:	91 50       	subi	r25, 0x01	; 1
     496:	e0 40       	sbci	r30, 0x00	; 0
     498:	f0 40       	sbci	r31, 0x00	; 0
     49a:	e1 f7       	brne	.-8      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     49c:	00 c0       	rjmp	.+0      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     49e:	00 00       	nop
	
	// sending 
	uint8_t index = 0;
	DIO_WRITEPIN(SS, LOW);

	while (str1[index] != '\0')
     4a0:	e1 2f       	mov	r30, r17
     4a2:	f0 e0       	ldi	r31, 0x00	; 0
     4a4:	e0 54       	subi	r30, 0x40	; 64
     4a6:	ff 4f       	sbci	r31, 0xFF	; 255
     4a8:	80 81       	ld	r24, Z
     4aa:	81 11       	cpse	r24, r1
     4ac:	ed cf       	rjmp	.-38     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
     4ae:	3a c0       	rjmp	.+116    	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
				pinRecieved='0';
			}
		}
		if (pinRecieved=='0') USART_Transmit_string ("Wrong PIN "); 	 
	}
	USART_Transmit_string (" finished ");
     4b0:	81 eb       	ldi	r24, 0xB1	; 177
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	0e 94 7e 05 	call	0xafc	; 0xafc <USART_Transmit_string>
		for (int i=0;i<4;i++)
		{
			pin[i]=pin[i]-'30';
		}
	*/	
		EEPROM_Write_WithSize(pan,&ad,16); //--- pan sent to EEPROM	
     4b8:	40 e1       	ldi	r20, 0x10	; 16
     4ba:	60 ed       	ldi	r22, 0xD0	; 208
     4bc:	70 e0       	ldi	r23, 0x00	; 0
     4be:	88 a1       	ldd	r24, Y+32	; 0x20
     4c0:	99 a1       	ldd	r25, Y+33	; 0x21
     4c2:	0e 94 c3 00 	call	0x186	; 0x186 <EEPROM_Write_WithSize>
     4c6:	87 ea       	ldi	r24, 0xA7	; 167
     4c8:	91 e6       	ldi	r25, 0x61	; 97
     4ca:	01 97       	sbiw	r24, 0x01	; 1
     4cc:	f1 f7       	brne	.-4      	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
     4ce:	00 c0       	rjmp	.+0      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     4d0:	00 00       	nop
		_delay_ms(100);
		 //--- pan receive to EEPROM
		 	EEPROM_Read_String_With_size(str1 ,16);
     4d2:	60 e1       	ldi	r22, 0x10	; 16
     4d4:	80 ec       	ldi	r24, 0xC0	; 192
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	0e 94 a9 00 	call	0x152	; 0x152 <EEPROM_Read_String_With_size>
     4dc:	e7 ea       	ldi	r30, 0xA7	; 167
     4de:	f1 e6       	ldi	r31, 0x61	; 97
     4e0:	31 97       	sbiw	r30, 0x01	; 1
     4e2:	f1 f7       	brne	.-4      	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
     4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
     4e6:	00 00       	nop
		_delay_ms(100);
	
		EEPROM_Write_WithSize(pin,&ad2,4);// PAN sent to EEPROM
     4e8:	44 e0       	ldi	r20, 0x04	; 4
     4ea:	60 e6       	ldi	r22, 0x60	; 96
     4ec:	70 e0       	ldi	r23, 0x00	; 0
     4ee:	83 2d       	mov	r24, r3
     4f0:	94 2d       	mov	r25, r4
     4f2:	0e 94 c3 00 	call	0x186	; 0x186 <EEPROM_Write_WithSize>
     4f6:	87 ea       	ldi	r24, 0xA7	; 167
     4f8:	91 e6       	ldi	r25, 0x61	; 97
     4fa:	01 97       	sbiw	r24, 0x01	; 1
     4fc:	f1 f7       	brne	.-4      	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
     4fe:	00 c0       	rjmp	.+0      	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
     500:	00 00       	nop
		_delay_ms(100);
	
		EEPROM_Read_String_With_size(str2 ,4);
     502:	64 e0       	ldi	r22, 0x04	; 4
     504:	8c eb       	ldi	r24, 0xBC	; 188
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	0e 94 a9 00 	call	0x152	; 0x152 <EEPROM_Read_String_With_size>
		
	
	
// user mode
	DIO_WRITEPIN(pinb0,LOW);
     50c:	60 e0       	ldi	r22, 0x00	; 0
     50e:	88 e0       	ldi	r24, 0x08	; 8
     510:	0e 94 b5 03 	call	0x76a	; 0x76a <DIO_WRITEPIN>
	
	// sending 
	uint8_t index = 0;
	DIO_WRITEPIN(SS, LOW);
     514:	60 e0       	ldi	r22, 0x00	; 0
     516:	8c e0       	ldi	r24, 0x0C	; 12
     518:	0e 94 b5 03 	call	0x76a	; 0x76a <DIO_WRITEPIN>

	while (str1[index] != '\0')
     51c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <str1>
     520:	81 11       	cpse	r24, r1
     522:	b1 cf       	rjmp	.-158    	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
	{
		SPI_SendReceive(str1[index]);
		index++;
		_delay_ms(800);
	}
	SPI_SendReceive('\0');
     524:	80 e0       	ldi	r24, 0x00	; 0
     526:	0e 94 91 04 	call	0x922	; 0x922 <SPI_SendReceive>

	DIO_WRITEPIN(SS, HIGH);
     52a:	61 e0       	ldi	r22, 0x01	; 1
     52c:	8c e0       	ldi	r24, 0x0C	; 12
     52e:	0e 94 b5 03 	call	0x76a	; 0x76a <DIO_WRITEPIN>
//USART_Transmit_string(str1);
//SPI_transmit_string(str1);

//*******************************************	*/	
	
}
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	a1 96       	adiw	r28, 0x21	; 33
     538:	0f b6       	in	r0, 0x3f	; 63
     53a:	f8 94       	cli
     53c:	de bf       	out	0x3e, r29	; 62
     53e:	0f be       	out	0x3f, r0	; 63
     540:	cd bf       	out	0x3d, r28	; 61
     542:	df 91       	pop	r29
     544:	cf 91       	pop	r28
     546:	1f 91       	pop	r17
     548:	0f 91       	pop	r16
     54a:	ff 90       	pop	r15
     54c:	ef 90       	pop	r14
     54e:	df 90       	pop	r13
     550:	cf 90       	pop	r12
     552:	bf 90       	pop	r11
     554:	af 90       	pop	r10
     556:	9f 90       	pop	r9
     558:	8f 90       	pop	r8
     55a:	7f 90       	pop	r7
     55c:	6f 90       	pop	r6
     55e:	5f 90       	pop	r5
     560:	4f 90       	pop	r4
     562:	3f 90       	pop	r3
     564:	08 95       	ret

00000566 <DIO_INITPIN>:
   */
DIO_ERROR_TYPE DIO_INITPIN(DIO_PIN_TYPE PIN,DIO_PINSTATUS_TYPE STATUS)
{
	DIO_PIN_TYPE PIN_NUM;
	DIO_PORT_TYPE PORT;
	PORT=PIN/8;                                  //to determine which port i'm using
     566:	98 2f       	mov	r25, r24
     568:	96 95       	lsr	r25
     56a:	96 95       	lsr	r25
     56c:	96 95       	lsr	r25
	PIN_NUM=PIN%8;                               //to determine which pin in the port i'm using 
	DIO_ERROR_TYPE error=VALID_DIO;
	if(PORT>4)
     56e:	95 30       	cpi	r25, 0x05	; 5
     570:	08 f0       	brcs	.+2      	; 0x574 <DIO_INITPIN+0xe>
     572:	f9 c0       	rjmp	.+498    	; 0x766 <DIO_INITPIN+0x200>
DIO_ERROR_TYPE DIO_INITPIN(DIO_PIN_TYPE PIN,DIO_PINSTATUS_TYPE STATUS)
{
	DIO_PIN_TYPE PIN_NUM;
	DIO_PORT_TYPE PORT;
	PORT=PIN/8;                                  //to determine which port i'm using
	PIN_NUM=PIN%8;                               //to determine which pin in the port i'm using 
     574:	87 70       	andi	r24, 0x07	; 7
	{
		return INVALID_PIN_NUMBER;
	}
	else
	 {
	switch(STATUS)
     576:	61 30       	cpi	r22, 0x01	; 1
     578:	31 f0       	breq	.+12     	; 0x586 <DIO_INITPIN+0x20>
     57a:	08 f4       	brcc	.+2      	; 0x57e <DIO_INITPIN+0x18>
     57c:	a4 c0       	rjmp	.+328    	; 0x6c6 <DIO_INITPIN+0x160>
     57e:	62 30       	cpi	r22, 0x02	; 2
     580:	09 f4       	brne	.+2      	; 0x584 <DIO_INITPIN+0x1e>
     582:	51 c0       	rjmp	.+162    	; 0x626 <DIO_INITPIN+0xc0>
     584:	ef c0       	rjmp	.+478    	; 0x764 <DIO_INITPIN+0x1fe>
	{
		case INFREE:
		switch(PORT)
     586:	91 30       	cpi	r25, 0x01	; 1
     588:	c1 f0       	breq	.+48     	; 0x5ba <DIO_INITPIN+0x54>
     58a:	28 f0       	brcs	.+10     	; 0x596 <DIO_INITPIN+0x30>
     58c:	92 30       	cpi	r25, 0x02	; 2
     58e:	39 f1       	breq	.+78     	; 0x5de <DIO_INITPIN+0x78>
     590:	93 30       	cpi	r25, 0x03	; 3
     592:	b9 f1       	breq	.+110    	; 0x602 <DIO_INITPIN+0x9c>
     594:	e7 c0       	rjmp	.+462    	; 0x764 <DIO_INITPIN+0x1fe>
		{
			case PA:
			clear_bit(DDRA,PIN_NUM);
     596:	4a b3       	in	r20, 0x1a	; 26
     598:	21 e0       	ldi	r18, 0x01	; 1
     59a:	30 e0       	ldi	r19, 0x00	; 0
     59c:	b9 01       	movw	r22, r18
     59e:	02 c0       	rjmp	.+4      	; 0x5a4 <DIO_INITPIN+0x3e>
     5a0:	66 0f       	add	r22, r22
     5a2:	77 1f       	adc	r23, r23
     5a4:	8a 95       	dec	r24
     5a6:	e2 f7       	brpl	.-8      	; 0x5a0 <DIO_INITPIN+0x3a>
     5a8:	cb 01       	movw	r24, r22
     5aa:	80 95       	com	r24
     5ac:	94 2f       	mov	r25, r20
     5ae:	98 23       	and	r25, r24
     5b0:	9a bb       	out	0x1a, r25	; 26
			clear_bit(PORTA,PIN_NUM);       /*to make sure that the port register  is cleared in case of reuse*/
     5b2:	9b b3       	in	r25, 0x1b	; 27
     5b4:	89 23       	and	r24, r25
     5b6:	8b bb       	out	0x1b, r24	; 27
			break;
     5b8:	d5 c0       	rjmp	.+426    	; 0x764 <DIO_INITPIN+0x1fe>
			case PB:
			clear_bit(DDRB,PIN_NUM);
     5ba:	47 b3       	in	r20, 0x17	; 23
     5bc:	21 e0       	ldi	r18, 0x01	; 1
     5be:	30 e0       	ldi	r19, 0x00	; 0
     5c0:	b9 01       	movw	r22, r18
     5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <DIO_INITPIN+0x62>
     5c4:	66 0f       	add	r22, r22
     5c6:	77 1f       	adc	r23, r23
     5c8:	8a 95       	dec	r24
     5ca:	e2 f7       	brpl	.-8      	; 0x5c4 <DIO_INITPIN+0x5e>
     5cc:	cb 01       	movw	r24, r22
     5ce:	80 95       	com	r24
     5d0:	94 2f       	mov	r25, r20
     5d2:	98 23       	and	r25, r24
     5d4:	97 bb       	out	0x17, r25	; 23
			clear_bit(PORTB,PIN_NUM);
     5d6:	98 b3       	in	r25, 0x18	; 24
     5d8:	89 23       	and	r24, r25
     5da:	88 bb       	out	0x18, r24	; 24
			break;
     5dc:	c3 c0       	rjmp	.+390    	; 0x764 <DIO_INITPIN+0x1fe>

			case PC:
			clear_bit(DDRC,PIN_NUM);
     5de:	44 b3       	in	r20, 0x14	; 20
     5e0:	21 e0       	ldi	r18, 0x01	; 1
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	b9 01       	movw	r22, r18
     5e6:	02 c0       	rjmp	.+4      	; 0x5ec <DIO_INITPIN+0x86>
     5e8:	66 0f       	add	r22, r22
     5ea:	77 1f       	adc	r23, r23
     5ec:	8a 95       	dec	r24
     5ee:	e2 f7       	brpl	.-8      	; 0x5e8 <DIO_INITPIN+0x82>
     5f0:	cb 01       	movw	r24, r22
     5f2:	80 95       	com	r24
     5f4:	94 2f       	mov	r25, r20
     5f6:	98 23       	and	r25, r24
     5f8:	94 bb       	out	0x14, r25	; 20
			clear_bit(PORTC,PIN_NUM);
     5fa:	95 b3       	in	r25, 0x15	; 21
     5fc:	89 23       	and	r24, r25
     5fe:	85 bb       	out	0x15, r24	; 21
			break;
     600:	b1 c0       	rjmp	.+354    	; 0x764 <DIO_INITPIN+0x1fe>

			case PD:
			clear_bit(DDRD,PIN_NUM);
     602:	41 b3       	in	r20, 0x11	; 17
     604:	21 e0       	ldi	r18, 0x01	; 1
     606:	30 e0       	ldi	r19, 0x00	; 0
     608:	b9 01       	movw	r22, r18
     60a:	02 c0       	rjmp	.+4      	; 0x610 <DIO_INITPIN+0xaa>
     60c:	66 0f       	add	r22, r22
     60e:	77 1f       	adc	r23, r23
     610:	8a 95       	dec	r24
     612:	e2 f7       	brpl	.-8      	; 0x60c <DIO_INITPIN+0xa6>
     614:	cb 01       	movw	r24, r22
     616:	80 95       	com	r24
     618:	94 2f       	mov	r25, r20
     61a:	98 23       	and	r25, r24
     61c:	91 bb       	out	0x11, r25	; 17
			clear_bit(PORTD,PIN_NUM);
     61e:	92 b3       	in	r25, 0x12	; 18
     620:	89 23       	and	r24, r25
     622:	82 bb       	out	0x12, r24	; 18
			break;
     624:	9f c0       	rjmp	.+318    	; 0x764 <DIO_INITPIN+0x1fe>
		}
		break;
		
		case INPLUP:
		switch(PORT)
     626:	91 30       	cpi	r25, 0x01	; 1
     628:	c1 f0       	breq	.+48     	; 0x65a <DIO_INITPIN+0xf4>
     62a:	28 f0       	brcs	.+10     	; 0x636 <DIO_INITPIN+0xd0>
     62c:	92 30       	cpi	r25, 0x02	; 2
     62e:	39 f1       	breq	.+78     	; 0x67e <DIO_INITPIN+0x118>
     630:	93 30       	cpi	r25, 0x03	; 3
     632:	b9 f1       	breq	.+110    	; 0x6a2 <DIO_INITPIN+0x13c>
     634:	97 c0       	rjmp	.+302    	; 0x764 <DIO_INITPIN+0x1fe>
		{
			case PA:
			clear_bit(DDRA,PIN_NUM);
     636:	4a b3       	in	r20, 0x1a	; 26
     638:	21 e0       	ldi	r18, 0x01	; 1
     63a:	30 e0       	ldi	r19, 0x00	; 0
     63c:	b9 01       	movw	r22, r18
     63e:	02 c0       	rjmp	.+4      	; 0x644 <DIO_INITPIN+0xde>
     640:	66 0f       	add	r22, r22
     642:	77 1f       	adc	r23, r23
     644:	8a 95       	dec	r24
     646:	e2 f7       	brpl	.-8      	; 0x640 <DIO_INITPIN+0xda>
     648:	cb 01       	movw	r24, r22
     64a:	96 2f       	mov	r25, r22
     64c:	90 95       	com	r25
     64e:	94 23       	and	r25, r20
     650:	9a bb       	out	0x1a, r25	; 26
			set_bit(PORTA,PIN_NUM);
     652:	9b b3       	in	r25, 0x1b	; 27
     654:	89 2b       	or	r24, r25
     656:	8b bb       	out	0x1b, r24	; 27
			break;
     658:	85 c0       	rjmp	.+266    	; 0x764 <DIO_INITPIN+0x1fe>
			
			case PB:
			clear_bit(DDRB,PIN_NUM);
     65a:	47 b3       	in	r20, 0x17	; 23
     65c:	21 e0       	ldi	r18, 0x01	; 1
     65e:	30 e0       	ldi	r19, 0x00	; 0
     660:	b9 01       	movw	r22, r18
     662:	02 c0       	rjmp	.+4      	; 0x668 <DIO_INITPIN+0x102>
     664:	66 0f       	add	r22, r22
     666:	77 1f       	adc	r23, r23
     668:	8a 95       	dec	r24
     66a:	e2 f7       	brpl	.-8      	; 0x664 <DIO_INITPIN+0xfe>
     66c:	cb 01       	movw	r24, r22
     66e:	96 2f       	mov	r25, r22
     670:	90 95       	com	r25
     672:	94 23       	and	r25, r20
     674:	97 bb       	out	0x17, r25	; 23
			set_bit(PORTB,PIN_NUM);
     676:	98 b3       	in	r25, 0x18	; 24
     678:	89 2b       	or	r24, r25
     67a:	88 bb       	out	0x18, r24	; 24
			break;
     67c:	73 c0       	rjmp	.+230    	; 0x764 <DIO_INITPIN+0x1fe>

			case PC:
			clear_bit(DDRC,PIN_NUM);
     67e:	44 b3       	in	r20, 0x14	; 20
     680:	21 e0       	ldi	r18, 0x01	; 1
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	b9 01       	movw	r22, r18
     686:	02 c0       	rjmp	.+4      	; 0x68c <DIO_INITPIN+0x126>
     688:	66 0f       	add	r22, r22
     68a:	77 1f       	adc	r23, r23
     68c:	8a 95       	dec	r24
     68e:	e2 f7       	brpl	.-8      	; 0x688 <DIO_INITPIN+0x122>
     690:	cb 01       	movw	r24, r22
     692:	96 2f       	mov	r25, r22
     694:	90 95       	com	r25
     696:	94 23       	and	r25, r20
     698:	94 bb       	out	0x14, r25	; 20
			set_bit(PORTC,PIN_NUM);
     69a:	95 b3       	in	r25, 0x15	; 21
     69c:	89 2b       	or	r24, r25
     69e:	85 bb       	out	0x15, r24	; 21
			break;
     6a0:	61 c0       	rjmp	.+194    	; 0x764 <DIO_INITPIN+0x1fe>

			case PD:
			clear_bit(DDRD,PIN_NUM);
     6a2:	41 b3       	in	r20, 0x11	; 17
     6a4:	21 e0       	ldi	r18, 0x01	; 1
     6a6:	30 e0       	ldi	r19, 0x00	; 0
     6a8:	b9 01       	movw	r22, r18
     6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <DIO_INITPIN+0x14a>
     6ac:	66 0f       	add	r22, r22
     6ae:	77 1f       	adc	r23, r23
     6b0:	8a 95       	dec	r24
     6b2:	e2 f7       	brpl	.-8      	; 0x6ac <DIO_INITPIN+0x146>
     6b4:	cb 01       	movw	r24, r22
     6b6:	96 2f       	mov	r25, r22
     6b8:	90 95       	com	r25
     6ba:	94 23       	and	r25, r20
     6bc:	91 bb       	out	0x11, r25	; 17
			set_bit(PORTD,PIN_NUM);
     6be:	92 b3       	in	r25, 0x12	; 18
     6c0:	89 2b       	or	r24, r25
     6c2:	82 bb       	out	0x12, r24	; 18
			break;
     6c4:	4f c0       	rjmp	.+158    	; 0x764 <DIO_INITPIN+0x1fe>
		}
		break;
		return VALID_DIO;
		
		case OUTPUT:
		switch(PORT)
     6c6:	91 30       	cpi	r25, 0x01	; 1
     6c8:	c1 f0       	breq	.+48     	; 0x6fa <DIO_INITPIN+0x194>
     6ca:	28 f0       	brcs	.+10     	; 0x6d6 <DIO_INITPIN+0x170>
     6cc:	92 30       	cpi	r25, 0x02	; 2
     6ce:	39 f1       	breq	.+78     	; 0x71e <DIO_INITPIN+0x1b8>
     6d0:	93 30       	cpi	r25, 0x03	; 3
     6d2:	b9 f1       	breq	.+110    	; 0x742 <DIO_INITPIN+0x1dc>
     6d4:	47 c0       	rjmp	.+142    	; 0x764 <DIO_INITPIN+0x1fe>
		{
			case PA:
			clear_bit(PORTA,PIN_NUM);
     6d6:	4b b3       	in	r20, 0x1b	; 27
     6d8:	21 e0       	ldi	r18, 0x01	; 1
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	b9 01       	movw	r22, r18
     6de:	02 c0       	rjmp	.+4      	; 0x6e4 <DIO_INITPIN+0x17e>
     6e0:	66 0f       	add	r22, r22
     6e2:	77 1f       	adc	r23, r23
     6e4:	8a 95       	dec	r24
     6e6:	e2 f7       	brpl	.-8      	; 0x6e0 <DIO_INITPIN+0x17a>
     6e8:	cb 01       	movw	r24, r22
     6ea:	96 2f       	mov	r25, r22
     6ec:	90 95       	com	r25
     6ee:	94 23       	and	r25, r20
     6f0:	9b bb       	out	0x1b, r25	; 27
			set_bit(DDRA,PIN_NUM);
     6f2:	9a b3       	in	r25, 0x1a	; 26
     6f4:	89 2b       	or	r24, r25
     6f6:	8a bb       	out	0x1a, r24	; 26
			break;
     6f8:	35 c0       	rjmp	.+106    	; 0x764 <DIO_INITPIN+0x1fe>
			
			case PB:
			clear_bit(PORTB,PIN_NUM);
     6fa:	48 b3       	in	r20, 0x18	; 24
     6fc:	21 e0       	ldi	r18, 0x01	; 1
     6fe:	30 e0       	ldi	r19, 0x00	; 0
     700:	b9 01       	movw	r22, r18
     702:	02 c0       	rjmp	.+4      	; 0x708 <DIO_INITPIN+0x1a2>
     704:	66 0f       	add	r22, r22
     706:	77 1f       	adc	r23, r23
     708:	8a 95       	dec	r24
     70a:	e2 f7       	brpl	.-8      	; 0x704 <DIO_INITPIN+0x19e>
     70c:	cb 01       	movw	r24, r22
     70e:	96 2f       	mov	r25, r22
     710:	90 95       	com	r25
     712:	94 23       	and	r25, r20
     714:	98 bb       	out	0x18, r25	; 24
			set_bit(DDRB,PIN_NUM);
     716:	97 b3       	in	r25, 0x17	; 23
     718:	89 2b       	or	r24, r25
     71a:	87 bb       	out	0x17, r24	; 23
			break;
     71c:	23 c0       	rjmp	.+70     	; 0x764 <DIO_INITPIN+0x1fe>

			case PC:
			clear_bit(PORTC,PIN_NUM);
     71e:	45 b3       	in	r20, 0x15	; 21
     720:	21 e0       	ldi	r18, 0x01	; 1
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	b9 01       	movw	r22, r18
     726:	02 c0       	rjmp	.+4      	; 0x72c <DIO_INITPIN+0x1c6>
     728:	66 0f       	add	r22, r22
     72a:	77 1f       	adc	r23, r23
     72c:	8a 95       	dec	r24
     72e:	e2 f7       	brpl	.-8      	; 0x728 <DIO_INITPIN+0x1c2>
     730:	cb 01       	movw	r24, r22
     732:	96 2f       	mov	r25, r22
     734:	90 95       	com	r25
     736:	94 23       	and	r25, r20
     738:	95 bb       	out	0x15, r25	; 21
			set_bit(DDRC,PIN_NUM);
     73a:	94 b3       	in	r25, 0x14	; 20
     73c:	89 2b       	or	r24, r25
     73e:	84 bb       	out	0x14, r24	; 20
			break;
     740:	11 c0       	rjmp	.+34     	; 0x764 <DIO_INITPIN+0x1fe>

			case PD:
			clear_bit(PORTD,PIN_NUM);
     742:	42 b3       	in	r20, 0x12	; 18
     744:	21 e0       	ldi	r18, 0x01	; 1
     746:	30 e0       	ldi	r19, 0x00	; 0
     748:	b9 01       	movw	r22, r18
     74a:	02 c0       	rjmp	.+4      	; 0x750 <DIO_INITPIN+0x1ea>
     74c:	66 0f       	add	r22, r22
     74e:	77 1f       	adc	r23, r23
     750:	8a 95       	dec	r24
     752:	e2 f7       	brpl	.-8      	; 0x74c <DIO_INITPIN+0x1e6>
     754:	cb 01       	movw	r24, r22
     756:	96 2f       	mov	r25, r22
     758:	90 95       	com	r25
     75a:	94 23       	and	r25, r20
     75c:	92 bb       	out	0x12, r25	; 18
			set_bit(DDRD,PIN_NUM);
     75e:	91 b3       	in	r25, 0x11	; 17
     760:	89 2b       	or	r24, r25
     762:	81 bb       	out	0x11, r24	; 17
		break;
		return VALID_DIO;

	}
		}
}
     764:	08 95       	ret
     766:	82 e0       	ldi	r24, 0x02	; 2
     768:	08 95       	ret

0000076a <DIO_WRITEPIN>:
DIO_ERROR_TYPE DIO_WRITEPIN(DIO_PIN_TYPE PIN,DIO_VOLTAGE_TYPE VOLTAGE)
{
	
	DIO_PIN_TYPE PIN_NUM;
	DIO_PORT_TYPE PORT;
	PORT=PIN/8;
     76a:	98 2f       	mov	r25, r24
     76c:	96 95       	lsr	r25
     76e:	96 95       	lsr	r25
     770:	96 95       	lsr	r25
	PIN_NUM=PIN%8;
	if(PORT>4)
     772:	95 30       	cpi	r25, 0x05	; 5
     774:	08 f0       	brcs	.+2      	; 0x778 <DIO_WRITEPIN+0xe>
     776:	8e c0       	rjmp	.+284    	; 0x894 <__stack+0x35>
	}
	else if(PIN_NUM>32)
	{
		return INVALID_PIN_NUMBER;
	}
	else if(VOLTAGE>2)
     778:	63 30       	cpi	r22, 0x03	; 3
     77a:	08 f0       	brcs	.+2      	; 0x77e <DIO_WRITEPIN+0x14>
     77c:	8d c0       	rjmp	.+282    	; 0x898 <__stack+0x39>
{
	
	DIO_PIN_TYPE PIN_NUM;
	DIO_PORT_TYPE PORT;
	PORT=PIN/8;
	PIN_NUM=PIN%8;
     77e:	87 70       	andi	r24, 0x07	; 7
		return INVALID_VOLTAGE;
	}
	else 
	{
	
	if(VOLTAGE==HIGH)
     780:	61 30       	cpi	r22, 0x01	; 1
     782:	09 f0       	breq	.+2      	; 0x786 <DIO_WRITEPIN+0x1c>
     784:	40 c0       	rjmp	.+128    	; 0x806 <DIO_WRITEPIN+0x9c>
	{
		switch(PORT)
     786:	91 30       	cpi	r25, 0x01	; 1
     788:	a1 f0       	breq	.+40     	; 0x7b2 <DIO_WRITEPIN+0x48>
     78a:	28 f0       	brcs	.+10     	; 0x796 <DIO_WRITEPIN+0x2c>
     78c:	92 30       	cpi	r25, 0x02	; 2
     78e:	f9 f0       	breq	.+62     	; 0x7ce <DIO_WRITEPIN+0x64>
     790:	93 30       	cpi	r25, 0x03	; 3
     792:	59 f1       	breq	.+86     	; 0x7ea <DIO_WRITEPIN+0x80>
     794:	83 c0       	rjmp	.+262    	; 0x89c <__stack+0x3d>
		{
			case PA:
			set_bit(PORTA,PIN_NUM);
     796:	4b b3       	in	r20, 0x1b	; 27
     798:	21 e0       	ldi	r18, 0x01	; 1
     79a:	30 e0       	ldi	r19, 0x00	; 0
     79c:	b9 01       	movw	r22, r18
     79e:	02 c0       	rjmp	.+4      	; 0x7a4 <DIO_WRITEPIN+0x3a>
     7a0:	66 0f       	add	r22, r22
     7a2:	77 1f       	adc	r23, r23
     7a4:	8a 95       	dec	r24
     7a6:	e2 f7       	brpl	.-8      	; 0x7a0 <DIO_WRITEPIN+0x36>
     7a8:	cb 01       	movw	r24, r22
     7aa:	84 2b       	or	r24, r20
     7ac:	8b bb       	out	0x1b, r24	; 27
			case PD:
			set_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
     7ae:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(PORT)
		{
			case PA:
			set_bit(PORTA,PIN_NUM);
			break;
     7b0:	08 95       	ret
			case PB:
			set_bit(PORTB,PIN_NUM);
     7b2:	48 b3       	in	r20, 0x18	; 24
     7b4:	21 e0       	ldi	r18, 0x01	; 1
     7b6:	30 e0       	ldi	r19, 0x00	; 0
     7b8:	b9 01       	movw	r22, r18
     7ba:	02 c0       	rjmp	.+4      	; 0x7c0 <DIO_WRITEPIN+0x56>
     7bc:	66 0f       	add	r22, r22
     7be:	77 1f       	adc	r23, r23
     7c0:	8a 95       	dec	r24
     7c2:	e2 f7       	brpl	.-8      	; 0x7bc <DIO_WRITEPIN+0x52>
     7c4:	cb 01       	movw	r24, r22
     7c6:	84 2b       	or	r24, r20
     7c8:	88 bb       	out	0x18, r24	; 24
			case PD:
			set_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
     7ca:	80 e0       	ldi	r24, 0x00	; 0
			case PA:
			set_bit(PORTA,PIN_NUM);
			break;
			case PB:
			set_bit(PORTB,PIN_NUM);
			break;
     7cc:	08 95       	ret
			case PC:
			set_bit(PORTC,PIN_NUM);
     7ce:	45 b3       	in	r20, 0x15	; 21
     7d0:	21 e0       	ldi	r18, 0x01	; 1
     7d2:	30 e0       	ldi	r19, 0x00	; 0
     7d4:	b9 01       	movw	r22, r18
     7d6:	02 c0       	rjmp	.+4      	; 0x7dc <DIO_WRITEPIN+0x72>
     7d8:	66 0f       	add	r22, r22
     7da:	77 1f       	adc	r23, r23
     7dc:	8a 95       	dec	r24
     7de:	e2 f7       	brpl	.-8      	; 0x7d8 <DIO_WRITEPIN+0x6e>
     7e0:	cb 01       	movw	r24, r22
     7e2:	84 2b       	or	r24, r20
     7e4:	85 bb       	out	0x15, r24	; 21
			case PD:
			set_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
     7e6:	80 e0       	ldi	r24, 0x00	; 0
			case PB:
			set_bit(PORTB,PIN_NUM);
			break;
			case PC:
			set_bit(PORTC,PIN_NUM);
			break;
     7e8:	08 95       	ret
			case PD:
			set_bit(PORTD,PIN_NUM);
     7ea:	42 b3       	in	r20, 0x12	; 18
     7ec:	21 e0       	ldi	r18, 0x01	; 1
     7ee:	30 e0       	ldi	r19, 0x00	; 0
     7f0:	b9 01       	movw	r22, r18
     7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <DIO_WRITEPIN+0x8e>
     7f4:	66 0f       	add	r22, r22
     7f6:	77 1f       	adc	r23, r23
     7f8:	8a 95       	dec	r24
     7fa:	e2 f7       	brpl	.-8      	; 0x7f4 <DIO_WRITEPIN+0x8a>
     7fc:	cb 01       	movw	r24, r22
     7fe:	84 2b       	or	r24, r20
     800:	82 bb       	out	0x12, r24	; 18
			break;

		}
		return VALID_DIO;
     802:	80 e0       	ldi	r24, 0x00	; 0
			case PC:
			set_bit(PORTC,PIN_NUM);
			break;
			case PD:
			set_bit(PORTD,PIN_NUM);
			break;
     804:	08 95       	ret
		}
		return VALID_DIO;
	}


	else if(VOLTAGE==LOW)
     806:	61 11       	cpse	r22, r1
     808:	44 c0       	rjmp	.+136    	; 0x892 <__stack+0x33>
	{
		switch(PORT)
     80a:	91 30       	cpi	r25, 0x01	; 1
     80c:	a9 f0       	breq	.+42     	; 0x838 <DIO_WRITEPIN+0xce>
     80e:	28 f0       	brcs	.+10     	; 0x81a <DIO_WRITEPIN+0xb0>
     810:	92 30       	cpi	r25, 0x02	; 2
     812:	09 f1       	breq	.+66     	; 0x856 <DIO_WRITEPIN+0xec>
     814:	93 30       	cpi	r25, 0x03	; 3
     816:	71 f1       	breq	.+92     	; 0x874 <__stack+0x15>
     818:	43 c0       	rjmp	.+134    	; 0x8a0 <__stack+0x41>
		{
			case PA:
			clear_bit(PORTA,PIN_NUM);
     81a:	4b b3       	in	r20, 0x1b	; 27
     81c:	21 e0       	ldi	r18, 0x01	; 1
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	b9 01       	movw	r22, r18
     822:	02 c0       	rjmp	.+4      	; 0x828 <DIO_WRITEPIN+0xbe>
     824:	66 0f       	add	r22, r22
     826:	77 1f       	adc	r23, r23
     828:	8a 95       	dec	r24
     82a:	e2 f7       	brpl	.-8      	; 0x824 <DIO_WRITEPIN+0xba>
     82c:	cb 01       	movw	r24, r22
     82e:	80 95       	com	r24
     830:	84 23       	and	r24, r20
     832:	8b bb       	out	0x1b, r24	; 27
			case PD:
			clear_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
     834:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(PORT)
		{
			case PA:
			clear_bit(PORTA,PIN_NUM);
			break;
     836:	08 95       	ret
			case PB:
			clear_bit(PORTB,PIN_NUM);
     838:	48 b3       	in	r20, 0x18	; 24
     83a:	21 e0       	ldi	r18, 0x01	; 1
     83c:	30 e0       	ldi	r19, 0x00	; 0
     83e:	b9 01       	movw	r22, r18
     840:	02 c0       	rjmp	.+4      	; 0x846 <DIO_WRITEPIN+0xdc>
     842:	66 0f       	add	r22, r22
     844:	77 1f       	adc	r23, r23
     846:	8a 95       	dec	r24
     848:	e2 f7       	brpl	.-8      	; 0x842 <DIO_WRITEPIN+0xd8>
     84a:	cb 01       	movw	r24, r22
     84c:	80 95       	com	r24
     84e:	84 23       	and	r24, r20
     850:	88 bb       	out	0x18, r24	; 24
			case PD:
			clear_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
     852:	80 e0       	ldi	r24, 0x00	; 0
			case PA:
			clear_bit(PORTA,PIN_NUM);
			break;
			case PB:
			clear_bit(PORTB,PIN_NUM);
			break;
     854:	08 95       	ret
			case PC:
			clear_bit(PORTC,PIN_NUM);
     856:	45 b3       	in	r20, 0x15	; 21
     858:	21 e0       	ldi	r18, 0x01	; 1
     85a:	30 e0       	ldi	r19, 0x00	; 0
     85c:	b9 01       	movw	r22, r18
     85e:	02 c0       	rjmp	.+4      	; 0x864 <__stack+0x5>
     860:	66 0f       	add	r22, r22
     862:	77 1f       	adc	r23, r23
     864:	8a 95       	dec	r24
     866:	e2 f7       	brpl	.-8      	; 0x860 <__stack+0x1>
     868:	cb 01       	movw	r24, r22
     86a:	80 95       	com	r24
     86c:	84 23       	and	r24, r20
     86e:	85 bb       	out	0x15, r24	; 21
			case PD:
			clear_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
     870:	80 e0       	ldi	r24, 0x00	; 0
			case PB:
			clear_bit(PORTB,PIN_NUM);
			break;
			case PC:
			clear_bit(PORTC,PIN_NUM);
			break;
     872:	08 95       	ret
			case PD:
			clear_bit(PORTD,PIN_NUM);
     874:	42 b3       	in	r20, 0x12	; 18
     876:	21 e0       	ldi	r18, 0x01	; 1
     878:	30 e0       	ldi	r19, 0x00	; 0
     87a:	b9 01       	movw	r22, r18
     87c:	02 c0       	rjmp	.+4      	; 0x882 <__stack+0x23>
     87e:	66 0f       	add	r22, r22
     880:	77 1f       	adc	r23, r23
     882:	8a 95       	dec	r24
     884:	e2 f7       	brpl	.-8      	; 0x87e <__stack+0x1f>
     886:	cb 01       	movw	r24, r22
     888:	80 95       	com	r24
     88a:	84 23       	and	r24, r20
     88c:	82 bb       	out	0x12, r24	; 18
			break;

		}
		return VALID_DIO;
     88e:	80 e0       	ldi	r24, 0x00	; 0
			case PC:
			clear_bit(PORTC,PIN_NUM);
			break;
			case PD:
			clear_bit(PORTD,PIN_NUM);
			break;
     890:	08 95       	ret

		}
		return VALID_DIO;
	}
}
}
     892:	08 95       	ret
	DIO_PORT_TYPE PORT;
	PORT=PIN/8;
	PIN_NUM=PIN%8;
	if(PORT>4)
	{
		return INVALID_PORT;
     894:	82 e0       	ldi	r24, 0x02	; 2
     896:	08 95       	ret
	{
		return INVALID_PIN_NUMBER;
	}
	else if(VOLTAGE>2)
	{
		return INVALID_VOLTAGE;
     898:	83 e0       	ldi	r24, 0x03	; 3
     89a:	08 95       	ret
			case PD:
			set_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
     89c:	80 e0       	ldi	r24, 0x00	; 0
     89e:	08 95       	ret
			case PD:
			clear_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
     8a0:	80 e0       	ldi	r24, 0x00	; 0
	}
}
}
     8a2:	08 95       	ret

000008a4 <SPI_MasterInit>:
		set_bit(SPCR,SPR0);
		set_bit(SPCR,SPR1);
		clear_bit(SPSR,SPI2X);
		break;
	}
}
     8a4:	cf 93       	push	r28
     8a6:	c8 2f       	mov	r28, r24
     8a8:	60 e0       	ldi	r22, 0x00	; 0
     8aa:	8d e0       	ldi	r24, 0x0D	; 13
     8ac:	0e 94 b3 02 	call	0x566	; 0x566 <DIO_INITPIN>
     8b0:	60 e0       	ldi	r22, 0x00	; 0
     8b2:	8f e0       	ldi	r24, 0x0F	; 15
     8b4:	0e 94 b3 02 	call	0x566	; 0x566 <DIO_INITPIN>
     8b8:	60 e0       	ldi	r22, 0x00	; 0
     8ba:	8c e0       	ldi	r24, 0x0C	; 12
     8bc:	0e 94 b3 02 	call	0x566	; 0x566 <DIO_INITPIN>
     8c0:	62 e0       	ldi	r22, 0x02	; 2
     8c2:	8e e0       	ldi	r24, 0x0E	; 14
     8c4:	0e 94 b3 02 	call	0x566	; 0x566 <DIO_INITPIN>
     8c8:	61 e0       	ldi	r22, 0x01	; 1
     8ca:	8c e0       	ldi	r24, 0x0C	; 12
     8cc:	0e 94 b5 03 	call	0x76a	; 0x76a <DIO_WRITEPIN>
     8d0:	6e 9a       	sbi	0x0d, 6	; 13
     8d2:	6c 9a       	sbi	0x0d, 4	; 13
     8d4:	8c 2f       	mov	r24, r28
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	87 30       	cpi	r24, 0x07	; 7
     8da:	91 05       	cpc	r25, r1
     8dc:	00 f5       	brcc	.+64     	; 0x91e <SPI_MasterInit+0x7a>
     8de:	fc 01       	movw	r30, r24
     8e0:	e6 5d       	subi	r30, 0xD6	; 214
     8e2:	ff 4f       	sbci	r31, 0xFF	; 255
     8e4:	0c 94 c5 05 	jmp	0xb8a	; 0xb8a <__tablejump2__>
     8e8:	68 98       	cbi	0x0d, 0	; 13
     8ea:	69 98       	cbi	0x0d, 1	; 13
     8ec:	70 9a       	sbi	0x0e, 0	; 14
     8ee:	17 c0       	rjmp	.+46     	; 0x91e <SPI_MasterInit+0x7a>
     8f0:	68 98       	cbi	0x0d, 0	; 13
     8f2:	69 98       	cbi	0x0d, 1	; 13
     8f4:	70 98       	cbi	0x0e, 0	; 14
     8f6:	13 c0       	rjmp	.+38     	; 0x91e <SPI_MasterInit+0x7a>
     8f8:	68 9a       	sbi	0x0d, 0	; 13
     8fa:	69 98       	cbi	0x0d, 1	; 13
     8fc:	70 9a       	sbi	0x0e, 0	; 14
     8fe:	0f c0       	rjmp	.+30     	; 0x91e <SPI_MasterInit+0x7a>
     900:	68 9a       	sbi	0x0d, 0	; 13
     902:	69 98       	cbi	0x0d, 1	; 13
     904:	70 98       	cbi	0x0e, 0	; 14
     906:	0b c0       	rjmp	.+22     	; 0x91e <SPI_MasterInit+0x7a>
     908:	68 98       	cbi	0x0d, 0	; 13
     90a:	69 9a       	sbi	0x0d, 1	; 13
     90c:	70 9a       	sbi	0x0e, 0	; 14
     90e:	07 c0       	rjmp	.+14     	; 0x91e <SPI_MasterInit+0x7a>
     910:	68 98       	cbi	0x0d, 0	; 13
     912:	69 9a       	sbi	0x0d, 1	; 13
     914:	70 98       	cbi	0x0e, 0	; 14
     916:	03 c0       	rjmp	.+6      	; 0x91e <SPI_MasterInit+0x7a>
     918:	68 9a       	sbi	0x0d, 0	; 13
     91a:	69 9a       	sbi	0x0d, 1	; 13
     91c:	70 98       	cbi	0x0e, 0	; 14
     91e:	cf 91       	pop	r28
     920:	08 95       	ret

00000922 <SPI_SendReceive>:


uint8_t SPI_SendReceive(uint8_t data)
{
	SPDR=data;
     922:	8f b9       	out	0x0f, r24	; 15
	while(!read_bit(SPSR,SPIF));
     924:	77 9b       	sbis	0x0e, 7	; 14
     926:	fe cf       	rjmp	.-4      	; 0x924 <SPI_SendReceive+0x2>
	return  SPDR;
     928:	8f b1       	in	r24, 0x0f	; 15
	
}
     92a:	08 95       	ret

0000092c <__vector_5>:
}




ISR(TIMER2_OVF){
     92c:	1f 92       	push	r1
     92e:	0f 92       	push	r0
     930:	0f b6       	in	r0, 0x3f	; 63
     932:	0f 92       	push	r0
     934:	11 24       	eor	r1, r1
	
     936:	0f 90       	pop	r0
     938:	0f be       	out	0x3f, r0	; 63
     93a:	0f 90       	pop	r0
     93c:	1f 90       	pop	r1
     93e:	18 95       	reti

00000940 <I2C_init>:

/**DESCRIPTION:-
 This Function is used To Initialize the Communication With a Certain BitRate*/
void I2C_init(I2C_PRESCALER prescaler){
	
	TWSR = 0x00 ;												//To Make Sure No Previous scaler Is Set
     940:	11 b8       	out	0x01, r1	; 1
	
	switch (prescaler){											//To Choose Between Different Set Of scalers 
     942:	81 30       	cpi	r24, 0x01	; 1
     944:	49 f0       	breq	.+18     	; 0x958 <I2C_init+0x18>
     946:	28 f0       	brcs	.+10     	; 0x952 <I2C_init+0x12>
     948:	82 30       	cpi	r24, 0x02	; 2
     94a:	49 f0       	breq	.+18     	; 0x95e <I2C_init+0x1e>
     94c:	83 30       	cpi	r24, 0x03	; 3
     94e:	51 f0       	breq	.+20     	; 0x964 <I2C_init+0x24>
     950:	0b c0       	rjmp	.+22     	; 0x968 <I2C_init+0x28>
		case I2C_PRESCALER_1 :
		clear_bit(TWSR,TWPS0);
     952:	08 98       	cbi	0x01, 0	; 1
		clear_bit(TWSR,TWPS1);
     954:	09 98       	cbi	0x01, 1	; 1
		break;
     956:	08 c0       	rjmp	.+16     	; 0x968 <I2C_init+0x28>
		
		case I2C_PRESCALER_4 :
		set_bit(TWSR,TWPS0);
     958:	08 9a       	sbi	0x01, 0	; 1
		clear_bit(TWSR,TWPS1);
     95a:	09 98       	cbi	0x01, 1	; 1
		break;
     95c:	05 c0       	rjmp	.+10     	; 0x968 <I2C_init+0x28>
		
		case I2C_PRESCALER_16 :
		clear_bit(TWSR,TWPS0);
     95e:	08 98       	cbi	0x01, 0	; 1
		set_bit(TWSR,TWPS1);
     960:	09 9a       	sbi	0x01, 1	; 1
		break;
     962:	02 c0       	rjmp	.+4      	; 0x968 <I2C_init+0x28>
		
		
		case I2C_PRESCALER_64 :
		set_bit(TWSR,TWPS0);
     964:	08 9a       	sbi	0x01, 0	; 1
		set_bit(TWSR,TWPS1);
     966:	09 9a       	sbi	0x01, 1	; 1
		default:
		break;
	}
	
	
	TWBR  = BITRATE(TWSR);								//To Select The Division Factor For The BitRate Generator Which Generates The Master CLK
     968:	61 b1       	in	r22, 0x01	; 1
     96a:	63 70       	andi	r22, 0x03	; 3
     96c:	70 e0       	ldi	r23, 0x00	; 0
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__floatsisf>
     976:	9b 01       	movw	r18, r22
     978:	ac 01       	movw	r20, r24
     97a:	60 e0       	ldi	r22, 0x00	; 0
     97c:	70 e0       	ldi	r23, 0x00	; 0
     97e:	80 e8       	ldi	r24, 0x80	; 128
     980:	90 e4       	ldi	r25, 0x40	; 64
     982:	0e 94 75 07 	call	0xeea	; 0xeea <pow>
     986:	9b 01       	movw	r18, r22
     988:	ac 01       	movw	r20, r24
     98a:	0e 94 cc 05 	call	0xb98	; 0xb98 <__addsf3>
     98e:	9b 01       	movw	r18, r22
     990:	ac 01       	movw	r20, r24
     992:	60 e0       	ldi	r22, 0x00	; 0
     994:	70 e0       	ldi	r23, 0x00	; 0
     996:	80 e8       	ldi	r24, 0x80	; 128
     998:	9f e4       	ldi	r25, 0x4F	; 79
     99a:	0e 94 38 06 	call	0xc70	; 0xc70 <__divsf3>
     99e:	0e 94 aa 06 	call	0xd54	; 0xd54 <__fixunssfsi>
     9a2:	60 b9       	out	0x00, r22	; 0
     9a4:	08 95       	ret

000009a6 <I2C_start>:
/*************************************************************************************************************************************************/
/**DESCRIPTION:-
 This Function is used To Enables The Communication And Send The Starting Bit*/
uint8_t I2C_start(){
	
	set_bit(TWCR,TWINT);  // clear flag
     9a6:	86 b7       	in	r24, 0x36	; 54
     9a8:	80 68       	ori	r24, 0x80	; 128
     9aa:	86 bf       	out	0x36, r24	; 54
	set_bit(TWCR,TWSTA);  // enable start condition
     9ac:	86 b7       	in	r24, 0x36	; 54
     9ae:	80 62       	ori	r24, 0x20	; 32
     9b0:	86 bf       	out	0x36, r24	; 54
	set_bit(TWCR,TWEN);   // enable i2c
     9b2:	86 b7       	in	r24, 0x36	; 54
     9b4:	84 60       	ori	r24, 0x04	; 4
     9b6:	86 bf       	out	0x36, r24	; 54
	while(read_bit(TWCR,TWINT) != 1);  // wait for flag to set
     9b8:	06 b6       	in	r0, 0x36	; 54
     9ba:	07 fe       	sbrs	r0, 7
     9bc:	fd cf       	rjmp	.-6      	; 0x9b8 <I2C_start+0x12>
	
	if((TWSR & 0xf8) == START_SENT){   // check start condition status
     9be:	91 b1       	in	r25, 0x01	; 1
     9c0:	98 7f       	andi	r25, 0xF8	; 248
     9c2:	81 e0       	ldi	r24, 0x01	; 1
     9c4:	98 30       	cpi	r25, 0x08	; 8
     9c6:	09 f4       	brne	.+2      	; 0x9ca <I2C_start+0x24>
     9c8:	80 e0       	ldi	r24, 0x00	; 0
	}else {
		
		return START_NOT_SENT ;
	}
	
}
     9ca:	08 95       	ret

000009cc <I2C_addressEvent>:
/*******************************************************************************************************************************************/
/**DESCRIPTION:-
 This Function is used To Set The Slave Address For Communications And Send The Event Type Of The Master Either R/W*/

uint8_t I2C_addressEvent(uint8_t a_address ,R_W r_w ){
	switch(r_w){
     9cc:	66 23       	and	r22, r22
     9ce:	19 f0       	breq	.+6      	; 0x9d6 <I2C_addressEvent+0xa>
     9d0:	61 30       	cpi	r22, 0x01	; 1
     9d2:	a9 f0       	breq	.+42     	; 0x9fe <I2C_addressEvent+0x32>
     9d4:	29 c0       	rjmp	.+82     	; 0xa28 <I2C_addressEvent+0x5c>
		
		case WRITE : 
		TWDR = a_address + WRITE ;				 //SET ADDRESS + WRITE
     9d6:	83 b9       	out	0x03, r24	; 3
		
		set_bit(TWCR,TWINT);					 // clear flag
     9d8:	86 b7       	in	r24, 0x36	; 54
     9da:	80 68       	ori	r24, 0x80	; 128
     9dc:	86 bf       	out	0x36, r24	; 54
		set_bit(TWCR,TWEN);						// enable i2c
     9de:	86 b7       	in	r24, 0x36	; 54
     9e0:	84 60       	ori	r24, 0x04	; 4
     9e2:	86 bf       	out	0x36, r24	; 54
		while(read_bit(TWCR,TWINT) != 1);		// wait for flag to set
     9e4:	06 b6       	in	r0, 0x36	; 54
     9e6:	07 fe       	sbrs	r0, 7
     9e8:	fd cf       	rjmp	.-6      	; 0x9e4 <I2C_addressEvent+0x18>
		
		if((TWSR & 0xf8) == AD_W_SENT_ACK){	// check status of sending address that we want to write in and ack received
     9ea:	81 b1       	in	r24, 0x01	; 1
     9ec:	88 7f       	andi	r24, 0xF8	; 248
     9ee:	88 31       	cpi	r24, 0x18	; 24
     9f0:	e1 f0       	breq	.+56     	; 0xa2a <I2C_addressEvent+0x5e>
			return AD_W_SENT_ACK_OK ;
		}
		else if ((TWSR & 0xf8) == AD_W_SENT_NACK){
     9f2:	81 b1       	in	r24, 0x01	; 1
     9f4:	88 7f       	andi	r24, 0xF8	; 248
     9f6:	80 32       	cpi	r24, 0x20	; 32
     9f8:	d1 f0       	breq	.+52     	; 0xa2e <I2C_addressEvent+0x62>
			return AD_W_SENT_NACK_OK ;
		}
		else {
			
			return AD_W_SENT_FAILED ;
     9fa:	85 e0       	ldi	r24, 0x05	; 5
     9fc:	08 95       	ret
		break; // END OF WRITE CASE
		
		
		
		case READ :
		TWDR = a_address + READ ; //SET ADDRESS + read
     9fe:	8f 5f       	subi	r24, 0xFF	; 255
     a00:	83 b9       	out	0x03, r24	; 3
		
		set_bit(TWCR,TWINT);  // clear flag
     a02:	86 b7       	in	r24, 0x36	; 54
     a04:	80 68       	ori	r24, 0x80	; 128
     a06:	86 bf       	out	0x36, r24	; 54
		set_bit(TWCR,TWEN);   // enable i2c
     a08:	86 b7       	in	r24, 0x36	; 54
     a0a:	84 60       	ori	r24, 0x04	; 4
     a0c:	86 bf       	out	0x36, r24	; 54
		while(read_bit(TWCR,TWINT) != 1);  // wait for flag to set
     a0e:	06 b6       	in	r0, 0x36	; 54
     a10:	07 fe       	sbrs	r0, 7
     a12:	fd cf       	rjmp	.-6      	; 0xa0e <I2C_addressEvent+0x42>
		
		if((TWSR & 0xf8) == AD_R_SENT_ACK){   // // check status of sending address that we want to read from and ack received
     a14:	81 b1       	in	r24, 0x01	; 1
     a16:	88 7f       	andi	r24, 0xF8	; 248
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	59 f0       	breq	.+22     	; 0xa32 <I2C_addressEvent+0x66>
			return AD_R_SENT_ACK_OK ;
		}
		else if ((TWSR & 0xf8) == AD_R_SENT_NACK){
     a1c:	81 b1       	in	r24, 0x01	; 1
     a1e:	88 7f       	andi	r24, 0xF8	; 248
     a20:	88 34       	cpi	r24, 0x48	; 72
     a22:	49 f0       	breq	.+18     	; 0xa36 <I2C_addressEvent+0x6a>
			return AD_R_SENT_NACK_OK ;
		}
		else {
				
			return AD_R_SENT_FAILED ;
     a24:	88 e0       	ldi	r24, 0x08	; 8
     a26:	08 95       	ret
		break;// END OF READ CASE
		
	}

	
}
     a28:	08 95       	ret
		set_bit(TWCR,TWINT);					 // clear flag
		set_bit(TWCR,TWEN);						// enable i2c
		while(read_bit(TWCR,TWINT) != 1);		// wait for flag to set
		
		if((TWSR & 0xf8) == AD_W_SENT_ACK){	// check status of sending address that we want to write in and ack received
			return AD_W_SENT_ACK_OK ;
     a2a:	82 e0       	ldi	r24, 0x02	; 2
     a2c:	08 95       	ret
		}
		else if ((TWSR & 0xf8) == AD_W_SENT_NACK){
			return AD_W_SENT_NACK_OK ;
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	08 95       	ret
		set_bit(TWCR,TWINT);  // clear flag
		set_bit(TWCR,TWEN);   // enable i2c
		while(read_bit(TWCR,TWINT) != 1);  // wait for flag to set
		
		if((TWSR & 0xf8) == AD_R_SENT_ACK){   // // check status of sending address that we want to read from and ack received
			return AD_R_SENT_ACK_OK ;
     a32:	86 e0       	ldi	r24, 0x06	; 6
     a34:	08 95       	ret
		}
		else if ((TWSR & 0xf8) == AD_R_SENT_NACK){
			return AD_R_SENT_NACK_OK ;
     a36:	87 e0       	ldi	r24, 0x07	; 7
		break;// END OF READ CASE
		
	}

	
}
     a38:	08 95       	ret

00000a3a <I2C_sendData>:
/********************************************************************************************************************************************/
/**DESCRIPTION:-
 This Function is used To Initialize Data Transfer */
uint8_t I2C_sendData(uint8_t *data ){
		
		TWDR = *data ;								//Write Data On Data Register
     a3a:	fc 01       	movw	r30, r24
     a3c:	80 81       	ld	r24, Z
     a3e:	83 b9       	out	0x03, r24	; 3
		set_bit(TWCR,TWINT);						// clear flag
     a40:	86 b7       	in	r24, 0x36	; 54
     a42:	80 68       	ori	r24, 0x80	; 128
     a44:	86 bf       	out	0x36, r24	; 54
		set_bit(TWCR,TWEN);							// enable i2c
     a46:	86 b7       	in	r24, 0x36	; 54
     a48:	84 60       	ori	r24, 0x04	; 4
     a4a:	86 bf       	out	0x36, r24	; 54
		while(read_bit(TWCR,TWINT) != 1);			// wait for flag to set
     a4c:	06 b6       	in	r0, 0x36	; 54
     a4e:	07 fe       	sbrs	r0, 7
     a50:	fd cf       	rjmp	.-6      	; 0xa4c <I2C_sendData+0x12>
		
		if((TWSR & 0xf8) == DATA_SENT_ACK){		  // check status of sending data  and ack received
     a52:	81 b1       	in	r24, 0x01	; 1
     a54:	88 7f       	andi	r24, 0xF8	; 248
     a56:	88 32       	cpi	r24, 0x28	; 40
     a58:	31 f0       	breq	.+12     	; 0xa66 <I2C_sendData+0x2c>
			return DATA_SENT_ACK_OK ;
		}
		else if ((TWSR & 0xf8) == DATA_SENT_NACK){
     a5a:	81 b1       	in	r24, 0x01	; 1
     a5c:	88 7f       	andi	r24, 0xF8	; 248
     a5e:	80 33       	cpi	r24, 0x30	; 48
     a60:	21 f0       	breq	.+8      	; 0xa6a <I2C_sendData+0x30>
			return DATA_SENT_NACK_OK ;
		}
		else {
			
			return DATA_SENT_FAILED ;
     a62:	8b e0       	ldi	r24, 0x0B	; 11
     a64:	08 95       	ret
		set_bit(TWCR,TWINT);						// clear flag
		set_bit(TWCR,TWEN);							// enable i2c
		while(read_bit(TWCR,TWINT) != 1);			// wait for flag to set
		
		if((TWSR & 0xf8) == DATA_SENT_ACK){		  // check status of sending data  and ack received
			return DATA_SENT_ACK_OK ;
     a66:	89 e0       	ldi	r24, 0x09	; 9
     a68:	08 95       	ret
		}
		else if ((TWSR & 0xf8) == DATA_SENT_NACK){
			return DATA_SENT_NACK_OK ;
     a6a:	8a e0       	ldi	r24, 0x0A	; 10
		else {
			
			return DATA_SENT_FAILED ;
		}
	
}
     a6c:	08 95       	ret

00000a6e <I2C_stop>:
/******************************************************************************************************************************************/
/**DESCRIPTION:-
 This Function is used To Write The Stop Bit For The Communication*/
void I2C_stop(){
	clear_bit(TWCR,TWSTA);		 // clear start
     a6e:	86 b7       	in	r24, 0x36	; 54
     a70:	8f 7d       	andi	r24, 0xDF	; 223
     a72:	86 bf       	out	0x36, r24	; 54
	set_bit(TWCR,TWINT);		 // clear flag
     a74:	86 b7       	in	r24, 0x36	; 54
     a76:	80 68       	ori	r24, 0x80	; 128
     a78:	86 bf       	out	0x36, r24	; 54
	set_bit(TWCR,TWSTO);		// enable stop condition
     a7a:	86 b7       	in	r24, 0x36	; 54
     a7c:	80 61       	ori	r24, 0x10	; 16
     a7e:	86 bf       	out	0x36, r24	; 54
	set_bit(TWCR,TWEN);			// enable i2c
     a80:	86 b7       	in	r24, 0x36	; 54
     a82:	84 60       	ori	r24, 0x04	; 4
     a84:	86 bf       	out	0x36, r24	; 54
	while(read_bit(TWCR,TWSTO) != 0);  // wait for flag to set
     a86:	06 b6       	in	r0, 0x36	; 54
     a88:	04 fc       	sbrc	r0, 4
     a8a:	fd cf       	rjmp	.-6      	; 0xa86 <I2C_stop+0x18>
	
}
     a8c:	08 95       	ret

00000a8e <I2C_receiveData>:
/******************************************************************************************************************************************/
/**DESCRIPTION:-
 This Function is used To Receive Data From a Slave To Master*/
uint8_t I2C_receiveData(uint8_t *data, ACKOLEDGMENT ack){
     a8e:	fc 01       	movw	r30, r24
	
	switch(ack){ 
     a90:	66 23       	and	r22, r22
     a92:	19 f0       	breq	.+6      	; 0xa9a <I2C_receiveData+0xc>
     a94:	61 30       	cpi	r22, 0x01	; 1
     a96:	29 f0       	breq	.+10     	; 0xaa2 <I2C_receiveData+0x14>
     a98:	07 c0       	rjmp	.+14     	; 0xaa8 <I2C_receiveData+0x1a>
		case ACK :
		set_bit(TWCR,TWEA); 
     a9a:	86 b7       	in	r24, 0x36	; 54
     a9c:	80 64       	ori	r24, 0x40	; 64
     a9e:	86 bf       	out	0x36, r24	; 54
		break;
     aa0:	03 c0       	rjmp	.+6      	; 0xaa8 <I2C_receiveData+0x1a>
		
		case NACK :
		clear_bit(TWCR,TWEA);
     aa2:	86 b7       	in	r24, 0x36	; 54
     aa4:	8f 7b       	andi	r24, 0xBF	; 191
     aa6:	86 bf       	out	0x36, r24	; 54
		break;
		
	}
	
	set_bit(TWCR,TWINT);  // clear flag
     aa8:	96 b7       	in	r25, 0x36	; 54
     aaa:	90 68       	ori	r25, 0x80	; 128
     aac:	96 bf       	out	0x36, r25	; 54
	set_bit(TWCR,TWEN);   // enable i2c
     aae:	96 b7       	in	r25, 0x36	; 54
     ab0:	94 60       	ori	r25, 0x04	; 4
     ab2:	96 bf       	out	0x36, r25	; 54
	while(read_bit(TWCR,TWINT) != 1);  // wait for flag to set
     ab4:	06 b6       	in	r0, 0x36	; 54
     ab6:	07 fe       	sbrs	r0, 7
     ab8:	fd cf       	rjmp	.-6      	; 0xab4 <I2C_receiveData+0x26>
	*data = TWDR ;
     aba:	83 b1       	in	r24, 0x03	; 3
     abc:	80 83       	st	Z, r24
	if((TWSR & 0xf8) == DATA_RECIEVE_ACK){    // check status of receiving data and ack received
     abe:	81 b1       	in	r24, 0x01	; 1
     ac0:	88 7f       	andi	r24, 0xF8	; 248
     ac2:	80 35       	cpi	r24, 0x50	; 80
     ac4:	31 f0       	breq	.+12     	; 0xad2 <I2C_receiveData+0x44>
		return DATA_RECIEVE_ACK_OK ;
	}
	else if ((TWSR & 0xf8) == DATA_RECIEVE_NACK){
     ac6:	81 b1       	in	r24, 0x01	; 1
     ac8:	88 7f       	andi	r24, 0xF8	; 248
     aca:	88 35       	cpi	r24, 0x58	; 88
     acc:	21 f0       	breq	.+8      	; 0xad6 <I2C_receiveData+0x48>
		return DATA_RECIEVE_NACK_OK ;
	}
	else {
		
		return DATA_RECIEVE_FAILED ;
     ace:	8e e0       	ldi	r24, 0x0E	; 14
     ad0:	08 95       	ret
	set_bit(TWCR,TWINT);  // clear flag
	set_bit(TWCR,TWEN);   // enable i2c
	while(read_bit(TWCR,TWINT) != 1);  // wait for flag to set
	*data = TWDR ;
	if((TWSR & 0xf8) == DATA_RECIEVE_ACK){    // check status of receiving data and ack received
		return DATA_RECIEVE_ACK_OK ;
     ad2:	8c e0       	ldi	r24, 0x0C	; 12
     ad4:	08 95       	ret
	}
	else if ((TWSR & 0xf8) == DATA_RECIEVE_NACK){
		return DATA_RECIEVE_NACK_OK ;
     ad6:	8d e0       	ldi	r24, 0x0D	; 13
		
		return DATA_RECIEVE_FAILED ;
	}
	

}
     ad8:	08 95       	ret

00000ada <USART_init>:
#include "uart.h"

void USART_init(void)
{
	uint16 baud= 51;
	UBRRH = (uint8_t)(baud>>8); // high nibble bits
     ada:	10 bc       	out	0x20, r1	; 32
	UBRRL = (uint8_t) baud; // low nibble bits	
     adc:	83 e3       	ldi	r24, 0x33	; 51
     ade:	89 b9       	out	0x09, r24	; 9

	UCSRB |=((1<<4)|(1<<3));     //Enable transmit and enable RXENn TXENn
     ae0:	8a b1       	in	r24, 0x0a	; 10
     ae2:	88 61       	ori	r24, 0x18	; 24
     ae4:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << UCSZ1) | (1 << UCSZ0) | (1 << URSEL);   // 2. Set the data size and enable writing to UCSRC
     ae6:	86 e8       	ldi	r24, 0x86	; 134
     ae8:	80 bd       	out	0x20, r24	; 32
     aea:	08 95       	ret

00000aec <USART_transmit>:

// Data Transmission Sending Frames with 5 to 8 Data Bit
void USART_transmit( uint8_t data )
{
	// Wait for empty transmit buffer
	while(! (UCSRA & (1 << UDRE)));
     aec:	5d 9b       	sbis	0x0b, 5	; 11
     aee:	fe cf       	rjmp	.-4      	; 0xaec <USART_transmit>
	;
	// Put data into buffer, sends the data
	UDR = data;
     af0:	8c b9       	out	0x0c, r24	; 12
     af2:	08 95       	ret

00000af4 <USART_receive>:

// Receiving Frames with 5 to 8 Data Bits
uint8_t USART_receive( void )
{
	// Wait for data to be received
	while ( !(UCSRA & (1<<RXC)) )
     af4:	5f 9b       	sbis	0x0b, 7	; 11
     af6:	fe cf       	rjmp	.-4      	; 0xaf4 <USART_receive>
	;
	// Get and return received data from buffer
	return UDR;
     af8:	8c b1       	in	r24, 0x0c	; 12
}
     afa:	08 95       	ret

00000afc <USART_Transmit_string>:

void USART_Transmit_string (char * str)
{
     afc:	0f 93       	push	r16
     afe:	1f 93       	push	r17
     b00:	cf 93       	push	r28
     b02:	fc 01       	movw	r30, r24
	uint8_t i =0 ;
	while(str[i]!=0)
     b04:	80 81       	ld	r24, Z
     b06:	88 23       	and	r24, r24
     b08:	59 f0       	breq	.+22     	; 0xb20 <USART_Transmit_string+0x24>
     b0a:	8f 01       	movw	r16, r30
     b0c:	c0 e0       	ldi	r28, 0x00	; 0
	{ USART_transmit(str[i]); i++;}
     b0e:	0e 94 76 05 	call	0xaec	; 0xaec <USART_transmit>
     b12:	cf 5f       	subi	r28, 0xFF	; 255
}

void USART_Transmit_string (char * str)
{
	uint8_t i =0 ;
	while(str[i]!=0)
     b14:	f8 01       	movw	r30, r16
     b16:	ec 0f       	add	r30, r28
     b18:	f1 1d       	adc	r31, r1
     b1a:	80 81       	ld	r24, Z
     b1c:	81 11       	cpse	r24, r1
     b1e:	f7 cf       	rjmp	.-18     	; 0xb0e <USART_Transmit_string+0x12>
	{ USART_transmit(str[i]); i++;}
	
}
     b20:	cf 91       	pop	r28
     b22:	1f 91       	pop	r17
     b24:	0f 91       	pop	r16
     b26:	08 95       	ret

00000b28 <USART_receive_string>:
char * USART_receive_string (uint8_t *string)  //Receive a character until carriage return or newline

{
     b28:	0f 93       	push	r16
     b2a:	1f 93       	push	r17
     b2c:	cf 93       	push	r28
     b2e:	8c 01       	movw	r16, r24

	uint8_t  i=0,char_input=0;
     b30:	c0 e0       	ldi	r28, 0x00	; 0
     b32:	01 c0       	rjmp	.+2      	; 0xb36 <USART_receive_string+0xe>

		*(string+i)= USART_receive();

		char_input = *(string+i);

		i++;
     b34:	c9 2f       	mov	r28, r25

	do

	{

		*(string+i)= USART_receive();
     b36:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <USART_receive>
     b3a:	f8 01       	movw	r30, r16
     b3c:	ec 0f       	add	r30, r28
     b3e:	f1 1d       	adc	r31, r1
     b40:	80 83       	st	Z, r24

		char_input = *(string+i);

		i++;
     b42:	91 e0       	ldi	r25, 0x01	; 1
     b44:	9c 0f       	add	r25, r28

	}while((char_input!='\n') && (char_input!='\r'));
     b46:	8a 30       	cpi	r24, 0x0A	; 10
     b48:	11 f0       	breq	.+4      	; 0xb4e <USART_receive_string+0x26>
     b4a:	8d 30       	cpi	r24, 0x0D	; 13
     b4c:	99 f7       	brne	.-26     	; 0xb34 <USART_receive_string+0xc>
	
	i++;
	*(string+i) = '\0';
     b4e:	ce 5f       	subi	r28, 0xFE	; 254
     b50:	f8 01       	movw	r30, r16
     b52:	ec 0f       	add	r30, r28
     b54:	f1 1d       	adc	r31, r1
     b56:	10 82       	st	Z, r1
		int u=0;
		while ((*(string+u)) !=0) u++;
     b58:	f8 01       	movw	r30, r16
     b5a:	80 81       	ld	r24, Z
     b5c:	88 23       	and	r24, r24
     b5e:	49 f0       	breq	.+18     	; 0xb72 <USART_receive_string+0x4a>
     b60:	31 96       	adiw	r30, 0x01	; 1
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	01 96       	adiw	r24, 0x01	; 1
     b68:	ac 01       	movw	r20, r24
     b6a:	21 91       	ld	r18, Z+
     b6c:	21 11       	cpse	r18, r1
     b6e:	fb cf       	rjmp	.-10     	; 0xb66 <USART_receive_string+0x3e>
     b70:	02 c0       	rjmp	.+4      	; 0xb76 <USART_receive_string+0x4e>
     b72:	40 e0       	ldi	r20, 0x00	; 0
     b74:	50 e0       	ldi	r21, 0x00	; 0
		*(string+(u-1))=0;
     b76:	40 0f       	add	r20, r16
     b78:	51 1f       	adc	r21, r17
     b7a:	fa 01       	movw	r30, r20
     b7c:	31 97       	sbiw	r30, 0x01	; 1
     b7e:	10 82       	st	Z, r1
	return string;

     b80:	c8 01       	movw	r24, r16
     b82:	cf 91       	pop	r28
     b84:	1f 91       	pop	r17
     b86:	0f 91       	pop	r16
     b88:	08 95       	ret

00000b8a <__tablejump2__>:
     b8a:	ee 0f       	add	r30, r30
     b8c:	ff 1f       	adc	r31, r31
     b8e:	05 90       	lpm	r0, Z+
     b90:	f4 91       	lpm	r31, Z
     b92:	e0 2d       	mov	r30, r0
     b94:	09 94       	ijmp

00000b96 <__subsf3>:
     b96:	50 58       	subi	r21, 0x80	; 128

00000b98 <__addsf3>:
     b98:	bb 27       	eor	r27, r27
     b9a:	aa 27       	eor	r26, r26
     b9c:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__addsf3x>
     ba0:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <__fp_round>
     ba4:	0e 94 2d 07 	call	0xe5a	; 0xe5a <__fp_pscA>
     ba8:	38 f0       	brcs	.+14     	; 0xbb8 <__addsf3+0x20>
     baa:	0e 94 34 07 	call	0xe68	; 0xe68 <__fp_pscB>
     bae:	20 f0       	brcs	.+8      	; 0xbb8 <__addsf3+0x20>
     bb0:	39 f4       	brne	.+14     	; 0xbc0 <__addsf3+0x28>
     bb2:	9f 3f       	cpi	r25, 0xFF	; 255
     bb4:	19 f4       	brne	.+6      	; 0xbbc <__addsf3+0x24>
     bb6:	26 f4       	brtc	.+8      	; 0xbc0 <__addsf3+0x28>
     bb8:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <__fp_nan>
     bbc:	0e f4       	brtc	.+2      	; 0xbc0 <__addsf3+0x28>
     bbe:	e0 95       	com	r30
     bc0:	e7 fb       	bst	r30, 7
     bc2:	0c 94 16 07 	jmp	0xe2c	; 0xe2c <__fp_inf>

00000bc6 <__addsf3x>:
     bc6:	e9 2f       	mov	r30, r25
     bc8:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fp_split3>
     bcc:	58 f3       	brcs	.-42     	; 0xba4 <__addsf3+0xc>
     bce:	ba 17       	cp	r27, r26
     bd0:	62 07       	cpc	r22, r18
     bd2:	73 07       	cpc	r23, r19
     bd4:	84 07       	cpc	r24, r20
     bd6:	95 07       	cpc	r25, r21
     bd8:	20 f0       	brcs	.+8      	; 0xbe2 <__addsf3x+0x1c>
     bda:	79 f4       	brne	.+30     	; 0xbfa <__addsf3x+0x34>
     bdc:	a6 f5       	brtc	.+104    	; 0xc46 <__addsf3x+0x80>
     bde:	0c 94 6e 07 	jmp	0xedc	; 0xedc <__fp_zero>
     be2:	0e f4       	brtc	.+2      	; 0xbe6 <__addsf3x+0x20>
     be4:	e0 95       	com	r30
     be6:	0b 2e       	mov	r0, r27
     be8:	ba 2f       	mov	r27, r26
     bea:	a0 2d       	mov	r26, r0
     bec:	0b 01       	movw	r0, r22
     bee:	b9 01       	movw	r22, r18
     bf0:	90 01       	movw	r18, r0
     bf2:	0c 01       	movw	r0, r24
     bf4:	ca 01       	movw	r24, r20
     bf6:	a0 01       	movw	r20, r0
     bf8:	11 24       	eor	r1, r1
     bfa:	ff 27       	eor	r31, r31
     bfc:	59 1b       	sub	r21, r25
     bfe:	99 f0       	breq	.+38     	; 0xc26 <__addsf3x+0x60>
     c00:	59 3f       	cpi	r21, 0xF9	; 249
     c02:	50 f4       	brcc	.+20     	; 0xc18 <__addsf3x+0x52>
     c04:	50 3e       	cpi	r21, 0xE0	; 224
     c06:	68 f1       	brcs	.+90     	; 0xc62 <__addsf3x+0x9c>
     c08:	1a 16       	cp	r1, r26
     c0a:	f0 40       	sbci	r31, 0x00	; 0
     c0c:	a2 2f       	mov	r26, r18
     c0e:	23 2f       	mov	r18, r19
     c10:	34 2f       	mov	r19, r20
     c12:	44 27       	eor	r20, r20
     c14:	58 5f       	subi	r21, 0xF8	; 248
     c16:	f3 cf       	rjmp	.-26     	; 0xbfe <__addsf3x+0x38>
     c18:	46 95       	lsr	r20
     c1a:	37 95       	ror	r19
     c1c:	27 95       	ror	r18
     c1e:	a7 95       	ror	r26
     c20:	f0 40       	sbci	r31, 0x00	; 0
     c22:	53 95       	inc	r21
     c24:	c9 f7       	brne	.-14     	; 0xc18 <__addsf3x+0x52>
     c26:	7e f4       	brtc	.+30     	; 0xc46 <__addsf3x+0x80>
     c28:	1f 16       	cp	r1, r31
     c2a:	ba 0b       	sbc	r27, r26
     c2c:	62 0b       	sbc	r22, r18
     c2e:	73 0b       	sbc	r23, r19
     c30:	84 0b       	sbc	r24, r20
     c32:	ba f0       	brmi	.+46     	; 0xc62 <__addsf3x+0x9c>
     c34:	91 50       	subi	r25, 0x01	; 1
     c36:	a1 f0       	breq	.+40     	; 0xc60 <__addsf3x+0x9a>
     c38:	ff 0f       	add	r31, r31
     c3a:	bb 1f       	adc	r27, r27
     c3c:	66 1f       	adc	r22, r22
     c3e:	77 1f       	adc	r23, r23
     c40:	88 1f       	adc	r24, r24
     c42:	c2 f7       	brpl	.-16     	; 0xc34 <__addsf3x+0x6e>
     c44:	0e c0       	rjmp	.+28     	; 0xc62 <__addsf3x+0x9c>
     c46:	ba 0f       	add	r27, r26
     c48:	62 1f       	adc	r22, r18
     c4a:	73 1f       	adc	r23, r19
     c4c:	84 1f       	adc	r24, r20
     c4e:	48 f4       	brcc	.+18     	; 0xc62 <__addsf3x+0x9c>
     c50:	87 95       	ror	r24
     c52:	77 95       	ror	r23
     c54:	67 95       	ror	r22
     c56:	b7 95       	ror	r27
     c58:	f7 95       	ror	r31
     c5a:	9e 3f       	cpi	r25, 0xFE	; 254
     c5c:	08 f0       	brcs	.+2      	; 0xc60 <__addsf3x+0x9a>
     c5e:	b0 cf       	rjmp	.-160    	; 0xbc0 <__addsf3+0x28>
     c60:	93 95       	inc	r25
     c62:	88 0f       	add	r24, r24
     c64:	08 f0       	brcs	.+2      	; 0xc68 <__addsf3x+0xa2>
     c66:	99 27       	eor	r25, r25
     c68:	ee 0f       	add	r30, r30
     c6a:	97 95       	ror	r25
     c6c:	87 95       	ror	r24
     c6e:	08 95       	ret

00000c70 <__divsf3>:
     c70:	0e 94 4c 06 	call	0xc98	; 0xc98 <__divsf3x>
     c74:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <__fp_round>
     c78:	0e 94 34 07 	call	0xe68	; 0xe68 <__fp_pscB>
     c7c:	58 f0       	brcs	.+22     	; 0xc94 <__divsf3+0x24>
     c7e:	0e 94 2d 07 	call	0xe5a	; 0xe5a <__fp_pscA>
     c82:	40 f0       	brcs	.+16     	; 0xc94 <__divsf3+0x24>
     c84:	29 f4       	brne	.+10     	; 0xc90 <__divsf3+0x20>
     c86:	5f 3f       	cpi	r21, 0xFF	; 255
     c88:	29 f0       	breq	.+10     	; 0xc94 <__divsf3+0x24>
     c8a:	0c 94 16 07 	jmp	0xe2c	; 0xe2c <__fp_inf>
     c8e:	51 11       	cpse	r21, r1
     c90:	0c 94 6f 07 	jmp	0xede	; 0xede <__fp_szero>
     c94:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <__fp_nan>

00000c98 <__divsf3x>:
     c98:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fp_split3>
     c9c:	68 f3       	brcs	.-38     	; 0xc78 <__divsf3+0x8>

00000c9e <__divsf3_pse>:
     c9e:	99 23       	and	r25, r25
     ca0:	b1 f3       	breq	.-20     	; 0xc8e <__divsf3+0x1e>
     ca2:	55 23       	and	r21, r21
     ca4:	91 f3       	breq	.-28     	; 0xc8a <__divsf3+0x1a>
     ca6:	95 1b       	sub	r25, r21
     ca8:	55 0b       	sbc	r21, r21
     caa:	bb 27       	eor	r27, r27
     cac:	aa 27       	eor	r26, r26
     cae:	62 17       	cp	r22, r18
     cb0:	73 07       	cpc	r23, r19
     cb2:	84 07       	cpc	r24, r20
     cb4:	38 f0       	brcs	.+14     	; 0xcc4 <__divsf3_pse+0x26>
     cb6:	9f 5f       	subi	r25, 0xFF	; 255
     cb8:	5f 4f       	sbci	r21, 0xFF	; 255
     cba:	22 0f       	add	r18, r18
     cbc:	33 1f       	adc	r19, r19
     cbe:	44 1f       	adc	r20, r20
     cc0:	aa 1f       	adc	r26, r26
     cc2:	a9 f3       	breq	.-22     	; 0xcae <__divsf3_pse+0x10>
     cc4:	35 d0       	rcall	.+106    	; 0xd30 <__divsf3_pse+0x92>
     cc6:	0e 2e       	mov	r0, r30
     cc8:	3a f0       	brmi	.+14     	; 0xcd8 <__divsf3_pse+0x3a>
     cca:	e0 e8       	ldi	r30, 0x80	; 128
     ccc:	32 d0       	rcall	.+100    	; 0xd32 <__divsf3_pse+0x94>
     cce:	91 50       	subi	r25, 0x01	; 1
     cd0:	50 40       	sbci	r21, 0x00	; 0
     cd2:	e6 95       	lsr	r30
     cd4:	00 1c       	adc	r0, r0
     cd6:	ca f7       	brpl	.-14     	; 0xcca <__divsf3_pse+0x2c>
     cd8:	2b d0       	rcall	.+86     	; 0xd30 <__divsf3_pse+0x92>
     cda:	fe 2f       	mov	r31, r30
     cdc:	29 d0       	rcall	.+82     	; 0xd30 <__divsf3_pse+0x92>
     cde:	66 0f       	add	r22, r22
     ce0:	77 1f       	adc	r23, r23
     ce2:	88 1f       	adc	r24, r24
     ce4:	bb 1f       	adc	r27, r27
     ce6:	26 17       	cp	r18, r22
     ce8:	37 07       	cpc	r19, r23
     cea:	48 07       	cpc	r20, r24
     cec:	ab 07       	cpc	r26, r27
     cee:	b0 e8       	ldi	r27, 0x80	; 128
     cf0:	09 f0       	breq	.+2      	; 0xcf4 <__divsf3_pse+0x56>
     cf2:	bb 0b       	sbc	r27, r27
     cf4:	80 2d       	mov	r24, r0
     cf6:	bf 01       	movw	r22, r30
     cf8:	ff 27       	eor	r31, r31
     cfa:	93 58       	subi	r25, 0x83	; 131
     cfc:	5f 4f       	sbci	r21, 0xFF	; 255
     cfe:	3a f0       	brmi	.+14     	; 0xd0e <__divsf3_pse+0x70>
     d00:	9e 3f       	cpi	r25, 0xFE	; 254
     d02:	51 05       	cpc	r21, r1
     d04:	78 f0       	brcs	.+30     	; 0xd24 <__divsf3_pse+0x86>
     d06:	0c 94 16 07 	jmp	0xe2c	; 0xe2c <__fp_inf>
     d0a:	0c 94 6f 07 	jmp	0xede	; 0xede <__fp_szero>
     d0e:	5f 3f       	cpi	r21, 0xFF	; 255
     d10:	e4 f3       	brlt	.-8      	; 0xd0a <__divsf3_pse+0x6c>
     d12:	98 3e       	cpi	r25, 0xE8	; 232
     d14:	d4 f3       	brlt	.-12     	; 0xd0a <__divsf3_pse+0x6c>
     d16:	86 95       	lsr	r24
     d18:	77 95       	ror	r23
     d1a:	67 95       	ror	r22
     d1c:	b7 95       	ror	r27
     d1e:	f7 95       	ror	r31
     d20:	9f 5f       	subi	r25, 0xFF	; 255
     d22:	c9 f7       	brne	.-14     	; 0xd16 <__divsf3_pse+0x78>
     d24:	88 0f       	add	r24, r24
     d26:	91 1d       	adc	r25, r1
     d28:	96 95       	lsr	r25
     d2a:	87 95       	ror	r24
     d2c:	97 f9       	bld	r25, 7
     d2e:	08 95       	ret
     d30:	e1 e0       	ldi	r30, 0x01	; 1
     d32:	66 0f       	add	r22, r22
     d34:	77 1f       	adc	r23, r23
     d36:	88 1f       	adc	r24, r24
     d38:	bb 1f       	adc	r27, r27
     d3a:	62 17       	cp	r22, r18
     d3c:	73 07       	cpc	r23, r19
     d3e:	84 07       	cpc	r24, r20
     d40:	ba 07       	cpc	r27, r26
     d42:	20 f0       	brcs	.+8      	; 0xd4c <__divsf3_pse+0xae>
     d44:	62 1b       	sub	r22, r18
     d46:	73 0b       	sbc	r23, r19
     d48:	84 0b       	sbc	r24, r20
     d4a:	ba 0b       	sbc	r27, r26
     d4c:	ee 1f       	adc	r30, r30
     d4e:	88 f7       	brcc	.-30     	; 0xd32 <__divsf3_pse+0x94>
     d50:	e0 95       	com	r30
     d52:	08 95       	ret

00000d54 <__fixunssfsi>:
     d54:	0e 94 54 07 	call	0xea8	; 0xea8 <__fp_splitA>
     d58:	88 f0       	brcs	.+34     	; 0xd7c <__fixunssfsi+0x28>
     d5a:	9f 57       	subi	r25, 0x7F	; 127
     d5c:	98 f0       	brcs	.+38     	; 0xd84 <__fixunssfsi+0x30>
     d5e:	b9 2f       	mov	r27, r25
     d60:	99 27       	eor	r25, r25
     d62:	b7 51       	subi	r27, 0x17	; 23
     d64:	b0 f0       	brcs	.+44     	; 0xd92 <__fixunssfsi+0x3e>
     d66:	e1 f0       	breq	.+56     	; 0xda0 <__fixunssfsi+0x4c>
     d68:	66 0f       	add	r22, r22
     d6a:	77 1f       	adc	r23, r23
     d6c:	88 1f       	adc	r24, r24
     d6e:	99 1f       	adc	r25, r25
     d70:	1a f0       	brmi	.+6      	; 0xd78 <__fixunssfsi+0x24>
     d72:	ba 95       	dec	r27
     d74:	c9 f7       	brne	.-14     	; 0xd68 <__fixunssfsi+0x14>
     d76:	14 c0       	rjmp	.+40     	; 0xda0 <__fixunssfsi+0x4c>
     d78:	b1 30       	cpi	r27, 0x01	; 1
     d7a:	91 f0       	breq	.+36     	; 0xda0 <__fixunssfsi+0x4c>
     d7c:	0e 94 6e 07 	call	0xedc	; 0xedc <__fp_zero>
     d80:	b1 e0       	ldi	r27, 0x01	; 1
     d82:	08 95       	ret
     d84:	0c 94 6e 07 	jmp	0xedc	; 0xedc <__fp_zero>
     d88:	67 2f       	mov	r22, r23
     d8a:	78 2f       	mov	r23, r24
     d8c:	88 27       	eor	r24, r24
     d8e:	b8 5f       	subi	r27, 0xF8	; 248
     d90:	39 f0       	breq	.+14     	; 0xda0 <__fixunssfsi+0x4c>
     d92:	b9 3f       	cpi	r27, 0xF9	; 249
     d94:	cc f3       	brlt	.-14     	; 0xd88 <__fixunssfsi+0x34>
     d96:	86 95       	lsr	r24
     d98:	77 95       	ror	r23
     d9a:	67 95       	ror	r22
     d9c:	b3 95       	inc	r27
     d9e:	d9 f7       	brne	.-10     	; 0xd96 <__fixunssfsi+0x42>
     da0:	3e f4       	brtc	.+14     	; 0xdb0 <__fixunssfsi+0x5c>
     da2:	90 95       	com	r25
     da4:	80 95       	com	r24
     da6:	70 95       	com	r23
     da8:	61 95       	neg	r22
     daa:	7f 4f       	sbci	r23, 0xFF	; 255
     dac:	8f 4f       	sbci	r24, 0xFF	; 255
     dae:	9f 4f       	sbci	r25, 0xFF	; 255
     db0:	08 95       	ret

00000db2 <__floatunsisf>:
     db2:	e8 94       	clt
     db4:	09 c0       	rjmp	.+18     	; 0xdc8 <__floatsisf+0x12>

00000db6 <__floatsisf>:
     db6:	97 fb       	bst	r25, 7
     db8:	3e f4       	brtc	.+14     	; 0xdc8 <__floatsisf+0x12>
     dba:	90 95       	com	r25
     dbc:	80 95       	com	r24
     dbe:	70 95       	com	r23
     dc0:	61 95       	neg	r22
     dc2:	7f 4f       	sbci	r23, 0xFF	; 255
     dc4:	8f 4f       	sbci	r24, 0xFF	; 255
     dc6:	9f 4f       	sbci	r25, 0xFF	; 255
     dc8:	99 23       	and	r25, r25
     dca:	a9 f0       	breq	.+42     	; 0xdf6 <__floatsisf+0x40>
     dcc:	f9 2f       	mov	r31, r25
     dce:	96 e9       	ldi	r25, 0x96	; 150
     dd0:	bb 27       	eor	r27, r27
     dd2:	93 95       	inc	r25
     dd4:	f6 95       	lsr	r31
     dd6:	87 95       	ror	r24
     dd8:	77 95       	ror	r23
     dda:	67 95       	ror	r22
     ddc:	b7 95       	ror	r27
     dde:	f1 11       	cpse	r31, r1
     de0:	f8 cf       	rjmp	.-16     	; 0xdd2 <__floatsisf+0x1c>
     de2:	fa f4       	brpl	.+62     	; 0xe22 <__floatsisf+0x6c>
     de4:	bb 0f       	add	r27, r27
     de6:	11 f4       	brne	.+4      	; 0xdec <__floatsisf+0x36>
     de8:	60 ff       	sbrs	r22, 0
     dea:	1b c0       	rjmp	.+54     	; 0xe22 <__floatsisf+0x6c>
     dec:	6f 5f       	subi	r22, 0xFF	; 255
     dee:	7f 4f       	sbci	r23, 0xFF	; 255
     df0:	8f 4f       	sbci	r24, 0xFF	; 255
     df2:	9f 4f       	sbci	r25, 0xFF	; 255
     df4:	16 c0       	rjmp	.+44     	; 0xe22 <__floatsisf+0x6c>
     df6:	88 23       	and	r24, r24
     df8:	11 f0       	breq	.+4      	; 0xdfe <__floatsisf+0x48>
     dfa:	96 e9       	ldi	r25, 0x96	; 150
     dfc:	11 c0       	rjmp	.+34     	; 0xe20 <__floatsisf+0x6a>
     dfe:	77 23       	and	r23, r23
     e00:	21 f0       	breq	.+8      	; 0xe0a <__floatsisf+0x54>
     e02:	9e e8       	ldi	r25, 0x8E	; 142
     e04:	87 2f       	mov	r24, r23
     e06:	76 2f       	mov	r23, r22
     e08:	05 c0       	rjmp	.+10     	; 0xe14 <__floatsisf+0x5e>
     e0a:	66 23       	and	r22, r22
     e0c:	71 f0       	breq	.+28     	; 0xe2a <__floatsisf+0x74>
     e0e:	96 e8       	ldi	r25, 0x86	; 134
     e10:	86 2f       	mov	r24, r22
     e12:	70 e0       	ldi	r23, 0x00	; 0
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	2a f0       	brmi	.+10     	; 0xe22 <__floatsisf+0x6c>
     e18:	9a 95       	dec	r25
     e1a:	66 0f       	add	r22, r22
     e1c:	77 1f       	adc	r23, r23
     e1e:	88 1f       	adc	r24, r24
     e20:	da f7       	brpl	.-10     	; 0xe18 <__floatsisf+0x62>
     e22:	88 0f       	add	r24, r24
     e24:	96 95       	lsr	r25
     e26:	87 95       	ror	r24
     e28:	97 f9       	bld	r25, 7
     e2a:	08 95       	ret

00000e2c <__fp_inf>:
     e2c:	97 f9       	bld	r25, 7
     e2e:	9f 67       	ori	r25, 0x7F	; 127
     e30:	80 e8       	ldi	r24, 0x80	; 128
     e32:	70 e0       	ldi	r23, 0x00	; 0
     e34:	60 e0       	ldi	r22, 0x00	; 0
     e36:	08 95       	ret

00000e38 <__fp_mpack>:
     e38:	9f 3f       	cpi	r25, 0xFF	; 255
     e3a:	31 f0       	breq	.+12     	; 0xe48 <__fp_mpack_finite+0xc>

00000e3c <__fp_mpack_finite>:
     e3c:	91 50       	subi	r25, 0x01	; 1
     e3e:	20 f4       	brcc	.+8      	; 0xe48 <__fp_mpack_finite+0xc>
     e40:	87 95       	ror	r24
     e42:	77 95       	ror	r23
     e44:	67 95       	ror	r22
     e46:	b7 95       	ror	r27
     e48:	88 0f       	add	r24, r24
     e4a:	91 1d       	adc	r25, r1
     e4c:	96 95       	lsr	r25
     e4e:	87 95       	ror	r24
     e50:	97 f9       	bld	r25, 7
     e52:	08 95       	ret

00000e54 <__fp_nan>:
     e54:	9f ef       	ldi	r25, 0xFF	; 255
     e56:	80 ec       	ldi	r24, 0xC0	; 192
     e58:	08 95       	ret

00000e5a <__fp_pscA>:
     e5a:	00 24       	eor	r0, r0
     e5c:	0a 94       	dec	r0
     e5e:	16 16       	cp	r1, r22
     e60:	17 06       	cpc	r1, r23
     e62:	18 06       	cpc	r1, r24
     e64:	09 06       	cpc	r0, r25
     e66:	08 95       	ret

00000e68 <__fp_pscB>:
     e68:	00 24       	eor	r0, r0
     e6a:	0a 94       	dec	r0
     e6c:	12 16       	cp	r1, r18
     e6e:	13 06       	cpc	r1, r19
     e70:	14 06       	cpc	r1, r20
     e72:	05 06       	cpc	r0, r21
     e74:	08 95       	ret

00000e76 <__fp_round>:
     e76:	09 2e       	mov	r0, r25
     e78:	03 94       	inc	r0
     e7a:	00 0c       	add	r0, r0
     e7c:	11 f4       	brne	.+4      	; 0xe82 <__fp_round+0xc>
     e7e:	88 23       	and	r24, r24
     e80:	52 f0       	brmi	.+20     	; 0xe96 <__fp_round+0x20>
     e82:	bb 0f       	add	r27, r27
     e84:	40 f4       	brcc	.+16     	; 0xe96 <__fp_round+0x20>
     e86:	bf 2b       	or	r27, r31
     e88:	11 f4       	brne	.+4      	; 0xe8e <__fp_round+0x18>
     e8a:	60 ff       	sbrs	r22, 0
     e8c:	04 c0       	rjmp	.+8      	; 0xe96 <__fp_round+0x20>
     e8e:	6f 5f       	subi	r22, 0xFF	; 255
     e90:	7f 4f       	sbci	r23, 0xFF	; 255
     e92:	8f 4f       	sbci	r24, 0xFF	; 255
     e94:	9f 4f       	sbci	r25, 0xFF	; 255
     e96:	08 95       	ret

00000e98 <__fp_split3>:
     e98:	57 fd       	sbrc	r21, 7
     e9a:	90 58       	subi	r25, 0x80	; 128
     e9c:	44 0f       	add	r20, r20
     e9e:	55 1f       	adc	r21, r21
     ea0:	59 f0       	breq	.+22     	; 0xeb8 <__fp_splitA+0x10>
     ea2:	5f 3f       	cpi	r21, 0xFF	; 255
     ea4:	71 f0       	breq	.+28     	; 0xec2 <__fp_splitA+0x1a>
     ea6:	47 95       	ror	r20

00000ea8 <__fp_splitA>:
     ea8:	88 0f       	add	r24, r24
     eaa:	97 fb       	bst	r25, 7
     eac:	99 1f       	adc	r25, r25
     eae:	61 f0       	breq	.+24     	; 0xec8 <__fp_splitA+0x20>
     eb0:	9f 3f       	cpi	r25, 0xFF	; 255
     eb2:	79 f0       	breq	.+30     	; 0xed2 <__fp_splitA+0x2a>
     eb4:	87 95       	ror	r24
     eb6:	08 95       	ret
     eb8:	12 16       	cp	r1, r18
     eba:	13 06       	cpc	r1, r19
     ebc:	14 06       	cpc	r1, r20
     ebe:	55 1f       	adc	r21, r21
     ec0:	f2 cf       	rjmp	.-28     	; 0xea6 <__fp_split3+0xe>
     ec2:	46 95       	lsr	r20
     ec4:	f1 df       	rcall	.-30     	; 0xea8 <__fp_splitA>
     ec6:	08 c0       	rjmp	.+16     	; 0xed8 <__fp_splitA+0x30>
     ec8:	16 16       	cp	r1, r22
     eca:	17 06       	cpc	r1, r23
     ecc:	18 06       	cpc	r1, r24
     ece:	99 1f       	adc	r25, r25
     ed0:	f1 cf       	rjmp	.-30     	; 0xeb4 <__fp_splitA+0xc>
     ed2:	86 95       	lsr	r24
     ed4:	71 05       	cpc	r23, r1
     ed6:	61 05       	cpc	r22, r1
     ed8:	08 94       	sec
     eda:	08 95       	ret

00000edc <__fp_zero>:
     edc:	e8 94       	clt

00000ede <__fp_szero>:
     ede:	bb 27       	eor	r27, r27
     ee0:	66 27       	eor	r22, r22
     ee2:	77 27       	eor	r23, r23
     ee4:	cb 01       	movw	r24, r22
     ee6:	97 f9       	bld	r25, 7
     ee8:	08 95       	ret

00000eea <pow>:
     eea:	fa 01       	movw	r30, r20
     eec:	ee 0f       	add	r30, r30
     eee:	ff 1f       	adc	r31, r31
     ef0:	30 96       	adiw	r30, 0x00	; 0
     ef2:	21 05       	cpc	r18, r1
     ef4:	31 05       	cpc	r19, r1
     ef6:	a1 f1       	breq	.+104    	; 0xf60 <pow+0x76>
     ef8:	61 15       	cp	r22, r1
     efa:	71 05       	cpc	r23, r1
     efc:	61 f4       	brne	.+24     	; 0xf16 <pow+0x2c>
     efe:	80 38       	cpi	r24, 0x80	; 128
     f00:	bf e3       	ldi	r27, 0x3F	; 63
     f02:	9b 07       	cpc	r25, r27
     f04:	49 f1       	breq	.+82     	; 0xf58 <pow+0x6e>
     f06:	68 94       	set
     f08:	90 38       	cpi	r25, 0x80	; 128
     f0a:	81 05       	cpc	r24, r1
     f0c:	61 f0       	breq	.+24     	; 0xf26 <pow+0x3c>
     f0e:	80 38       	cpi	r24, 0x80	; 128
     f10:	bf ef       	ldi	r27, 0xFF	; 255
     f12:	9b 07       	cpc	r25, r27
     f14:	41 f0       	breq	.+16     	; 0xf26 <pow+0x3c>
     f16:	99 23       	and	r25, r25
     f18:	4a f5       	brpl	.+82     	; 0xf6c <pow+0x82>
     f1a:	ff 3f       	cpi	r31, 0xFF	; 255
     f1c:	e1 05       	cpc	r30, r1
     f1e:	31 05       	cpc	r19, r1
     f20:	21 05       	cpc	r18, r1
     f22:	19 f1       	breq	.+70     	; 0xf6a <pow+0x80>
     f24:	e8 94       	clt
     f26:	08 94       	sec
     f28:	e7 95       	ror	r30
     f2a:	d9 01       	movw	r26, r18
     f2c:	aa 23       	and	r26, r26
     f2e:	29 f4       	brne	.+10     	; 0xf3a <pow+0x50>
     f30:	ab 2f       	mov	r26, r27
     f32:	be 2f       	mov	r27, r30
     f34:	f8 5f       	subi	r31, 0xF8	; 248
     f36:	d0 f3       	brcs	.-12     	; 0xf2c <pow+0x42>
     f38:	10 c0       	rjmp	.+32     	; 0xf5a <pow+0x70>
     f3a:	ff 5f       	subi	r31, 0xFF	; 255
     f3c:	70 f4       	brcc	.+28     	; 0xf5a <pow+0x70>
     f3e:	a6 95       	lsr	r26
     f40:	e0 f7       	brcc	.-8      	; 0xf3a <pow+0x50>
     f42:	f7 39       	cpi	r31, 0x97	; 151
     f44:	50 f0       	brcs	.+20     	; 0xf5a <pow+0x70>
     f46:	19 f0       	breq	.+6      	; 0xf4e <pow+0x64>
     f48:	ff 3a       	cpi	r31, 0xAF	; 175
     f4a:	38 f4       	brcc	.+14     	; 0xf5a <pow+0x70>
     f4c:	9f 77       	andi	r25, 0x7F	; 127
     f4e:	9f 93       	push	r25
     f50:	0d d0       	rcall	.+26     	; 0xf6c <pow+0x82>
     f52:	0f 90       	pop	r0
     f54:	07 fc       	sbrc	r0, 7
     f56:	90 58       	subi	r25, 0x80	; 128
     f58:	08 95       	ret
     f5a:	46 f0       	brts	.+16     	; 0xf6c <pow+0x82>
     f5c:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <__fp_nan>
     f60:	60 e0       	ldi	r22, 0x00	; 0
     f62:	70 e0       	ldi	r23, 0x00	; 0
     f64:	80 e8       	ldi	r24, 0x80	; 128
     f66:	9f e3       	ldi	r25, 0x3F	; 63
     f68:	08 95       	ret
     f6a:	4f e7       	ldi	r20, 0x7F	; 127
     f6c:	9f 77       	andi	r25, 0x7F	; 127
     f6e:	5f 93       	push	r21
     f70:	4f 93       	push	r20
     f72:	3f 93       	push	r19
     f74:	2f 93       	push	r18
     f76:	0e 94 70 08 	call	0x10e0	; 0x10e0 <log>
     f7a:	2f 91       	pop	r18
     f7c:	3f 91       	pop	r19
     f7e:	4f 91       	pop	r20
     f80:	5f 91       	pop	r21
     f82:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__mulsf3>
     f86:	0c 94 cd 07 	jmp	0xf9a	; 0xf9a <exp>
     f8a:	29 f4       	brne	.+10     	; 0xf96 <pow+0xac>
     f8c:	16 f0       	brts	.+4      	; 0xf92 <pow+0xa8>
     f8e:	0c 94 16 07 	jmp	0xe2c	; 0xe2c <__fp_inf>
     f92:	0c 94 6e 07 	jmp	0xedc	; 0xedc <__fp_zero>
     f96:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <__fp_nan>

00000f9a <exp>:
     f9a:	0e 94 54 07 	call	0xea8	; 0xea8 <__fp_splitA>
     f9e:	a8 f3       	brcs	.-22     	; 0xf8a <pow+0xa0>
     fa0:	96 38       	cpi	r25, 0x86	; 134
     fa2:	a0 f7       	brcc	.-24     	; 0xf8c <pow+0xa2>
     fa4:	07 f8       	bld	r0, 7
     fa6:	0f 92       	push	r0
     fa8:	e8 94       	clt
     faa:	2b e3       	ldi	r18, 0x3B	; 59
     fac:	3a ea       	ldi	r19, 0xAA	; 170
     fae:	48 eb       	ldi	r20, 0xB8	; 184
     fb0:	5f e7       	ldi	r21, 0x7F	; 127
     fb2:	0e 94 02 09 	call	0x1204	; 0x1204 <__mulsf3_pse>
     fb6:	0f 92       	push	r0
     fb8:	0f 92       	push	r0
     fba:	0f 92       	push	r0
     fbc:	4d b7       	in	r20, 0x3d	; 61
     fbe:	5e b7       	in	r21, 0x3e	; 62
     fc0:	0f 92       	push	r0
     fc2:	0e 94 b8 08 	call	0x1170	; 0x1170 <modf>
     fc6:	e2 e6       	ldi	r30, 0x62	; 98
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	0e 94 ff 07 	call	0xffe	; 0xffe <__fp_powser>
     fce:	4f 91       	pop	r20
     fd0:	5f 91       	pop	r21
     fd2:	ef 91       	pop	r30
     fd4:	ff 91       	pop	r31
     fd6:	e5 95       	asr	r30
     fd8:	ee 1f       	adc	r30, r30
     fda:	ff 1f       	adc	r31, r31
     fdc:	49 f0       	breq	.+18     	; 0xff0 <exp+0x56>
     fde:	fe 57       	subi	r31, 0x7E	; 126
     fe0:	e0 68       	ori	r30, 0x80	; 128
     fe2:	44 27       	eor	r20, r20
     fe4:	ee 0f       	add	r30, r30
     fe6:	44 1f       	adc	r20, r20
     fe8:	fa 95       	dec	r31
     fea:	e1 f7       	brne	.-8      	; 0xfe4 <exp+0x4a>
     fec:	41 95       	neg	r20
     fee:	55 0b       	sbc	r21, r21
     ff0:	0e 94 32 08 	call	0x1064	; 0x1064 <ldexp>
     ff4:	0f 90       	pop	r0
     ff6:	07 fe       	sbrs	r0, 7
     ff8:	0c 94 26 08 	jmp	0x104c	; 0x104c <inverse>
     ffc:	08 95       	ret

00000ffe <__fp_powser>:
     ffe:	df 93       	push	r29
    1000:	cf 93       	push	r28
    1002:	1f 93       	push	r17
    1004:	0f 93       	push	r16
    1006:	ff 92       	push	r15
    1008:	ef 92       	push	r14
    100a:	df 92       	push	r13
    100c:	7b 01       	movw	r14, r22
    100e:	8c 01       	movw	r16, r24
    1010:	68 94       	set
    1012:	06 c0       	rjmp	.+12     	; 0x1020 <__fp_powser+0x22>
    1014:	da 2e       	mov	r13, r26
    1016:	ef 01       	movw	r28, r30
    1018:	0e 94 ff 08 	call	0x11fe	; 0x11fe <__mulsf3x>
    101c:	fe 01       	movw	r30, r28
    101e:	e8 94       	clt
    1020:	a5 91       	lpm	r26, Z+
    1022:	25 91       	lpm	r18, Z+
    1024:	35 91       	lpm	r19, Z+
    1026:	45 91       	lpm	r20, Z+
    1028:	55 91       	lpm	r21, Z+
    102a:	a6 f3       	brts	.-24     	; 0x1014 <__fp_powser+0x16>
    102c:	ef 01       	movw	r28, r30
    102e:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__addsf3x>
    1032:	fe 01       	movw	r30, r28
    1034:	97 01       	movw	r18, r14
    1036:	a8 01       	movw	r20, r16
    1038:	da 94       	dec	r13
    103a:	69 f7       	brne	.-38     	; 0x1016 <__fp_powser+0x18>
    103c:	df 90       	pop	r13
    103e:	ef 90       	pop	r14
    1040:	ff 90       	pop	r15
    1042:	0f 91       	pop	r16
    1044:	1f 91       	pop	r17
    1046:	cf 91       	pop	r28
    1048:	df 91       	pop	r29
    104a:	08 95       	ret

0000104c <inverse>:
    104c:	9b 01       	movw	r18, r22
    104e:	ac 01       	movw	r20, r24
    1050:	60 e0       	ldi	r22, 0x00	; 0
    1052:	70 e0       	ldi	r23, 0x00	; 0
    1054:	80 e8       	ldi	r24, 0x80	; 128
    1056:	9f e3       	ldi	r25, 0x3F	; 63
    1058:	0c 94 38 06 	jmp	0xc70	; 0xc70 <__divsf3>
    105c:	0c 94 16 07 	jmp	0xe2c	; 0xe2c <__fp_inf>
    1060:	0c 94 1c 07 	jmp	0xe38	; 0xe38 <__fp_mpack>

00001064 <ldexp>:
    1064:	0e 94 54 07 	call	0xea8	; 0xea8 <__fp_splitA>
    1068:	d8 f3       	brcs	.-10     	; 0x1060 <inverse+0x14>
    106a:	99 23       	and	r25, r25
    106c:	c9 f3       	breq	.-14     	; 0x1060 <inverse+0x14>
    106e:	94 0f       	add	r25, r20
    1070:	51 1d       	adc	r21, r1
    1072:	a3 f3       	brvs	.-24     	; 0x105c <inverse+0x10>
    1074:	91 50       	subi	r25, 0x01	; 1
    1076:	50 40       	sbci	r21, 0x00	; 0
    1078:	94 f0       	brlt	.+36     	; 0x109e <ldexp+0x3a>
    107a:	59 f0       	breq	.+22     	; 0x1092 <ldexp+0x2e>
    107c:	88 23       	and	r24, r24
    107e:	32 f0       	brmi	.+12     	; 0x108c <ldexp+0x28>
    1080:	66 0f       	add	r22, r22
    1082:	77 1f       	adc	r23, r23
    1084:	88 1f       	adc	r24, r24
    1086:	91 50       	subi	r25, 0x01	; 1
    1088:	50 40       	sbci	r21, 0x00	; 0
    108a:	c1 f7       	brne	.-16     	; 0x107c <ldexp+0x18>
    108c:	9e 3f       	cpi	r25, 0xFE	; 254
    108e:	51 05       	cpc	r21, r1
    1090:	2c f7       	brge	.-54     	; 0x105c <inverse+0x10>
    1092:	88 0f       	add	r24, r24
    1094:	91 1d       	adc	r25, r1
    1096:	96 95       	lsr	r25
    1098:	87 95       	ror	r24
    109a:	97 f9       	bld	r25, 7
    109c:	08 95       	ret
    109e:	5f 3f       	cpi	r21, 0xFF	; 255
    10a0:	ac f0       	brlt	.+42     	; 0x10cc <ldexp+0x68>
    10a2:	98 3e       	cpi	r25, 0xE8	; 232
    10a4:	9c f0       	brlt	.+38     	; 0x10cc <ldexp+0x68>
    10a6:	bb 27       	eor	r27, r27
    10a8:	86 95       	lsr	r24
    10aa:	77 95       	ror	r23
    10ac:	67 95       	ror	r22
    10ae:	b7 95       	ror	r27
    10b0:	08 f4       	brcc	.+2      	; 0x10b4 <ldexp+0x50>
    10b2:	b1 60       	ori	r27, 0x01	; 1
    10b4:	93 95       	inc	r25
    10b6:	c1 f7       	brne	.-16     	; 0x10a8 <ldexp+0x44>
    10b8:	bb 0f       	add	r27, r27
    10ba:	58 f7       	brcc	.-42     	; 0x1092 <ldexp+0x2e>
    10bc:	11 f4       	brne	.+4      	; 0x10c2 <ldexp+0x5e>
    10be:	60 ff       	sbrs	r22, 0
    10c0:	e8 cf       	rjmp	.-48     	; 0x1092 <ldexp+0x2e>
    10c2:	6f 5f       	subi	r22, 0xFF	; 255
    10c4:	7f 4f       	sbci	r23, 0xFF	; 255
    10c6:	8f 4f       	sbci	r24, 0xFF	; 255
    10c8:	9f 4f       	sbci	r25, 0xFF	; 255
    10ca:	e3 cf       	rjmp	.-58     	; 0x1092 <ldexp+0x2e>
    10cc:	0c 94 6f 07 	jmp	0xede	; 0xede <__fp_szero>
    10d0:	16 f0       	brts	.+4      	; 0x10d6 <ldexp+0x72>
    10d2:	0c 94 1c 07 	jmp	0xe38	; 0xe38 <__fp_mpack>
    10d6:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <__fp_nan>
    10da:	68 94       	set
    10dc:	0c 94 16 07 	jmp	0xe2c	; 0xe2c <__fp_inf>

000010e0 <log>:
    10e0:	0e 94 54 07 	call	0xea8	; 0xea8 <__fp_splitA>
    10e4:	a8 f3       	brcs	.-22     	; 0x10d0 <ldexp+0x6c>
    10e6:	99 23       	and	r25, r25
    10e8:	c1 f3       	breq	.-16     	; 0x10da <ldexp+0x76>
    10ea:	ae f3       	brts	.-22     	; 0x10d6 <ldexp+0x72>
    10ec:	df 93       	push	r29
    10ee:	cf 93       	push	r28
    10f0:	1f 93       	push	r17
    10f2:	0f 93       	push	r16
    10f4:	ff 92       	push	r15
    10f6:	c9 2f       	mov	r28, r25
    10f8:	dd 27       	eor	r29, r29
    10fa:	88 23       	and	r24, r24
    10fc:	2a f0       	brmi	.+10     	; 0x1108 <log+0x28>
    10fe:	21 97       	sbiw	r28, 0x01	; 1
    1100:	66 0f       	add	r22, r22
    1102:	77 1f       	adc	r23, r23
    1104:	88 1f       	adc	r24, r24
    1106:	da f7       	brpl	.-10     	; 0x10fe <log+0x1e>
    1108:	20 e0       	ldi	r18, 0x00	; 0
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	40 e8       	ldi	r20, 0x80	; 128
    110e:	5f eb       	ldi	r21, 0xBF	; 191
    1110:	9f e3       	ldi	r25, 0x3F	; 63
    1112:	88 39       	cpi	r24, 0x98	; 152
    1114:	20 f0       	brcs	.+8      	; 0x111e <log+0x3e>
    1116:	80 3e       	cpi	r24, 0xE0	; 224
    1118:	38 f0       	brcs	.+14     	; 0x1128 <log+0x48>
    111a:	21 96       	adiw	r28, 0x01	; 1
    111c:	8f 77       	andi	r24, 0x7F	; 127
    111e:	0e 94 cc 05 	call	0xb98	; 0xb98 <__addsf3>
    1122:	ea e8       	ldi	r30, 0x8A	; 138
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	04 c0       	rjmp	.+8      	; 0x1130 <log+0x50>
    1128:	0e 94 cc 05 	call	0xb98	; 0xb98 <__addsf3>
    112c:	e7 eb       	ldi	r30, 0xB7	; 183
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	0e 94 ff 07 	call	0xffe	; 0xffe <__fp_powser>
    1134:	8b 01       	movw	r16, r22
    1136:	be 01       	movw	r22, r28
    1138:	ec 01       	movw	r28, r24
    113a:	fb 2e       	mov	r15, r27
    113c:	6f 57       	subi	r22, 0x7F	; 127
    113e:	71 09       	sbc	r23, r1
    1140:	75 95       	asr	r23
    1142:	77 1f       	adc	r23, r23
    1144:	88 0b       	sbc	r24, r24
    1146:	99 0b       	sbc	r25, r25
    1148:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__floatsisf>
    114c:	28 e1       	ldi	r18, 0x18	; 24
    114e:	32 e7       	ldi	r19, 0x72	; 114
    1150:	41 e3       	ldi	r20, 0x31	; 49
    1152:	5f e3       	ldi	r21, 0x3F	; 63
    1154:	0e 94 ff 08 	call	0x11fe	; 0x11fe <__mulsf3x>
    1158:	af 2d       	mov	r26, r15
    115a:	98 01       	movw	r18, r16
    115c:	ae 01       	movw	r20, r28
    115e:	ff 90       	pop	r15
    1160:	0f 91       	pop	r16
    1162:	1f 91       	pop	r17
    1164:	cf 91       	pop	r28
    1166:	df 91       	pop	r29
    1168:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__addsf3x>
    116c:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <__fp_round>

00001170 <modf>:
    1170:	fa 01       	movw	r30, r20
    1172:	dc 01       	movw	r26, r24
    1174:	aa 0f       	add	r26, r26
    1176:	bb 1f       	adc	r27, r27
    1178:	9b 01       	movw	r18, r22
    117a:	ac 01       	movw	r20, r24
    117c:	bf 57       	subi	r27, 0x7F	; 127
    117e:	28 f4       	brcc	.+10     	; 0x118a <modf+0x1a>
    1180:	22 27       	eor	r18, r18
    1182:	33 27       	eor	r19, r19
    1184:	44 27       	eor	r20, r20
    1186:	50 78       	andi	r21, 0x80	; 128
    1188:	20 c0       	rjmp	.+64     	; 0x11ca <modf+0x5a>
    118a:	b7 51       	subi	r27, 0x17	; 23
    118c:	90 f4       	brcc	.+36     	; 0x11b2 <modf+0x42>
    118e:	ab 2f       	mov	r26, r27
    1190:	00 24       	eor	r0, r0
    1192:	46 95       	lsr	r20
    1194:	37 95       	ror	r19
    1196:	27 95       	ror	r18
    1198:	01 1c       	adc	r0, r1
    119a:	a3 95       	inc	r26
    119c:	d2 f3       	brmi	.-12     	; 0x1192 <modf+0x22>
    119e:	00 20       	and	r0, r0
    11a0:	71 f0       	breq	.+28     	; 0x11be <modf+0x4e>
    11a2:	22 0f       	add	r18, r18
    11a4:	33 1f       	adc	r19, r19
    11a6:	44 1f       	adc	r20, r20
    11a8:	b3 95       	inc	r27
    11aa:	da f3       	brmi	.-10     	; 0x11a2 <modf+0x32>
    11ac:	0e d0       	rcall	.+28     	; 0x11ca <modf+0x5a>
    11ae:	0c 94 cb 05 	jmp	0xb96	; 0xb96 <__subsf3>
    11b2:	61 30       	cpi	r22, 0x01	; 1
    11b4:	71 05       	cpc	r23, r1
    11b6:	a0 e8       	ldi	r26, 0x80	; 128
    11b8:	8a 07       	cpc	r24, r26
    11ba:	b9 46       	sbci	r27, 0x69	; 105
    11bc:	30 f4       	brcc	.+12     	; 0x11ca <modf+0x5a>
    11be:	9b 01       	movw	r18, r22
    11c0:	ac 01       	movw	r20, r24
    11c2:	66 27       	eor	r22, r22
    11c4:	77 27       	eor	r23, r23
    11c6:	88 27       	eor	r24, r24
    11c8:	90 78       	andi	r25, 0x80	; 128
    11ca:	30 96       	adiw	r30, 0x00	; 0
    11cc:	21 f0       	breq	.+8      	; 0x11d6 <modf+0x66>
    11ce:	20 83       	st	Z, r18
    11d0:	31 83       	std	Z+1, r19	; 0x01
    11d2:	42 83       	std	Z+2, r20	; 0x02
    11d4:	53 83       	std	Z+3, r21	; 0x03
    11d6:	08 95       	ret

000011d8 <__mulsf3>:
    11d8:	0e 94 ff 08 	call	0x11fe	; 0x11fe <__mulsf3x>
    11dc:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <__fp_round>
    11e0:	0e 94 2d 07 	call	0xe5a	; 0xe5a <__fp_pscA>
    11e4:	38 f0       	brcs	.+14     	; 0x11f4 <__mulsf3+0x1c>
    11e6:	0e 94 34 07 	call	0xe68	; 0xe68 <__fp_pscB>
    11ea:	20 f0       	brcs	.+8      	; 0x11f4 <__mulsf3+0x1c>
    11ec:	95 23       	and	r25, r21
    11ee:	11 f0       	breq	.+4      	; 0x11f4 <__mulsf3+0x1c>
    11f0:	0c 94 16 07 	jmp	0xe2c	; 0xe2c <__fp_inf>
    11f4:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <__fp_nan>
    11f8:	11 24       	eor	r1, r1
    11fa:	0c 94 6f 07 	jmp	0xede	; 0xede <__fp_szero>

000011fe <__mulsf3x>:
    11fe:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fp_split3>
    1202:	70 f3       	brcs	.-36     	; 0x11e0 <__mulsf3+0x8>

00001204 <__mulsf3_pse>:
    1204:	95 9f       	mul	r25, r21
    1206:	c1 f3       	breq	.-16     	; 0x11f8 <__mulsf3+0x20>
    1208:	95 0f       	add	r25, r21
    120a:	50 e0       	ldi	r21, 0x00	; 0
    120c:	55 1f       	adc	r21, r21
    120e:	62 9f       	mul	r22, r18
    1210:	f0 01       	movw	r30, r0
    1212:	72 9f       	mul	r23, r18
    1214:	bb 27       	eor	r27, r27
    1216:	f0 0d       	add	r31, r0
    1218:	b1 1d       	adc	r27, r1
    121a:	63 9f       	mul	r22, r19
    121c:	aa 27       	eor	r26, r26
    121e:	f0 0d       	add	r31, r0
    1220:	b1 1d       	adc	r27, r1
    1222:	aa 1f       	adc	r26, r26
    1224:	64 9f       	mul	r22, r20
    1226:	66 27       	eor	r22, r22
    1228:	b0 0d       	add	r27, r0
    122a:	a1 1d       	adc	r26, r1
    122c:	66 1f       	adc	r22, r22
    122e:	82 9f       	mul	r24, r18
    1230:	22 27       	eor	r18, r18
    1232:	b0 0d       	add	r27, r0
    1234:	a1 1d       	adc	r26, r1
    1236:	62 1f       	adc	r22, r18
    1238:	73 9f       	mul	r23, r19
    123a:	b0 0d       	add	r27, r0
    123c:	a1 1d       	adc	r26, r1
    123e:	62 1f       	adc	r22, r18
    1240:	83 9f       	mul	r24, r19
    1242:	a0 0d       	add	r26, r0
    1244:	61 1d       	adc	r22, r1
    1246:	22 1f       	adc	r18, r18
    1248:	74 9f       	mul	r23, r20
    124a:	33 27       	eor	r19, r19
    124c:	a0 0d       	add	r26, r0
    124e:	61 1d       	adc	r22, r1
    1250:	23 1f       	adc	r18, r19
    1252:	84 9f       	mul	r24, r20
    1254:	60 0d       	add	r22, r0
    1256:	21 1d       	adc	r18, r1
    1258:	82 2f       	mov	r24, r18
    125a:	76 2f       	mov	r23, r22
    125c:	6a 2f       	mov	r22, r26
    125e:	11 24       	eor	r1, r1
    1260:	9f 57       	subi	r25, 0x7F	; 127
    1262:	50 40       	sbci	r21, 0x00	; 0
    1264:	9a f0       	brmi	.+38     	; 0x128c <__mulsf3_pse+0x88>
    1266:	f1 f0       	breq	.+60     	; 0x12a4 <__mulsf3_pse+0xa0>
    1268:	88 23       	and	r24, r24
    126a:	4a f0       	brmi	.+18     	; 0x127e <__mulsf3_pse+0x7a>
    126c:	ee 0f       	add	r30, r30
    126e:	ff 1f       	adc	r31, r31
    1270:	bb 1f       	adc	r27, r27
    1272:	66 1f       	adc	r22, r22
    1274:	77 1f       	adc	r23, r23
    1276:	88 1f       	adc	r24, r24
    1278:	91 50       	subi	r25, 0x01	; 1
    127a:	50 40       	sbci	r21, 0x00	; 0
    127c:	a9 f7       	brne	.-22     	; 0x1268 <__mulsf3_pse+0x64>
    127e:	9e 3f       	cpi	r25, 0xFE	; 254
    1280:	51 05       	cpc	r21, r1
    1282:	80 f0       	brcs	.+32     	; 0x12a4 <__mulsf3_pse+0xa0>
    1284:	0c 94 16 07 	jmp	0xe2c	; 0xe2c <__fp_inf>
    1288:	0c 94 6f 07 	jmp	0xede	; 0xede <__fp_szero>
    128c:	5f 3f       	cpi	r21, 0xFF	; 255
    128e:	e4 f3       	brlt	.-8      	; 0x1288 <__mulsf3_pse+0x84>
    1290:	98 3e       	cpi	r25, 0xE8	; 232
    1292:	d4 f3       	brlt	.-12     	; 0x1288 <__mulsf3_pse+0x84>
    1294:	86 95       	lsr	r24
    1296:	77 95       	ror	r23
    1298:	67 95       	ror	r22
    129a:	b7 95       	ror	r27
    129c:	f7 95       	ror	r31
    129e:	e7 95       	ror	r30
    12a0:	9f 5f       	subi	r25, 0xFF	; 255
    12a2:	c1 f7       	brne	.-16     	; 0x1294 <__mulsf3_pse+0x90>
    12a4:	fe 2b       	or	r31, r30
    12a6:	88 0f       	add	r24, r24
    12a8:	91 1d       	adc	r25, r1
    12aa:	96 95       	lsr	r25
    12ac:	87 95       	ror	r24
    12ae:	97 f9       	bld	r25, 7
    12b0:	08 95       	ret

000012b2 <_exit>:
    12b2:	f8 94       	cli

000012b4 <__stop_program>:
    12b4:	ff cf       	rjmp	.-2      	; 0x12b4 <__stop_program>
