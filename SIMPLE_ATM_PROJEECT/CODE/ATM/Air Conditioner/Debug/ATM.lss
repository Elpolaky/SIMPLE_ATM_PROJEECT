
ATM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000127c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002a8  00800060  0000127c  00001310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800308  00800308  000015b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000015b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000015e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  00001624  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002f27  00000000  00000000  00001874  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f97  00000000  00000000  0000479b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001893  00000000  00000000  00005732  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000590  00000000  00000000  00006fc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c7a  00000000  00000000  00007558  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001f61  00000000  00000000  000081d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f0  00000000  00000000  0000a133  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 60 05 	jmp	0xac0	; 0xac0 <__vector_1>
       8:	0c 94 9b 05 	jmp	0xb36	; 0xb36 <__vector_2>
       c:	0c 94 aa 05 	jmp	0xb54	; 0xb54 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 fa 06 	jmp	0xdf4	; 0xdf4 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e7       	ldi	r30, 0x7C	; 124
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 30       	cpi	r26, 0x08	; 8
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	23 e0       	ldi	r18, 0x03	; 3
      78:	a8 e0       	ldi	r26, 0x08	; 8
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 31       	cpi	r26, 0x19	; 25
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 bc 03 	call	0x778	; 0x778 <main>
      8a:	0c 94 3c 09 	jmp	0x1278	; 0x1278 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <app_Init>:

uint8_t Button_1(){
	TIMER_2_INT();
	
	
} 
      92:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <KEYPAD_init>
      96:	0e 94 da 02 	call	0x5b4	; 0x5b4 <LCD_INIT>
      9a:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <buzzer_init>
      9e:	80 e0       	ldi	r24, 0x00	; 0
      a0:	0e 94 d3 05 	call	0xba6	; 0xba6 <TIMER_0_init>
      a4:	62 e0       	ldi	r22, 0x02	; 2
      a6:	8a e0       	ldi	r24, 0x0A	; 10
      a8:	0e 94 c1 03 	call	0x782	; 0x782 <DIO_INITPIN>
      ac:	60 e0       	ldi	r22, 0x00	; 0
      ae:	8b e0       	ldi	r24, 0x0B	; 11
      b0:	0e 94 c1 03 	call	0x782	; 0x782 <DIO_INITPIN>
      b4:	08 95       	ret

000000b6 <app_Start>:

void app_Start(void){
      b6:	0f 93       	push	r16
      b8:	1f 93       	push	r17
      ba:	cf 93       	push	r28
      bc:	df 93       	push	r29
      be:	cd b7       	in	r28, 0x3d	; 61
      c0:	de b7       	in	r29, 0x3e	; 62
      c2:	6f 97       	sbiw	r28, 0x1f	; 31
      c4:	0f b6       	in	r0, 0x3f	; 63
      c6:	f8 94       	cli
      c8:	de bf       	out	0x3e, r29	; 62
      ca:	0f be       	out	0x3f, r0	; 63
      cc:	cd bf       	out	0x3d, r28	; 61
	uint8_t bell[8] = {0x04, 0x0E ,0x0E ,0x0E ,0x1f ,0x00 ,0x04 ,0x00};  //HEX Array for the Bell Shape//
      ce:	88 e0       	ldi	r24, 0x08	; 8
      d0:	e6 e5       	ldi	r30, 0x56	; 86
      d2:	f2 e0       	ldi	r31, 0x02	; 2
      d4:	de 01       	movw	r26, r28
      d6:	11 96       	adiw	r26, 0x01	; 1
      d8:	01 90       	ld	r0, Z+
      da:	0d 92       	st	X+, r0
      dc:	8a 95       	dec	r24
      de:	e1 f7       	brne	.-8      	; 0xd8 <app_Start+0x22>
	uint8_t pan [] = "898937615436851123";
      e0:	83 e1       	ldi	r24, 0x13	; 19
      e2:	e5 ef       	ldi	r30, 0xF5	; 245
      e4:	f2 e0       	ldi	r31, 0x02	; 2
      e6:	de 01       	movw	r26, r28
      e8:	19 96       	adiw	r26, 0x09	; 9
      ea:	01 90       	ld	r0, Z+
      ec:	0d 92       	st	X+, r0
      ee:	8a 95       	dec	r24
      f0:	e1 f7       	brne	.-8      	; 0xea <app_Start+0x34>
	float dailyMax = 5000.0; 
	float transAmount = 1000.0; 
      f2:	80 e0       	ldi	r24, 0x00	; 0
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	aa e7       	ldi	r26, 0x7A	; 122
      f8:	b4 e4       	ldi	r27, 0x44	; 68
      fa:	8c 8f       	std	Y+28, r24	; 0x1c
      fc:	9d 8f       	std	Y+29, r25	; 0x1d
      fe:	ae 8f       	std	Y+30, r26	; 0x1e
     100:	bf 8f       	std	Y+31, r27	; 0x1f
	uint8_t approved_flag = 0 ;
	LCD_Clear();
     102:	0e 94 8f 03 	call	0x71e	; 0x71e <LCD_Clear>
	
	if(isValidAccount(pan) == SERVER_OK){
     106:	ce 01       	movw	r24, r28
     108:	09 96       	adiw	r24, 0x09	; 9
     10a:	0e 94 8a 01 	call	0x314	; 0x314 <isValidAccount>
     10e:	81 11       	cpse	r24, r1
     110:	6a c0       	rjmp	.+212    	; 0x1e6 <app_Start+0x130>
		
		if(isBlockedAccount()==SERVER_OK){
     112:	0e 94 bb 01 	call	0x376	; 0x376 <isBlockedAccount>
     116:	81 11       	cpse	r24, r1
     118:	4c c0       	rjmp	.+152    	; 0x1b2 <app_Start+0xfc>
		
			if (transAmount<= dailyMax)
     11a:	6c 8d       	ldd	r22, Y+28	; 0x1c
     11c:	7d 8d       	ldd	r23, Y+29	; 0x1d
     11e:	8e 8d       	ldd	r24, Y+30	; 0x1e
     120:	9f 8d       	ldd	r25, Y+31	; 0x1f
     122:	20 e0       	ldi	r18, 0x00	; 0
     124:	30 e4       	ldi	r19, 0x40	; 64
     126:	4c e9       	ldi	r20, 0x9C	; 156
     128:	55 e4       	ldi	r21, 0x45	; 69
     12a:	0e 94 b9 07 	call	0xf72	; 0xf72 <__cmpsf2>
     12e:	18 16       	cp	r1, r24
     130:	fc f0       	brlt	.+62     	; 0x170 <app_Start+0xba>
			{
				if(isAmountAvailable(&transAmount) == SERVER_OK){
     132:	ce 01       	movw	r24, r28
     134:	4c 96       	adiw	r24, 0x1c	; 28
     136:	0e 94 ca 01 	call	0x394	; 0x394 <isAmountAvailable>
     13a:	88 23       	and	r24, r24
     13c:	09 f4       	brne	.+2      	; 0x140 <app_Start+0x8a>
     13e:	6d c0       	rjmp	.+218    	; 0x21a <app_Start+0x164>
					
					approved_flag = 1 ;
					
				}else{
					
					LCD_GoTo(1,3);
     140:	63 e0       	ldi	r22, 0x03	; 3
     142:	81 e0       	ldi	r24, 0x01	; 1
     144:	0e 94 93 03 	call	0x726	; 0x726 <LCD_GoTo>
					LCD_Write_String("INSUFFICIENT ");
     148:	8e e5       	ldi	r24, 0x5E	; 94
     14a:	92 e0       	ldi	r25, 0x02	; 2
     14c:	0e 94 2a 03 	call	0x654	; 0x654 <LCD_Write_String>
					LCD_GoTo(2,5);
     150:	65 e0       	ldi	r22, 0x05	; 5
     152:	82 e0       	ldi	r24, 0x02	; 2
     154:	0e 94 93 03 	call	0x726	; 0x726 <LCD_GoTo>
					LCD_Write_String(" FUND !!");
     158:	8c e6       	ldi	r24, 0x6C	; 108
     15a:	92 e0       	ldi	r25, 0x02	; 2
     15c:	0e 94 2a 03 	call	0x654	; 0x654 <LCD_Write_String>
					TIMER_0_DELAY_MS(DELAY_VALUE);
     160:	60 e0       	ldi	r22, 0x00	; 0
     162:	70 e8       	ldi	r23, 0x80	; 128
     164:	8b e3       	ldi	r24, 0x3B	; 59
     166:	95 e4       	ldi	r25, 0x45	; 69
     168:	0e 94 ce 06 	call	0xd9c	; 0xd9c <TIMER_0_DELAY_MS>
void app_Start(void){
	uint8_t bell[8] = {0x04, 0x0E ,0x0E ,0x0E ,0x1f ,0x00 ,0x04 ,0x00};  //HEX Array for the Bell Shape//
	uint8_t pan [] = "898937615436851123";
	float dailyMax = 5000.0; 
	float transAmount = 1000.0; 
	uint8_t approved_flag = 0 ;
     16c:	80 e0       	ldi	r24, 0x00	; 0
     16e:	56 c0       	rjmp	.+172    	; 0x21c <app_Start+0x166>
					
				}// end of balance check
				
			}else{
				
					LCD_GoTo(1,4);
     170:	64 e0       	ldi	r22, 0x04	; 4
     172:	81 e0       	ldi	r24, 0x01	; 1
     174:	0e 94 93 03 	call	0x726	; 0x726 <LCD_GoTo>
					LCD_Write_String("MAX LIMIT");
     178:	85 e7       	ldi	r24, 0x75	; 117
     17a:	92 e0       	ldi	r25, 0x02	; 2
     17c:	0e 94 2a 03 	call	0x654	; 0x654 <LCD_Write_String>
					LCD_GoTo(2,1);
     180:	61 e0       	ldi	r22, 0x01	; 1
     182:	82 e0       	ldi	r24, 0x02	; 2
     184:	0e 94 93 03 	call	0x726	; 0x726 <LCD_GoTo>
					LCD_Write_String(" IS EXCEEDED ");
     188:	8f e7       	ldi	r24, 0x7F	; 127
     18a:	92 e0       	ldi	r25, 0x02	; 2
     18c:	0e 94 2a 03 	call	0x654	; 0x654 <LCD_Write_String>
					LCD_GoTo(2,15);
     190:	6f e0       	ldi	r22, 0x0F	; 15
     192:	82 e0       	ldi	r24, 0x02	; 2
     194:	0e 94 93 03 	call	0x726	; 0x726 <LCD_GoTo>
					LCD_Create_Charecter(bell,2);
     198:	62 e0       	ldi	r22, 0x02	; 2
     19a:	ce 01       	movw	r24, r28
     19c:	01 96       	adiw	r24, 0x01	; 1
     19e:	0e 94 a1 03 	call	0x742	; 0x742 <LCD_Create_Charecter>
					TIMER_0_DELAY_MS(DELAY_VALUE);
     1a2:	60 e0       	ldi	r22, 0x00	; 0
     1a4:	70 e8       	ldi	r23, 0x80	; 128
     1a6:	8b e3       	ldi	r24, 0x3B	; 59
     1a8:	95 e4       	ldi	r25, 0x45	; 69
     1aa:	0e 94 ce 06 	call	0xd9c	; 0xd9c <TIMER_0_DELAY_MS>
void app_Start(void){
	uint8_t bell[8] = {0x04, 0x0E ,0x0E ,0x0E ,0x1f ,0x00 ,0x04 ,0x00};  //HEX Array for the Bell Shape//
	uint8_t pan [] = "898937615436851123";
	float dailyMax = 5000.0; 
	float transAmount = 1000.0; 
	uint8_t approved_flag = 0 ;
     1ae:	80 e0       	ldi	r24, 0x00	; 0
     1b0:	35 c0       	rjmp	.+106    	; 0x21c <app_Start+0x166>
					
			}// end of amount check
		
		}else{
			
			buzzer_On();
     1b2:	0e 94 ef 01 	call	0x3de	; 0x3de <buzzer_On>
			LCD_GoTo(1,4);
     1b6:	64 e0       	ldi	r22, 0x04	; 4
     1b8:	81 e0       	ldi	r24, 0x01	; 1
     1ba:	0e 94 93 03 	call	0x726	; 0x726 <LCD_GoTo>
			LCD_Write_String("THIS IS");
     1be:	8d e8       	ldi	r24, 0x8D	; 141
     1c0:	92 e0       	ldi	r25, 0x02	; 2
     1c2:	0e 94 2a 03 	call	0x654	; 0x654 <LCD_Write_String>
			LCD_GoTo(2,1);
     1c6:	61 e0       	ldi	r22, 0x01	; 1
     1c8:	82 e0       	ldi	r24, 0x02	; 2
     1ca:	0e 94 93 03 	call	0x726	; 0x726 <LCD_GoTo>
			LCD_Write_String("A STOLEN CARD !!");
     1ce:	85 e9       	ldi	r24, 0x95	; 149
     1d0:	92 e0       	ldi	r25, 0x02	; 2
     1d2:	0e 94 2a 03 	call	0x654	; 0x654 <LCD_Write_String>
			
			TIMER_0_DELAY_MS(DELAY_VALUE);
     1d6:	60 e0       	ldi	r22, 0x00	; 0
     1d8:	70 e8       	ldi	r23, 0x80	; 128
     1da:	8b e3       	ldi	r24, 0x3B	; 59
     1dc:	95 e4       	ldi	r25, 0x45	; 69
     1de:	0e 94 ce 06 	call	0xd9c	; 0xd9c <TIMER_0_DELAY_MS>
void app_Start(void){
	uint8_t bell[8] = {0x04, 0x0E ,0x0E ,0x0E ,0x1f ,0x00 ,0x04 ,0x00};  //HEX Array for the Bell Shape//
	uint8_t pan [] = "898937615436851123";
	float dailyMax = 5000.0; 
	float transAmount = 1000.0; 
	uint8_t approved_flag = 0 ;
     1e2:	80 e0       	ldi	r24, 0x00	; 0
     1e4:	1b c0       	rjmp	.+54     	; 0x21c <app_Start+0x166>
			TIMER_0_DELAY_MS(DELAY_VALUE);
		} //  end of blocked check
		
	}
	else{
		buzzer_On();
     1e6:	0e 94 ef 01 	call	0x3de	; 0x3de <buzzer_On>
		LCD_GoTo(1,4);
     1ea:	64 e0       	ldi	r22, 0x04	; 4
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	0e 94 93 03 	call	0x726	; 0x726 <LCD_GoTo>
		LCD_Write_String("THIS IS");
     1f2:	8d e8       	ldi	r24, 0x8D	; 141
     1f4:	92 e0       	ldi	r25, 0x02	; 2
     1f6:	0e 94 2a 03 	call	0x654	; 0x654 <LCD_Write_String>
		LCD_GoTo(2,1);
     1fa:	61 e0       	ldi	r22, 0x01	; 1
     1fc:	82 e0       	ldi	r24, 0x02	; 2
     1fe:	0e 94 93 03 	call	0x726	; 0x726 <LCD_GoTo>
		LCD_Write_String("A FRAUD CARD !!");
     202:	86 ea       	ldi	r24, 0xA6	; 166
     204:	92 e0       	ldi	r25, 0x02	; 2
     206:	0e 94 2a 03 	call	0x654	; 0x654 <LCD_Write_String>
		TIMER_0_DELAY_MS(DELAY_VALUE);
     20a:	60 e0       	ldi	r22, 0x00	; 0
     20c:	70 e8       	ldi	r23, 0x80	; 128
     20e:	8b e3       	ldi	r24, 0x3B	; 59
     210:	95 e4       	ldi	r25, 0x45	; 69
     212:	0e 94 ce 06 	call	0xd9c	; 0xd9c <TIMER_0_DELAY_MS>
void app_Start(void){
	uint8_t bell[8] = {0x04, 0x0E ,0x0E ,0x0E ,0x1f ,0x00 ,0x04 ,0x00};  //HEX Array for the Bell Shape//
	uint8_t pan [] = "898937615436851123";
	float dailyMax = 5000.0; 
	float transAmount = 1000.0; 
	uint8_t approved_flag = 0 ;
     216:	80 e0       	ldi	r24, 0x00	; 0
     218:	01 c0       	rjmp	.+2      	; 0x21c <app_Start+0x166>
		
			if (transAmount<= dailyMax)
			{
				if(isAmountAvailable(&transAmount) == SERVER_OK){
					
					approved_flag = 1 ;
     21a:	81 e0       	ldi	r24, 0x01	; 1
		TIMER_0_DELAY_MS(DELAY_VALUE);
		
	}
	
	
	if ( approved_flag)
     21c:	88 23       	and	r24, r24
     21e:	09 f4       	brne	.+2      	; 0x222 <app_Start+0x16c>
     220:	6e c0       	rjmp	.+220    	; 0x2fe <app_Start+0x248>
	{
		buzzer_Off();
     222:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <buzzer_Off>
		p_account->balance -= transAmount ;
     226:	00 91 60 00 	lds	r16, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     22a:	10 91 61 00 	lds	r17, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     22e:	2c 8d       	ldd	r18, Y+28	; 0x1c
     230:	3d 8d       	ldd	r19, Y+29	; 0x1d
     232:	4e 8d       	ldd	r20, Y+30	; 0x1e
     234:	5f 8d       	ldd	r21, Y+31	; 0x1f
     236:	f8 01       	movw	r30, r16
     238:	60 81       	ld	r22, Z
     23a:	71 81       	ldd	r23, Z+1	; 0x01
     23c:	82 81       	ldd	r24, Z+2	; 0x02
     23e:	93 81       	ldd	r25, Z+3	; 0x03
     240:	0e 94 35 07 	call	0xe6a	; 0xe6a <__subsf3>
     244:	f8 01       	movw	r30, r16
     246:	60 83       	st	Z, r22
     248:	71 83       	std	Z+1, r23	; 0x01
     24a:	82 83       	std	Z+2, r24	; 0x02
     24c:	93 83       	std	Z+3, r25	; 0x03
		LCD_Clear();
     24e:	0e 94 8f 03 	call	0x71e	; 0x71e <LCD_Clear>
		LCD_GoTo(1,4);
     252:	64 e0       	ldi	r22, 0x04	; 4
     254:	81 e0       	ldi	r24, 0x01	; 1
     256:	0e 94 93 03 	call	0x726	; 0x726 <LCD_GoTo>
		LCD_Write_String("APPROVED ");
     25a:	86 eb       	ldi	r24, 0xB6	; 182
     25c:	92 e0       	ldi	r25, 0x02	; 2
     25e:	0e 94 2a 03 	call	0x654	; 0x654 <LCD_Write_String>
		LCD_GoTo(2,3);
     262:	63 e0       	ldi	r22, 0x03	; 3
     264:	82 e0       	ldi	r24, 0x02	; 2
     266:	0e 94 93 03 	call	0x726	; 0x726 <LCD_GoTo>
		LCD_Write_String("TRANSACTION ");
     26a:	80 ec       	ldi	r24, 0xC0	; 192
     26c:	92 e0       	ldi	r25, 0x02	; 2
     26e:	0e 94 2a 03 	call	0x654	; 0x654 <LCD_Write_String>
		TIMER_0_DELAY_MS(DELAY_VALUE);
     272:	60 e0       	ldi	r22, 0x00	; 0
     274:	70 e8       	ldi	r23, 0x80	; 128
     276:	8b e3       	ldi	r24, 0x3B	; 59
     278:	95 e4       	ldi	r25, 0x45	; 69
     27a:	0e 94 ce 06 	call	0xd9c	; 0xd9c <TIMER_0_DELAY_MS>
		
		LCD_Clear();
     27e:	0e 94 8f 03 	call	0x71e	; 0x71e <LCD_Clear>
		LCD_GoTo(1,4);
     282:	64 e0       	ldi	r22, 0x04	; 4
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	0e 94 93 03 	call	0x726	; 0x726 <LCD_GoTo>
		LCD_Write_String("REMAINING");
     28a:	8d ec       	ldi	r24, 0xCD	; 205
     28c:	92 e0       	ldi	r25, 0x02	; 2
     28e:	0e 94 2a 03 	call	0x654	; 0x654 <LCD_Write_String>
		LCD_GoTo(2,0);
     292:	60 e0       	ldi	r22, 0x00	; 0
     294:	82 e0       	ldi	r24, 0x02	; 2
     296:	0e 94 93 03 	call	0x726	; 0x726 <LCD_GoTo>
		LCD_Write_String("BALANCE :");
     29a:	87 ed       	ldi	r24, 0xD7	; 215
     29c:	92 e0       	ldi	r25, 0x02	; 2
     29e:	0e 94 2a 03 	call	0x654	; 0x654 <LCD_Write_String>
		LCD_Write_Number(p_account->balance);
     2a2:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     2a6:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     2aa:	60 81       	ld	r22, Z
     2ac:	71 81       	ldd	r23, Z+1	; 0x01
     2ae:	82 81       	ldd	r24, Z+2	; 0x02
     2b0:	93 81       	ldd	r25, Z+3	; 0x03
     2b2:	0e 94 30 08 	call	0x1060	; 0x1060 <__fixunssfsi>
     2b6:	0e 94 3d 03 	call	0x67a	; 0x67a <LCD_Write_Number>
		LCD_Write_String(".00");
     2ba:	81 ee       	ldi	r24, 0xE1	; 225
     2bc:	92 e0       	ldi	r25, 0x02	; 2
     2be:	0e 94 2a 03 	call	0x654	; 0x654 <LCD_Write_String>
		TIMER_0_DELAY_MS(DELAY_VALUE);
     2c2:	60 e0       	ldi	r22, 0x00	; 0
     2c4:	70 e8       	ldi	r23, 0x80	; 128
     2c6:	8b e3       	ldi	r24, 0x3B	; 59
     2c8:	95 e4       	ldi	r25, 0x45	; 69
     2ca:	0e 94 ce 06 	call	0xd9c	; 0xd9c <TIMER_0_DELAY_MS>

		
		LCD_Clear();
     2ce:	0e 94 8f 03 	call	0x71e	; 0x71e <LCD_Clear>
		LCD_GoTo(1,4);
     2d2:	64 e0       	ldi	r22, 0x04	; 4
     2d4:	81 e0       	ldi	r24, 0x01	; 1
     2d6:	0e 94 93 03 	call	0x726	; 0x726 <LCD_GoTo>
		LCD_Write_String("EJECTING ");
     2da:	85 ee       	ldi	r24, 0xE5	; 229
     2dc:	92 e0       	ldi	r25, 0x02	; 2
     2de:	0e 94 2a 03 	call	0x654	; 0x654 <LCD_Write_String>
		LCD_GoTo(2,6);
     2e2:	66 e0       	ldi	r22, 0x06	; 6
     2e4:	82 e0       	ldi	r24, 0x02	; 2
     2e6:	0e 94 93 03 	call	0x726	; 0x726 <LCD_GoTo>
		LCD_Write_String("CARD ");
     2ea:	8f ee       	ldi	r24, 0xEF	; 239
     2ec:	92 e0       	ldi	r25, 0x02	; 2
     2ee:	0e 94 2a 03 	call	0x654	; 0x654 <LCD_Write_String>
		TIMER_0_DELAY_MS(DELAY_VALUE);
     2f2:	60 e0       	ldi	r22, 0x00	; 0
     2f4:	70 e8       	ldi	r23, 0x80	; 128
     2f6:	8b e3       	ldi	r24, 0x3B	; 59
     2f8:	95 e4       	ldi	r25, 0x45	; 69
     2fa:	0e 94 ce 06 	call	0xd9c	; 0xd9c <TIMER_0_DELAY_MS>

	}
	
	
}
     2fe:	6f 96       	adiw	r28, 0x1f	; 31
     300:	0f b6       	in	r0, 0x3f	; 63
     302:	f8 94       	cli
     304:	de bf       	out	0x3e, r29	; 62
     306:	0f be       	out	0x3f, r0	; 63
     308:	cd bf       	out	0x3d, r28	; 61
     30a:	df 91       	pop	r29
     30c:	cf 91       	pop	r28
     30e:	1f 91       	pop	r17
     310:	0f 91       	pop	r16
     312:	08 95       	ret

00000314 <isValidAccount>:

/******************************************* isValidAccount **********************************************/
//calling database and card data

EN_serverError_t isValidAccount(uint8_t *pan )
{
     314:	dc 01       	movw	r26, r24

    uint8_t exist_flag = 0 ;
    EN_serverError_t server_status ;

    for(uint8_t account_num= 0 ; account_num< 10 ; account_num++) // num of accounts
     316:	80 e0       	ldi	r24, 0x00	; 0
//calling database and card data

EN_serverError_t isValidAccount(uint8_t *pan )
{

    uint8_t exist_flag = 0 ;
     318:	20 e0       	ldi	r18, 0x00	; 0
    EN_serverError_t server_status ;

    for(uint8_t account_num= 0 ; account_num< 10 ; account_num++) // num of accounts
     31a:	21 c0       	rjmp	.+66     	; 0x35e <isValidAccount+0x4a>
    {
        for(uint8_t counter = 0 ; counter < 18 ; counter++)
        {
            if( pan[counter] == (p_account)->primaryAccountNumber[counter] )
     31c:	29 2f       	mov	r18, r25
     31e:	30 e0       	ldi	r19, 0x00	; 0
     320:	fd 01       	movw	r30, r26
     322:	e2 0f       	add	r30, r18
     324:	f3 1f       	adc	r31, r19
     326:	60 81       	ld	r22, Z
     328:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     32c:	50 91 61 00 	lds	r21, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     330:	fa 01       	movw	r30, r20
     332:	e2 0f       	add	r30, r18
     334:	f3 1f       	adc	r31, r19
     336:	25 81       	ldd	r18, Z+5	; 0x05
     338:	62 13       	cpse	r22, r18
     33a:	03 c0       	rjmp	.+6      	; 0x342 <isValidAccount+0x2e>
    uint8_t exist_flag = 0 ;
    EN_serverError_t server_status ;

    for(uint8_t account_num= 0 ; account_num< 10 ; account_num++) // num of accounts
    {
        for(uint8_t counter = 0 ; counter < 18 ; counter++)
     33c:	9f 5f       	subi	r25, 0xFF	; 255
        {
            if( pan[counter] == (p_account)->primaryAccountNumber[counter] )
            {
                exist_flag =1 ;
     33e:	21 e0       	ldi	r18, 0x01	; 1
     340:	09 c0       	rjmp	.+18     	; 0x354 <isValidAccount+0x40>
				
            }
            else
            {
                p_account++;
     342:	47 5e       	subi	r20, 0xE7	; 231
     344:	5f 4f       	sbci	r21, 0xFF	; 255
     346:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     34a:	40 93 60 00 	sts	0x0060, r20	; 0x800060 <__DATA_REGION_ORIGIN__>
                exist_flag =0;
     34e:	20 e0       	ldi	r18, 0x00	; 0
                break ;
     350:	03 c0       	rjmp	.+6      	; 0x358 <isValidAccount+0x44>
     352:	90 e0       	ldi	r25, 0x00	; 0
    uint8_t exist_flag = 0 ;
    EN_serverError_t server_status ;

    for(uint8_t account_num= 0 ; account_num< 10 ; account_num++) // num of accounts
    {
        for(uint8_t counter = 0 ; counter < 18 ; counter++)
     354:	92 31       	cpi	r25, 0x12	; 18
     356:	10 f3       	brcs	.-60     	; 0x31c <isValidAccount+0x8>
                exist_flag =0;
                break ;
            }
        }
		
		if (exist_flag)
     358:	21 11       	cpse	r18, r1
     35a:	03 c0       	rjmp	.+6      	; 0x362 <isValidAccount+0x4e>
{

    uint8_t exist_flag = 0 ;
    EN_serverError_t server_status ;

    for(uint8_t account_num= 0 ; account_num< 10 ; account_num++) // num of accounts
     35c:	8f 5f       	subi	r24, 0xFF	; 255
     35e:	8a 30       	cpi	r24, 0x0A	; 10
     360:	c0 f3       	brcs	.-16     	; 0x352 <isValidAccount+0x3e>
		}
		
		
    }

    if(exist_flag)
     362:	21 11       	cpse	r18, r1
     364:	06 c0       	rjmp	.+12     	; 0x372 <isValidAccount+0x5e>
        server_status = SERVER_OK ;
    }
    else
    {
        server_status =ACCOUNT_NOT_FOUND  ;
        p_account = NULL ;
     366:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     36a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
    {
        server_status = SERVER_OK ;
    }
    else
    {
        server_status =ACCOUNT_NOT_FOUND  ;
     36e:	83 e0       	ldi	r24, 0x03	; 3
     370:	08 95       	ret
		
    }

    if(exist_flag)
    {
        server_status = SERVER_OK ;
     372:	80 e0       	ldi	r24, 0x00	; 0




    return server_status ;
}
     374:	08 95       	ret

00000376 <isBlockedAccount>:


EN_serverError_t isBlockedAccount()
{

    if(_isValidAccount== SERVER_OK)
     376:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <_isValidAccount>
     37a:	81 11       	cpse	r24, r1
     37c:	08 c0       	rjmp	.+16     	; 0x38e <isBlockedAccount+0x18>
    {
        if (p_account->state==BLOCKED)
     37e:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     382:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     386:	94 81       	ldd	r25, Z+4	; 0x04
     388:	91 30       	cpi	r25, 0x01	; 1
     38a:	19 f4       	brne	.+6      	; 0x392 <isBlockedAccount+0x1c>
     38c:	01 c0       	rjmp	.+2      	; 0x390 <isBlockedAccount+0x1a>

        }

    }

}
     38e:	08 95       	ret
    {
        if (p_account->state==BLOCKED)
        {


            return BLOCKED_ACCOUNT ;
     390:	85 e0       	ldi	r24, 0x05	; 5

        }

    }

}
     392:	08 95       	ret

00000394 <isAmountAvailable>:


/******************************************* isAmountAvailable **********************************************/
// calling terminal data and database
EN_serverError_t isAmountAvailable(float *termData)
{
     394:	cf 93       	push	r28

    if(_isValidAccount==SERVER_OK && _isBlockedAccount == SERVER_OK)
     396:	20 91 17 03 	lds	r18, 0x0317	; 0x800317 <_isValidAccount>
     39a:	21 11       	cpse	r18, r1
     39c:	16 c0       	rjmp	.+44     	; 0x3ca <isAmountAvailable+0x36>
     39e:	c0 91 15 03 	lds	r28, 0x0315	; 0x800315 <_isBlockedAccount>
     3a2:	c1 11       	cpse	r28, r1
     3a4:	12 c0       	rjmp	.+36     	; 0x3ca <isAmountAvailable+0x36>
     3a6:	dc 01       	movw	r26, r24
    {
        if ((p_account->balance)<(*termData))
     3a8:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     3ac:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     3b0:	60 81       	ld	r22, Z
     3b2:	71 81       	ldd	r23, Z+1	; 0x01
     3b4:	82 81       	ldd	r24, Z+2	; 0x02
     3b6:	93 81       	ldd	r25, Z+3	; 0x03
     3b8:	2d 91       	ld	r18, X+
     3ba:	3d 91       	ld	r19, X+
     3bc:	4d 91       	ld	r20, X+
     3be:	5c 91       	ld	r21, X
     3c0:	0e 94 b9 07 	call	0xf72	; 0xf72 <__cmpsf2>
     3c4:	88 23       	and	r24, r24
     3c6:	14 f0       	brlt	.+4      	; 0x3cc <isAmountAvailable+0x38>
     3c8:	02 c0       	rjmp	.+4      	; 0x3ce <isAmountAvailable+0x3a>
        {
            return SERVER_OK;
        }

    }
}
     3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <isAmountAvailable+0x3c>

    if(_isValidAccount==SERVER_OK && _isBlockedAccount == SERVER_OK)
    {
        if ((p_account->balance)<(*termData))
        {
            return LOW_BALANCE;
     3cc:	c4 e0       	ldi	r28, 0x04	; 4
     3ce:	8c 2f       	mov	r24, r28
        {
            return SERVER_OK;
        }

    }
}
     3d0:	cf 91       	pop	r28
     3d2:	08 95       	ret

000003d4 <buzzer_init>:
/* Description:
Function used to initialize the buzzer connected pin as output
*********************************************************************************************************************************************/
void buzzer_init(void)
{
	DIO_INITPIN(pinb3,OUTPUT);
     3d4:	60 e0       	ldi	r22, 0x00	; 0
     3d6:	8b e0       	ldi	r24, 0x0B	; 11
     3d8:	0e 94 c1 03 	call	0x782	; 0x782 <DIO_INITPIN>
     3dc:	08 95       	ret

000003de <buzzer_On>:
/* Description:
Function used to put high voltage in buzzer pin
*******************************************************************************************************************************************/
void buzzer_On(void)
{
	DIO_WRITEPIN(pinb3,HIGH)	;
     3de:	61 e0       	ldi	r22, 0x01	; 1
     3e0:	8b e0       	ldi	r24, 0x0B	; 11
     3e2:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_WRITEPIN>
     3e6:	08 95       	ret

000003e8 <buzzer_Off>:
/* Description:
Function used to put low voltage in buzzer pin
********************************************************************************************************************************************/
void buzzer_Off(void)
{
	DIO_WRITEPIN(pinb3,LOW)	;
     3e8:	60 e0       	ldi	r22, 0x00	; 0
     3ea:	8b e0       	ldi	r24, 0x0B	; 11
     3ec:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_WRITEPIN>
     3f0:	08 95       	ret

000003f2 <KEYPAD_init>:
/* Description:
- Function used to initialize the rows pins of keypad as output and set them high and initialize the columns pins of keypad as  input pullup
- FIRST_ROW_PIN , LAST_ROW_PIN ,FIRST_COL_PIN , LAST_COL_PIN are used to define the keypad dimensions and can be changed in configurations
************************************************************************************************************************************************/

void KEYPAD_init(void){
     3f2:	cf 93       	push	r28
	
	for (uint8_t row_pins = FIRST_ROW_PIN ; row_pins <= LAST_ROW_PIN ; row_pins++)
     3f4:	c2 e1       	ldi	r28, 0x12	; 18
     3f6:	09 c0       	rjmp	.+18     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
	{
		DIO_INITPIN(row_pins,OUTPUT);
     3f8:	60 e0       	ldi	r22, 0x00	; 0
     3fa:	8c 2f       	mov	r24, r28
     3fc:	0e 94 c1 03 	call	0x782	; 0x782 <DIO_INITPIN>
		DIO_WRITEPIN(row_pins,HIGH);
     400:	61 e0       	ldi	r22, 0x01	; 1
     402:	8c 2f       	mov	r24, r28
     404:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_WRITEPIN>
- FIRST_ROW_PIN , LAST_ROW_PIN ,FIRST_COL_PIN , LAST_COL_PIN are used to define the keypad dimensions and can be changed in configurations
************************************************************************************************************************************************/

void KEYPAD_init(void){
	
	for (uint8_t row_pins = FIRST_ROW_PIN ; row_pins <= LAST_ROW_PIN ; row_pins++)
     408:	cf 5f       	subi	r28, 0xFF	; 255
     40a:	c5 31       	cpi	r28, 0x15	; 21
     40c:	a8 f3       	brcs	.-22     	; 0x3f8 <KEYPAD_init+0x6>
     40e:	c5 e1       	ldi	r28, 0x15	; 21
     410:	05 c0       	rjmp	.+10     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
		DIO_WRITEPIN(row_pins,HIGH);
	}
	
	for (uint8_t col_pins = FIRST_COL_PIN ; col_pins <= LAST_COL_PIN ; col_pins++)
	{
		DIO_INITPIN(col_pins,INPLUP);
     412:	62 e0       	ldi	r22, 0x02	; 2
     414:	8c 2f       	mov	r24, r28
     416:	0e 94 c1 03 	call	0x782	; 0x782 <DIO_INITPIN>
	{
		DIO_INITPIN(row_pins,OUTPUT);
		DIO_WRITEPIN(row_pins,HIGH);
	}
	
	for (uint8_t col_pins = FIRST_COL_PIN ; col_pins <= LAST_COL_PIN ; col_pins++)
     41a:	cf 5f       	subi	r28, 0xFF	; 255
     41c:	c8 31       	cpi	r28, 0x18	; 24
     41e:	c8 f3       	brcs	.-14     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
		

	}
	
	
}
     420:	cf 91       	pop	r28
     422:	08 95       	ret

00000424 <LCD_WRITE_COMMAND>:
/**DESCRIPTION:-
  This Function Is Used To Display Any Character And It also used To Display the Shapes Saved In The CGRAM
  **/
void LCD_Write_Charecter(uint8_t a_char)
{
	LCD_WRITE_DATA(a_char);
     424:	cf 93       	push	r28
     426:	c8 2f       	mov	r28, r24
     428:	60 e0       	ldi	r22, 0x00	; 0
     42a:	81 e0       	ldi	r24, 0x01	; 1
     42c:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_WRITEPIN>
     430:	60 e0       	ldi	r22, 0x00	; 0
     432:	82 e0       	ldi	r24, 0x02	; 2
     434:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_WRITEPIN>
     438:	c4 fb       	bst	r28, 4
     43a:	66 27       	eor	r22, r22
     43c:	60 f9       	bld	r22, 0
     43e:	84 e0       	ldi	r24, 0x04	; 4
     440:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_WRITEPIN>
     444:	c5 fb       	bst	r28, 5
     446:	66 27       	eor	r22, r22
     448:	60 f9       	bld	r22, 0
     44a:	85 e0       	ldi	r24, 0x05	; 5
     44c:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_WRITEPIN>
     450:	c6 fb       	bst	r28, 6
     452:	66 27       	eor	r22, r22
     454:	60 f9       	bld	r22, 0
     456:	86 e0       	ldi	r24, 0x06	; 6
     458:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_WRITEPIN>
     45c:	6c 2f       	mov	r22, r28
     45e:	66 1f       	adc	r22, r22
     460:	66 27       	eor	r22, r22
     462:	66 1f       	adc	r22, r22
     464:	87 e0       	ldi	r24, 0x07	; 7
     466:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_WRITEPIN>
     46a:	61 e0       	ldi	r22, 0x01	; 1
     46c:	83 e0       	ldi	r24, 0x03	; 3
     46e:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_WRITEPIN>
     472:	89 ef       	ldi	r24, 0xF9	; 249
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	01 97       	sbiw	r24, 0x01	; 1
     478:	f1 f7       	brne	.-4      	; 0x476 <LCD_WRITE_COMMAND+0x52>
     47a:	00 c0       	rjmp	.+0      	; 0x47c <LCD_WRITE_COMMAND+0x58>
     47c:	00 00       	nop
     47e:	60 e0       	ldi	r22, 0x00	; 0
     480:	83 e0       	ldi	r24, 0x03	; 3
     482:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_WRITEPIN>
     486:	89 ef       	ldi	r24, 0xF9	; 249
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	01 97       	sbiw	r24, 0x01	; 1
     48c:	f1 f7       	brne	.-4      	; 0x48a <LCD_WRITE_COMMAND+0x66>
     48e:	00 c0       	rjmp	.+0      	; 0x490 <LCD_WRITE_COMMAND+0x6c>
     490:	00 00       	nop
     492:	6c 2f       	mov	r22, r28
     494:	61 70       	andi	r22, 0x01	; 1
     496:	84 e0       	ldi	r24, 0x04	; 4
     498:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_WRITEPIN>
     49c:	c1 fb       	bst	r28, 1
     49e:	66 27       	eor	r22, r22
     4a0:	60 f9       	bld	r22, 0
     4a2:	85 e0       	ldi	r24, 0x05	; 5
     4a4:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_WRITEPIN>
     4a8:	c2 fb       	bst	r28, 2
     4aa:	66 27       	eor	r22, r22
     4ac:	60 f9       	bld	r22, 0
     4ae:	86 e0       	ldi	r24, 0x06	; 6
     4b0:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_WRITEPIN>
     4b4:	c3 fb       	bst	r28, 3
     4b6:	66 27       	eor	r22, r22
     4b8:	60 f9       	bld	r22, 0
     4ba:	87 e0       	ldi	r24, 0x07	; 7
     4bc:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_WRITEPIN>
     4c0:	61 e0       	ldi	r22, 0x01	; 1
     4c2:	83 e0       	ldi	r24, 0x03	; 3
     4c4:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_WRITEPIN>
     4c8:	89 ef       	ldi	r24, 0xF9	; 249
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	01 97       	sbiw	r24, 0x01	; 1
     4ce:	f1 f7       	brne	.-4      	; 0x4cc <LCD_WRITE_COMMAND+0xa8>
     4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <LCD_WRITE_COMMAND+0xae>
     4d2:	00 00       	nop
     4d4:	60 e0       	ldi	r22, 0x00	; 0
     4d6:	83 e0       	ldi	r24, 0x03	; 3
     4d8:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_WRITEPIN>
     4dc:	89 ef       	ldi	r24, 0xF9	; 249
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	01 97       	sbiw	r24, 0x01	; 1
     4e2:	f1 f7       	brne	.-4      	; 0x4e0 <LCD_WRITE_COMMAND+0xbc>
     4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <LCD_WRITE_COMMAND+0xc2>
     4e6:	00 00       	nop
     4e8:	cf 91       	pop	r28
     4ea:	08 95       	ret

000004ec <LCD_WRITE_DATA>:
     4ec:	cf 93       	push	r28
     4ee:	c8 2f       	mov	r28, r24
     4f0:	61 e0       	ldi	r22, 0x01	; 1
     4f2:	81 e0       	ldi	r24, 0x01	; 1
     4f4:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_WRITEPIN>
     4f8:	60 e0       	ldi	r22, 0x00	; 0
     4fa:	82 e0       	ldi	r24, 0x02	; 2
     4fc:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_WRITEPIN>
     500:	c4 fb       	bst	r28, 4
     502:	66 27       	eor	r22, r22
     504:	60 f9       	bld	r22, 0
     506:	84 e0       	ldi	r24, 0x04	; 4
     508:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_WRITEPIN>
     50c:	c5 fb       	bst	r28, 5
     50e:	66 27       	eor	r22, r22
     510:	60 f9       	bld	r22, 0
     512:	85 e0       	ldi	r24, 0x05	; 5
     514:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_WRITEPIN>
     518:	c6 fb       	bst	r28, 6
     51a:	66 27       	eor	r22, r22
     51c:	60 f9       	bld	r22, 0
     51e:	86 e0       	ldi	r24, 0x06	; 6
     520:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_WRITEPIN>
     524:	6c 2f       	mov	r22, r28
     526:	66 1f       	adc	r22, r22
     528:	66 27       	eor	r22, r22
     52a:	66 1f       	adc	r22, r22
     52c:	87 e0       	ldi	r24, 0x07	; 7
     52e:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_WRITEPIN>
     532:	61 e0       	ldi	r22, 0x01	; 1
     534:	83 e0       	ldi	r24, 0x03	; 3
     536:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_WRITEPIN>
     53a:	89 ef       	ldi	r24, 0xF9	; 249
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	01 97       	sbiw	r24, 0x01	; 1
     540:	f1 f7       	brne	.-4      	; 0x53e <LCD_WRITE_DATA+0x52>
     542:	00 c0       	rjmp	.+0      	; 0x544 <LCD_WRITE_DATA+0x58>
     544:	00 00       	nop
     546:	60 e0       	ldi	r22, 0x00	; 0
     548:	83 e0       	ldi	r24, 0x03	; 3
     54a:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_WRITEPIN>
     54e:	89 ef       	ldi	r24, 0xF9	; 249
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	01 97       	sbiw	r24, 0x01	; 1
     554:	f1 f7       	brne	.-4      	; 0x552 <LCD_WRITE_DATA+0x66>
     556:	00 c0       	rjmp	.+0      	; 0x558 <LCD_WRITE_DATA+0x6c>
     558:	00 00       	nop
     55a:	6c 2f       	mov	r22, r28
     55c:	61 70       	andi	r22, 0x01	; 1
     55e:	84 e0       	ldi	r24, 0x04	; 4
     560:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_WRITEPIN>
     564:	c1 fb       	bst	r28, 1
     566:	66 27       	eor	r22, r22
     568:	60 f9       	bld	r22, 0
     56a:	85 e0       	ldi	r24, 0x05	; 5
     56c:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_WRITEPIN>
     570:	c2 fb       	bst	r28, 2
     572:	66 27       	eor	r22, r22
     574:	60 f9       	bld	r22, 0
     576:	86 e0       	ldi	r24, 0x06	; 6
     578:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_WRITEPIN>
     57c:	c3 fb       	bst	r28, 3
     57e:	66 27       	eor	r22, r22
     580:	60 f9       	bld	r22, 0
     582:	87 e0       	ldi	r24, 0x07	; 7
     584:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_WRITEPIN>
     588:	61 e0       	ldi	r22, 0x01	; 1
     58a:	83 e0       	ldi	r24, 0x03	; 3
     58c:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_WRITEPIN>
     590:	89 ef       	ldi	r24, 0xF9	; 249
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	01 97       	sbiw	r24, 0x01	; 1
     596:	f1 f7       	brne	.-4      	; 0x594 <LCD_WRITE_DATA+0xa8>
     598:	00 c0       	rjmp	.+0      	; 0x59a <LCD_WRITE_DATA+0xae>
     59a:	00 00       	nop
     59c:	60 e0       	ldi	r22, 0x00	; 0
     59e:	83 e0       	ldi	r24, 0x03	; 3
     5a0:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_WRITEPIN>
     5a4:	89 ef       	ldi	r24, 0xF9	; 249
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	01 97       	sbiw	r24, 0x01	; 1
     5aa:	f1 f7       	brne	.-4      	; 0x5a8 <LCD_WRITE_DATA+0xbc>
     5ac:	00 c0       	rjmp	.+0      	; 0x5ae <LCD_WRITE_DATA+0xc2>
     5ae:	00 00       	nop
     5b0:	cf 91       	pop	r28
     5b2:	08 95       	ret

000005b4 <LCD_INIT>:
     5b4:	60 e0       	ldi	r22, 0x00	; 0
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	0e 94 c1 03 	call	0x782	; 0x782 <DIO_INITPIN>
     5bc:	60 e0       	ldi	r22, 0x00	; 0
     5be:	82 e0       	ldi	r24, 0x02	; 2
     5c0:	0e 94 c1 03 	call	0x782	; 0x782 <DIO_INITPIN>
     5c4:	60 e0       	ldi	r22, 0x00	; 0
     5c6:	83 e0       	ldi	r24, 0x03	; 3
     5c8:	0e 94 c1 03 	call	0x782	; 0x782 <DIO_INITPIN>
     5cc:	60 e0       	ldi	r22, 0x00	; 0
     5ce:	84 e0       	ldi	r24, 0x04	; 4
     5d0:	0e 94 c1 03 	call	0x782	; 0x782 <DIO_INITPIN>
     5d4:	60 e0       	ldi	r22, 0x00	; 0
     5d6:	85 e0       	ldi	r24, 0x05	; 5
     5d8:	0e 94 c1 03 	call	0x782	; 0x782 <DIO_INITPIN>
     5dc:	60 e0       	ldi	r22, 0x00	; 0
     5de:	86 e0       	ldi	r24, 0x06	; 6
     5e0:	0e 94 c1 03 	call	0x782	; 0x782 <DIO_INITPIN>
     5e4:	60 e0       	ldi	r22, 0x00	; 0
     5e6:	87 e0       	ldi	r24, 0x07	; 7
     5e8:	0e 94 c1 03 	call	0x782	; 0x782 <DIO_INITPIN>
     5ec:	83 ed       	ldi	r24, 0xD3	; 211
     5ee:	90 e3       	ldi	r25, 0x30	; 48
     5f0:	01 97       	sbiw	r24, 0x01	; 1
     5f2:	f1 f7       	brne	.-4      	; 0x5f0 <LCD_INIT+0x3c>
     5f4:	00 c0       	rjmp	.+0      	; 0x5f6 <LCD_INIT+0x42>
     5f6:	00 00       	nop
     5f8:	82 e0       	ldi	r24, 0x02	; 2
     5fa:	0e 94 12 02 	call	0x424	; 0x424 <LCD_WRITE_COMMAND>
     5fe:	89 ef       	ldi	r24, 0xF9	; 249
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	01 97       	sbiw	r24, 0x01	; 1
     604:	f1 f7       	brne	.-4      	; 0x602 <LCD_INIT+0x4e>
     606:	00 c0       	rjmp	.+0      	; 0x608 <LCD_INIT+0x54>
     608:	00 00       	nop
     60a:	88 e2       	ldi	r24, 0x28	; 40
     60c:	0e 94 12 02 	call	0x424	; 0x424 <LCD_WRITE_COMMAND>
     610:	89 ef       	ldi	r24, 0xF9	; 249
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	01 97       	sbiw	r24, 0x01	; 1
     616:	f1 f7       	brne	.-4      	; 0x614 <LCD_INIT+0x60>
     618:	00 c0       	rjmp	.+0      	; 0x61a <LCD_INIT+0x66>
     61a:	00 00       	nop
     61c:	8c e0       	ldi	r24, 0x0C	; 12
     61e:	0e 94 12 02 	call	0x424	; 0x424 <LCD_WRITE_COMMAND>
     622:	89 ef       	ldi	r24, 0xF9	; 249
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	01 97       	sbiw	r24, 0x01	; 1
     628:	f1 f7       	brne	.-4      	; 0x626 <LCD_INIT+0x72>
     62a:	00 c0       	rjmp	.+0      	; 0x62c <LCD_INIT+0x78>
     62c:	00 00       	nop
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	0e 94 12 02 	call	0x424	; 0x424 <LCD_WRITE_COMMAND>
     634:	83 ef       	ldi	r24, 0xF3	; 243
     636:	91 e0       	ldi	r25, 0x01	; 1
     638:	01 97       	sbiw	r24, 0x01	; 1
     63a:	f1 f7       	brne	.-4      	; 0x638 <LCD_INIT+0x84>
     63c:	00 c0       	rjmp	.+0      	; 0x63e <LCD_INIT+0x8a>
     63e:	00 00       	nop
     640:	86 e0       	ldi	r24, 0x06	; 6
     642:	0e 94 12 02 	call	0x424	; 0x424 <LCD_WRITE_COMMAND>
     646:	89 ef       	ldi	r24, 0xF9	; 249
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	01 97       	sbiw	r24, 0x01	; 1
     64c:	f1 f7       	brne	.-4      	; 0x64a <LCD_INIT+0x96>
     64e:	00 c0       	rjmp	.+0      	; 0x650 <LCD_INIT+0x9c>
     650:	00 00       	nop
     652:	08 95       	ret

00000654 <LCD_Write_String>:
     654:	0f 93       	push	r16
     656:	1f 93       	push	r17
     658:	cf 93       	push	r28
     65a:	8c 01       	movw	r16, r24
     65c:	c0 e0       	ldi	r28, 0x00	; 0
     65e:	03 c0       	rjmp	.+6      	; 0x666 <LCD_Write_String+0x12>
     660:	0e 94 76 02 	call	0x4ec	; 0x4ec <LCD_WRITE_DATA>
     664:	cf 5f       	subi	r28, 0xFF	; 255
     666:	f8 01       	movw	r30, r16
     668:	ec 0f       	add	r30, r28
     66a:	f1 1d       	adc	r31, r1
     66c:	80 81       	ld	r24, Z
     66e:	81 11       	cpse	r24, r1
     670:	f7 cf       	rjmp	.-18     	; 0x660 <LCD_Write_String+0xc>
     672:	cf 91       	pop	r28
     674:	1f 91       	pop	r17
     676:	0f 91       	pop	r16
     678:	08 95       	ret

0000067a <LCD_Write_Number>:
     67a:	cf 92       	push	r12
     67c:	df 92       	push	r13
     67e:	ef 92       	push	r14
     680:	ff 92       	push	r15
     682:	1f 93       	push	r17
     684:	cf 93       	push	r28
     686:	df 93       	push	r29
     688:	cd b7       	in	r28, 0x3d	; 61
     68a:	de b7       	in	r29, 0x3e	; 62
     68c:	60 97       	sbiw	r28, 0x10	; 16
     68e:	0f b6       	in	r0, 0x3f	; 63
     690:	f8 94       	cli
     692:	de bf       	out	0x3e, r29	; 62
     694:	0f be       	out	0x3f, r0	; 63
     696:	cd bf       	out	0x3d, r28	; 61
     698:	6b 01       	movw	r12, r22
     69a:	7c 01       	movw	r14, r24
     69c:	67 2b       	or	r22, r23
     69e:	68 2b       	or	r22, r24
     6a0:	69 2b       	or	r22, r25
     6a2:	19 f4       	brne	.+6      	; 0x6aa <LCD_Write_Number+0x30>
     6a4:	80 e3       	ldi	r24, 0x30	; 48
     6a6:	0e 94 76 02 	call	0x4ec	; 0x4ec <LCD_WRITE_DATA>
     6aa:	10 e0       	ldi	r17, 0x00	; 0
     6ac:	15 c0       	rjmp	.+42     	; 0x6d8 <LCD_Write_Number+0x5e>
     6ae:	c7 01       	movw	r24, r14
     6b0:	b6 01       	movw	r22, r12
     6b2:	2a e0       	ldi	r18, 0x0A	; 10
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	40 e0       	ldi	r20, 0x00	; 0
     6b8:	50 e0       	ldi	r21, 0x00	; 0
     6ba:	0e 94 1a 09 	call	0x1234	; 0x1234 <__udivmodsi4>
     6be:	e1 e0       	ldi	r30, 0x01	; 1
     6c0:	f0 e0       	ldi	r31, 0x00	; 0
     6c2:	ec 0f       	add	r30, r28
     6c4:	fd 1f       	adc	r31, r29
     6c6:	e1 0f       	add	r30, r17
     6c8:	f1 1d       	adc	r31, r1
     6ca:	60 5d       	subi	r22, 0xD0	; 208
     6cc:	60 83       	st	Z, r22
     6ce:	1f 5f       	subi	r17, 0xFF	; 255
     6d0:	c2 2e       	mov	r12, r18
     6d2:	d3 2e       	mov	r13, r19
     6d4:	e4 2e       	mov	r14, r20
     6d6:	f5 2e       	mov	r15, r21
     6d8:	c1 14       	cp	r12, r1
     6da:	d1 04       	cpc	r13, r1
     6dc:	e1 04       	cpc	r14, r1
     6de:	f1 04       	cpc	r15, r1
     6e0:	31 f7       	brne	.-52     	; 0x6ae <LCD_Write_Number+0x34>
     6e2:	0d c0       	rjmp	.+26     	; 0x6fe <LCD_Write_Number+0x84>
     6e4:	e1 2f       	mov	r30, r17
     6e6:	f0 e0       	ldi	r31, 0x00	; 0
     6e8:	31 97       	sbiw	r30, 0x01	; 1
     6ea:	81 e0       	ldi	r24, 0x01	; 1
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	8c 0f       	add	r24, r28
     6f0:	9d 1f       	adc	r25, r29
     6f2:	e8 0f       	add	r30, r24
     6f4:	f9 1f       	adc	r31, r25
     6f6:	80 81       	ld	r24, Z
     6f8:	0e 94 76 02 	call	0x4ec	; 0x4ec <LCD_WRITE_DATA>
     6fc:	11 50       	subi	r17, 0x01	; 1
     6fe:	11 11       	cpse	r17, r1
     700:	f1 cf       	rjmp	.-30     	; 0x6e4 <LCD_Write_Number+0x6a>
     702:	60 96       	adiw	r28, 0x10	; 16
     704:	0f b6       	in	r0, 0x3f	; 63
     706:	f8 94       	cli
     708:	de bf       	out	0x3e, r29	; 62
     70a:	0f be       	out	0x3f, r0	; 63
     70c:	cd bf       	out	0x3d, r28	; 61
     70e:	df 91       	pop	r29
     710:	cf 91       	pop	r28
     712:	1f 91       	pop	r17
     714:	ff 90       	pop	r15
     716:	ef 90       	pop	r14
     718:	df 90       	pop	r13
     71a:	cf 90       	pop	r12
     71c:	08 95       	ret

0000071e <LCD_Clear>:
     71e:	81 e0       	ldi	r24, 0x01	; 1
     720:	0e 94 12 02 	call	0x424	; 0x424 <LCD_WRITE_COMMAND>
     724:	08 95       	ret

00000726 <LCD_GoTo>:
     726:	81 30       	cpi	r24, 0x01	; 1
     728:	29 f4       	brne	.+10     	; 0x734 <LCD_GoTo+0xe>
     72a:	80 e8       	ldi	r24, 0x80	; 128
     72c:	86 0f       	add	r24, r22
     72e:	0e 94 12 02 	call	0x424	; 0x424 <LCD_WRITE_COMMAND>
     732:	08 95       	ret
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	21 f4       	brne	.+8      	; 0x740 <LCD_GoTo+0x1a>
     738:	80 ec       	ldi	r24, 0xC0	; 192
     73a:	86 0f       	add	r24, r22
     73c:	0e 94 12 02 	call	0x424	; 0x424 <LCD_WRITE_COMMAND>
     740:	08 95       	ret

00000742 <LCD_Create_Charecter>:
/*****************************************************************************************/
/**DESCRIPTION
   This Function Is Used To Store New Charecter in The CGRAM Of The LCD
   **/
void LCD_Create_Charecter(uint8_t*a_Pattern,uint8_t a_Adress)
{
     742:	0f 93       	push	r16
     744:	1f 93       	push	r17
     746:	cf 93       	push	r28
     748:	8c 01       	movw	r16, r24
	uint8_t Index_I;
	LCD_WRITE_COMMAND(0x40+a_Adress*8);   //we multiply it by 8 to make it block addressable //
     74a:	86 2f       	mov	r24, r22
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	08 96       	adiw	r24, 0x08	; 8
     750:	88 0f       	add	r24, r24
     752:	88 0f       	add	r24, r24
     754:	88 0f       	add	r24, r24
     756:	0e 94 12 02 	call	0x424	; 0x424 <LCD_WRITE_COMMAND>
	
	for (Index_I=0;Index_I<8;Index_I++)
     75a:	c0 e0       	ldi	r28, 0x00	; 0
     75c:	07 c0       	rjmp	.+14     	; 0x76c <LCD_Create_Charecter+0x2a>
	{
		LCD_WRITE_DATA(a_Pattern[Index_I]);
     75e:	f8 01       	movw	r30, r16
     760:	ec 0f       	add	r30, r28
     762:	f1 1d       	adc	r31, r1
     764:	80 81       	ld	r24, Z
     766:	0e 94 76 02 	call	0x4ec	; 0x4ec <LCD_WRITE_DATA>
void LCD_Create_Charecter(uint8_t*a_Pattern,uint8_t a_Adress)
{
	uint8_t Index_I;
	LCD_WRITE_COMMAND(0x40+a_Adress*8);   //we multiply it by 8 to make it block addressable //
	
	for (Index_I=0;Index_I<8;Index_I++)
     76a:	cf 5f       	subi	r28, 0xFF	; 255
     76c:	c8 30       	cpi	r28, 0x08	; 8
     76e:	b8 f3       	brcs	.-18     	; 0x75e <LCD_Create_Charecter+0x1c>
	{
		LCD_WRITE_DATA(a_Pattern[Index_I]);
	}
	
}
     770:	cf 91       	pop	r28
     772:	1f 91       	pop	r17
     774:	0f 91       	pop	r16
     776:	08 95       	ret

00000778 <main>:

#include "APP/APP.h"

int main(void)
{
 app_Init();
     778:	0e 94 49 00 	call	0x92	; 0x92 <app_Init>
   while (1)
   {
	
		
	app_Start();
     77c:	0e 94 5b 00 	call	0xb6	; 0xb6 <app_Start>
     780:	fd cf       	rjmp	.-6      	; 0x77c <main+0x4>

00000782 <DIO_INITPIN>:
   */
DIO_ERROR_TYPE DIO_INITPIN(DIO_PIN_TYPE PIN,DIO_PINSTATUS_TYPE STATUS)
{
	DIO_PIN_TYPE PIN_NUM;
	DIO_PORT_TYPE PORT;
	PORT=PIN/8;                                  //to determine which port i'm using
     782:	98 2f       	mov	r25, r24
     784:	96 95       	lsr	r25
     786:	96 95       	lsr	r25
     788:	96 95       	lsr	r25
	PIN_NUM=PIN%8;                               //to determine which pin in the port i'm using 
     78a:	87 70       	andi	r24, 0x07	; 7
	DIO_ERROR_TYPE error=VALID_DIO;
	if(PORT>4)
     78c:	95 30       	cpi	r25, 0x05	; 5
     78e:	08 f0       	brcs	.+2      	; 0x792 <DIO_INITPIN+0x10>
     790:	f8 c0       	rjmp	.+496    	; 0x982 <__stack+0x123>
	{
		return INVALID_PIN_NUMBER;
	}
	else
	 {
	switch(STATUS)
     792:	61 30       	cpi	r22, 0x01	; 1
     794:	31 f0       	breq	.+12     	; 0x7a2 <DIO_INITPIN+0x20>
     796:	08 f4       	brcc	.+2      	; 0x79a <DIO_INITPIN+0x18>
     798:	a4 c0       	rjmp	.+328    	; 0x8e2 <__stack+0x83>
     79a:	62 30       	cpi	r22, 0x02	; 2
     79c:	09 f4       	brne	.+2      	; 0x7a0 <DIO_INITPIN+0x1e>
     79e:	51 c0       	rjmp	.+162    	; 0x842 <__DATA_REGION_LENGTH__+0x42>
     7a0:	ef c0       	rjmp	.+478    	; 0x980 <__stack+0x121>
	{
		case INFREE:
		switch(PORT)
     7a2:	91 30       	cpi	r25, 0x01	; 1
     7a4:	c1 f0       	breq	.+48     	; 0x7d6 <DIO_INITPIN+0x54>
     7a6:	28 f0       	brcs	.+10     	; 0x7b2 <DIO_INITPIN+0x30>
     7a8:	92 30       	cpi	r25, 0x02	; 2
     7aa:	39 f1       	breq	.+78     	; 0x7fa <DIO_INITPIN+0x78>
     7ac:	93 30       	cpi	r25, 0x03	; 3
     7ae:	b9 f1       	breq	.+110    	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
     7b0:	e7 c0       	rjmp	.+462    	; 0x980 <__stack+0x121>
		{
			case PA:
			clear_bit(DDRA,PIN_NUM);
     7b2:	4a b3       	in	r20, 0x1a	; 26
     7b4:	21 e0       	ldi	r18, 0x01	; 1
     7b6:	30 e0       	ldi	r19, 0x00	; 0
     7b8:	b9 01       	movw	r22, r18
     7ba:	02 c0       	rjmp	.+4      	; 0x7c0 <DIO_INITPIN+0x3e>
     7bc:	66 0f       	add	r22, r22
     7be:	77 1f       	adc	r23, r23
     7c0:	8a 95       	dec	r24
     7c2:	e2 f7       	brpl	.-8      	; 0x7bc <DIO_INITPIN+0x3a>
     7c4:	cb 01       	movw	r24, r22
     7c6:	80 95       	com	r24
     7c8:	94 2f       	mov	r25, r20
     7ca:	98 23       	and	r25, r24
     7cc:	9a bb       	out	0x1a, r25	; 26
			clear_bit(PORTA,PIN_NUM);       /*to make sure that the port register  is cleared in case of reuse*/
     7ce:	9b b3       	in	r25, 0x1b	; 27
     7d0:	89 23       	and	r24, r25
     7d2:	8b bb       	out	0x1b, r24	; 27
			break;
     7d4:	d5 c0       	rjmp	.+426    	; 0x980 <__stack+0x121>
			case PB:
			clear_bit(DDRB,PIN_NUM);
     7d6:	47 b3       	in	r20, 0x17	; 23
     7d8:	21 e0       	ldi	r18, 0x01	; 1
     7da:	30 e0       	ldi	r19, 0x00	; 0
     7dc:	b9 01       	movw	r22, r18
     7de:	02 c0       	rjmp	.+4      	; 0x7e4 <DIO_INITPIN+0x62>
     7e0:	66 0f       	add	r22, r22
     7e2:	77 1f       	adc	r23, r23
     7e4:	8a 95       	dec	r24
     7e6:	e2 f7       	brpl	.-8      	; 0x7e0 <DIO_INITPIN+0x5e>
     7e8:	cb 01       	movw	r24, r22
     7ea:	80 95       	com	r24
     7ec:	94 2f       	mov	r25, r20
     7ee:	98 23       	and	r25, r24
     7f0:	97 bb       	out	0x17, r25	; 23
			clear_bit(PORTB,PIN_NUM);
     7f2:	98 b3       	in	r25, 0x18	; 24
     7f4:	89 23       	and	r24, r25
     7f6:	88 bb       	out	0x18, r24	; 24
			break;
     7f8:	c3 c0       	rjmp	.+390    	; 0x980 <__stack+0x121>

			case PC:
			clear_bit(DDRC,PIN_NUM);
     7fa:	44 b3       	in	r20, 0x14	; 20
     7fc:	21 e0       	ldi	r18, 0x01	; 1
     7fe:	30 e0       	ldi	r19, 0x00	; 0
     800:	b9 01       	movw	r22, r18
     802:	02 c0       	rjmp	.+4      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
     804:	66 0f       	add	r22, r22
     806:	77 1f       	adc	r23, r23
     808:	8a 95       	dec	r24
     80a:	e2 f7       	brpl	.-8      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
     80c:	cb 01       	movw	r24, r22
     80e:	80 95       	com	r24
     810:	94 2f       	mov	r25, r20
     812:	98 23       	and	r25, r24
     814:	94 bb       	out	0x14, r25	; 20
			clear_bit(PORTC,PIN_NUM);
     816:	95 b3       	in	r25, 0x15	; 21
     818:	89 23       	and	r24, r25
     81a:	85 bb       	out	0x15, r24	; 21
			break;
     81c:	b1 c0       	rjmp	.+354    	; 0x980 <__stack+0x121>

			case PD:
			clear_bit(DDRD,PIN_NUM);
     81e:	41 b3       	in	r20, 0x11	; 17
     820:	21 e0       	ldi	r18, 0x01	; 1
     822:	30 e0       	ldi	r19, 0x00	; 0
     824:	b9 01       	movw	r22, r18
     826:	02 c0       	rjmp	.+4      	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
     828:	66 0f       	add	r22, r22
     82a:	77 1f       	adc	r23, r23
     82c:	8a 95       	dec	r24
     82e:	e2 f7       	brpl	.-8      	; 0x828 <__DATA_REGION_LENGTH__+0x28>
     830:	cb 01       	movw	r24, r22
     832:	80 95       	com	r24
     834:	94 2f       	mov	r25, r20
     836:	98 23       	and	r25, r24
     838:	91 bb       	out	0x11, r25	; 17
			clear_bit(PORTD,PIN_NUM);
     83a:	92 b3       	in	r25, 0x12	; 18
     83c:	89 23       	and	r24, r25
     83e:	82 bb       	out	0x12, r24	; 18
			break;
     840:	9f c0       	rjmp	.+318    	; 0x980 <__stack+0x121>
		}
		break;
		
		case INPLUP:
		switch(PORT)
     842:	91 30       	cpi	r25, 0x01	; 1
     844:	c1 f0       	breq	.+48     	; 0x876 <__stack+0x17>
     846:	28 f0       	brcs	.+10     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
     848:	92 30       	cpi	r25, 0x02	; 2
     84a:	39 f1       	breq	.+78     	; 0x89a <__stack+0x3b>
     84c:	93 30       	cpi	r25, 0x03	; 3
     84e:	b9 f1       	breq	.+110    	; 0x8be <__stack+0x5f>
     850:	97 c0       	rjmp	.+302    	; 0x980 <__stack+0x121>
		{
			case PA:
			clear_bit(DDRA,PIN_NUM);
     852:	4a b3       	in	r20, 0x1a	; 26
     854:	21 e0       	ldi	r18, 0x01	; 1
     856:	30 e0       	ldi	r19, 0x00	; 0
     858:	b9 01       	movw	r22, r18
     85a:	02 c0       	rjmp	.+4      	; 0x860 <__stack+0x1>
     85c:	66 0f       	add	r22, r22
     85e:	77 1f       	adc	r23, r23
     860:	8a 95       	dec	r24
     862:	e2 f7       	brpl	.-8      	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
     864:	cb 01       	movw	r24, r22
     866:	96 2f       	mov	r25, r22
     868:	90 95       	com	r25
     86a:	94 23       	and	r25, r20
     86c:	9a bb       	out	0x1a, r25	; 26
			set_bit(PORTA,PIN_NUM);
     86e:	9b b3       	in	r25, 0x1b	; 27
     870:	89 2b       	or	r24, r25
     872:	8b bb       	out	0x1b, r24	; 27
			break;
     874:	85 c0       	rjmp	.+266    	; 0x980 <__stack+0x121>
			
			case PB:
			clear_bit(DDRB,PIN_NUM);
     876:	47 b3       	in	r20, 0x17	; 23
     878:	21 e0       	ldi	r18, 0x01	; 1
     87a:	30 e0       	ldi	r19, 0x00	; 0
     87c:	b9 01       	movw	r22, r18
     87e:	02 c0       	rjmp	.+4      	; 0x884 <__stack+0x25>
     880:	66 0f       	add	r22, r22
     882:	77 1f       	adc	r23, r23
     884:	8a 95       	dec	r24
     886:	e2 f7       	brpl	.-8      	; 0x880 <__stack+0x21>
     888:	cb 01       	movw	r24, r22
     88a:	96 2f       	mov	r25, r22
     88c:	90 95       	com	r25
     88e:	94 23       	and	r25, r20
     890:	97 bb       	out	0x17, r25	; 23
			set_bit(PORTB,PIN_NUM);
     892:	98 b3       	in	r25, 0x18	; 24
     894:	89 2b       	or	r24, r25
     896:	88 bb       	out	0x18, r24	; 24
			break;
     898:	73 c0       	rjmp	.+230    	; 0x980 <__stack+0x121>

			case PC:
			clear_bit(DDRC,PIN_NUM);
     89a:	44 b3       	in	r20, 0x14	; 20
     89c:	21 e0       	ldi	r18, 0x01	; 1
     89e:	30 e0       	ldi	r19, 0x00	; 0
     8a0:	b9 01       	movw	r22, r18
     8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <__stack+0x49>
     8a4:	66 0f       	add	r22, r22
     8a6:	77 1f       	adc	r23, r23
     8a8:	8a 95       	dec	r24
     8aa:	e2 f7       	brpl	.-8      	; 0x8a4 <__stack+0x45>
     8ac:	cb 01       	movw	r24, r22
     8ae:	96 2f       	mov	r25, r22
     8b0:	90 95       	com	r25
     8b2:	94 23       	and	r25, r20
     8b4:	94 bb       	out	0x14, r25	; 20
			set_bit(PORTC,PIN_NUM);
     8b6:	95 b3       	in	r25, 0x15	; 21
     8b8:	89 2b       	or	r24, r25
     8ba:	85 bb       	out	0x15, r24	; 21
			break;
     8bc:	61 c0       	rjmp	.+194    	; 0x980 <__stack+0x121>

			case PD:
			clear_bit(DDRD,PIN_NUM);
     8be:	41 b3       	in	r20, 0x11	; 17
     8c0:	21 e0       	ldi	r18, 0x01	; 1
     8c2:	30 e0       	ldi	r19, 0x00	; 0
     8c4:	b9 01       	movw	r22, r18
     8c6:	02 c0       	rjmp	.+4      	; 0x8cc <__stack+0x6d>
     8c8:	66 0f       	add	r22, r22
     8ca:	77 1f       	adc	r23, r23
     8cc:	8a 95       	dec	r24
     8ce:	e2 f7       	brpl	.-8      	; 0x8c8 <__stack+0x69>
     8d0:	cb 01       	movw	r24, r22
     8d2:	96 2f       	mov	r25, r22
     8d4:	90 95       	com	r25
     8d6:	94 23       	and	r25, r20
     8d8:	91 bb       	out	0x11, r25	; 17
			set_bit(PORTD,PIN_NUM);
     8da:	92 b3       	in	r25, 0x12	; 18
     8dc:	89 2b       	or	r24, r25
     8de:	82 bb       	out	0x12, r24	; 18
			break;
     8e0:	4f c0       	rjmp	.+158    	; 0x980 <__stack+0x121>
		}
		break;
		return VALID_DIO;
		
		case OUTPUT:
		switch(PORT)
     8e2:	91 30       	cpi	r25, 0x01	; 1
     8e4:	c1 f0       	breq	.+48     	; 0x916 <__stack+0xb7>
     8e6:	28 f0       	brcs	.+10     	; 0x8f2 <__stack+0x93>
     8e8:	92 30       	cpi	r25, 0x02	; 2
     8ea:	39 f1       	breq	.+78     	; 0x93a <__stack+0xdb>
     8ec:	93 30       	cpi	r25, 0x03	; 3
     8ee:	b9 f1       	breq	.+110    	; 0x95e <__stack+0xff>
     8f0:	47 c0       	rjmp	.+142    	; 0x980 <__stack+0x121>
		{
			case PA:
			clear_bit(PORTA,PIN_NUM);
     8f2:	4b b3       	in	r20, 0x1b	; 27
     8f4:	21 e0       	ldi	r18, 0x01	; 1
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	b9 01       	movw	r22, r18
     8fa:	02 c0       	rjmp	.+4      	; 0x900 <__stack+0xa1>
     8fc:	66 0f       	add	r22, r22
     8fe:	77 1f       	adc	r23, r23
     900:	8a 95       	dec	r24
     902:	e2 f7       	brpl	.-8      	; 0x8fc <__stack+0x9d>
     904:	cb 01       	movw	r24, r22
     906:	96 2f       	mov	r25, r22
     908:	90 95       	com	r25
     90a:	94 23       	and	r25, r20
     90c:	9b bb       	out	0x1b, r25	; 27
			set_bit(DDRA,PIN_NUM);
     90e:	9a b3       	in	r25, 0x1a	; 26
     910:	89 2b       	or	r24, r25
     912:	8a bb       	out	0x1a, r24	; 26
			break;
     914:	35 c0       	rjmp	.+106    	; 0x980 <__stack+0x121>
			
			case PB:
			clear_bit(PORTB,PIN_NUM);
     916:	48 b3       	in	r20, 0x18	; 24
     918:	21 e0       	ldi	r18, 0x01	; 1
     91a:	30 e0       	ldi	r19, 0x00	; 0
     91c:	b9 01       	movw	r22, r18
     91e:	02 c0       	rjmp	.+4      	; 0x924 <__stack+0xc5>
     920:	66 0f       	add	r22, r22
     922:	77 1f       	adc	r23, r23
     924:	8a 95       	dec	r24
     926:	e2 f7       	brpl	.-8      	; 0x920 <__stack+0xc1>
     928:	cb 01       	movw	r24, r22
     92a:	96 2f       	mov	r25, r22
     92c:	90 95       	com	r25
     92e:	94 23       	and	r25, r20
     930:	98 bb       	out	0x18, r25	; 24
			set_bit(DDRB,PIN_NUM);
     932:	97 b3       	in	r25, 0x17	; 23
     934:	89 2b       	or	r24, r25
     936:	87 bb       	out	0x17, r24	; 23
			break;
     938:	23 c0       	rjmp	.+70     	; 0x980 <__stack+0x121>

			case PC:
			clear_bit(PORTC,PIN_NUM);
     93a:	45 b3       	in	r20, 0x15	; 21
     93c:	21 e0       	ldi	r18, 0x01	; 1
     93e:	30 e0       	ldi	r19, 0x00	; 0
     940:	b9 01       	movw	r22, r18
     942:	02 c0       	rjmp	.+4      	; 0x948 <__stack+0xe9>
     944:	66 0f       	add	r22, r22
     946:	77 1f       	adc	r23, r23
     948:	8a 95       	dec	r24
     94a:	e2 f7       	brpl	.-8      	; 0x944 <__stack+0xe5>
     94c:	cb 01       	movw	r24, r22
     94e:	96 2f       	mov	r25, r22
     950:	90 95       	com	r25
     952:	94 23       	and	r25, r20
     954:	95 bb       	out	0x15, r25	; 21
			set_bit(DDRC,PIN_NUM);
     956:	94 b3       	in	r25, 0x14	; 20
     958:	89 2b       	or	r24, r25
     95a:	84 bb       	out	0x14, r24	; 20
			break;
     95c:	11 c0       	rjmp	.+34     	; 0x980 <__stack+0x121>

			case PD:
			clear_bit(PORTD,PIN_NUM);
     95e:	42 b3       	in	r20, 0x12	; 18
     960:	21 e0       	ldi	r18, 0x01	; 1
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	b9 01       	movw	r22, r18
     966:	02 c0       	rjmp	.+4      	; 0x96c <__stack+0x10d>
     968:	66 0f       	add	r22, r22
     96a:	77 1f       	adc	r23, r23
     96c:	8a 95       	dec	r24
     96e:	e2 f7       	brpl	.-8      	; 0x968 <__stack+0x109>
     970:	cb 01       	movw	r24, r22
     972:	96 2f       	mov	r25, r22
     974:	90 95       	com	r25
     976:	94 23       	and	r25, r20
     978:	92 bb       	out	0x12, r25	; 18
			set_bit(DDRD,PIN_NUM);
     97a:	91 b3       	in	r25, 0x11	; 17
     97c:	89 2b       	or	r24, r25
     97e:	81 bb       	out	0x11, r24	; 17
		break;
		return VALID_DIO;

	}
		}
}
     980:	08 95       	ret
     982:	82 e0       	ldi	r24, 0x02	; 2
     984:	08 95       	ret

00000986 <DIO_WRITEPIN>:
DIO_ERROR_TYPE DIO_WRITEPIN(DIO_PIN_TYPE PIN,DIO_VOLTAGE_TYPE VOLTAGE)
{
	
	DIO_PIN_TYPE PIN_NUM;
	DIO_PORT_TYPE PORT;
	PORT=PIN/8;
     986:	98 2f       	mov	r25, r24
     988:	96 95       	lsr	r25
     98a:	96 95       	lsr	r25
     98c:	96 95       	lsr	r25
	PIN_NUM=PIN%8;
     98e:	87 70       	andi	r24, 0x07	; 7
	if(PORT>4)
     990:	95 30       	cpi	r25, 0x05	; 5
     992:	08 f0       	brcs	.+2      	; 0x996 <DIO_WRITEPIN+0x10>
     994:	8d c0       	rjmp	.+282    	; 0xab0 <DIO_WRITEPIN+0x12a>
	}
	else if(PIN_NUM>32)
	{
		return INVALID_PIN_NUMBER;
	}
	else if(VOLTAGE>2)
     996:	63 30       	cpi	r22, 0x03	; 3
     998:	08 f0       	brcs	.+2      	; 0x99c <DIO_WRITEPIN+0x16>
     99a:	8c c0       	rjmp	.+280    	; 0xab4 <DIO_WRITEPIN+0x12e>
		return INVALID_VOLTAGE;
	}
	else 
	{
	
	if(VOLTAGE==HIGH)
     99c:	61 30       	cpi	r22, 0x01	; 1
     99e:	09 f0       	breq	.+2      	; 0x9a2 <DIO_WRITEPIN+0x1c>
     9a0:	40 c0       	rjmp	.+128    	; 0xa22 <DIO_WRITEPIN+0x9c>
	{
		switch(PORT)
     9a2:	91 30       	cpi	r25, 0x01	; 1
     9a4:	a1 f0       	breq	.+40     	; 0x9ce <DIO_WRITEPIN+0x48>
     9a6:	28 f0       	brcs	.+10     	; 0x9b2 <DIO_WRITEPIN+0x2c>
     9a8:	92 30       	cpi	r25, 0x02	; 2
     9aa:	f9 f0       	breq	.+62     	; 0x9ea <DIO_WRITEPIN+0x64>
     9ac:	93 30       	cpi	r25, 0x03	; 3
     9ae:	59 f1       	breq	.+86     	; 0xa06 <DIO_WRITEPIN+0x80>
     9b0:	83 c0       	rjmp	.+262    	; 0xab8 <DIO_WRITEPIN+0x132>
		{
			case PA:
			set_bit(PORTA,PIN_NUM);
     9b2:	4b b3       	in	r20, 0x1b	; 27
     9b4:	21 e0       	ldi	r18, 0x01	; 1
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	b9 01       	movw	r22, r18
     9ba:	02 c0       	rjmp	.+4      	; 0x9c0 <DIO_WRITEPIN+0x3a>
     9bc:	66 0f       	add	r22, r22
     9be:	77 1f       	adc	r23, r23
     9c0:	8a 95       	dec	r24
     9c2:	e2 f7       	brpl	.-8      	; 0x9bc <DIO_WRITEPIN+0x36>
     9c4:	cb 01       	movw	r24, r22
     9c6:	84 2b       	or	r24, r20
     9c8:	8b bb       	out	0x1b, r24	; 27
			case PD:
			set_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
     9ca:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(PORT)
		{
			case PA:
			set_bit(PORTA,PIN_NUM);
			break;
     9cc:	08 95       	ret
			case PB:
			set_bit(PORTB,PIN_NUM);
     9ce:	48 b3       	in	r20, 0x18	; 24
     9d0:	21 e0       	ldi	r18, 0x01	; 1
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	b9 01       	movw	r22, r18
     9d6:	02 c0       	rjmp	.+4      	; 0x9dc <DIO_WRITEPIN+0x56>
     9d8:	66 0f       	add	r22, r22
     9da:	77 1f       	adc	r23, r23
     9dc:	8a 95       	dec	r24
     9de:	e2 f7       	brpl	.-8      	; 0x9d8 <DIO_WRITEPIN+0x52>
     9e0:	cb 01       	movw	r24, r22
     9e2:	84 2b       	or	r24, r20
     9e4:	88 bb       	out	0x18, r24	; 24
			case PD:
			set_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
     9e6:	80 e0       	ldi	r24, 0x00	; 0
			case PA:
			set_bit(PORTA,PIN_NUM);
			break;
			case PB:
			set_bit(PORTB,PIN_NUM);
			break;
     9e8:	08 95       	ret
			case PC:
			set_bit(PORTC,PIN_NUM);
     9ea:	45 b3       	in	r20, 0x15	; 21
     9ec:	21 e0       	ldi	r18, 0x01	; 1
     9ee:	30 e0       	ldi	r19, 0x00	; 0
     9f0:	b9 01       	movw	r22, r18
     9f2:	02 c0       	rjmp	.+4      	; 0x9f8 <DIO_WRITEPIN+0x72>
     9f4:	66 0f       	add	r22, r22
     9f6:	77 1f       	adc	r23, r23
     9f8:	8a 95       	dec	r24
     9fa:	e2 f7       	brpl	.-8      	; 0x9f4 <DIO_WRITEPIN+0x6e>
     9fc:	cb 01       	movw	r24, r22
     9fe:	84 2b       	or	r24, r20
     a00:	85 bb       	out	0x15, r24	; 21
			case PD:
			set_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
     a02:	80 e0       	ldi	r24, 0x00	; 0
			case PB:
			set_bit(PORTB,PIN_NUM);
			break;
			case PC:
			set_bit(PORTC,PIN_NUM);
			break;
     a04:	08 95       	ret
			case PD:
			set_bit(PORTD,PIN_NUM);
     a06:	42 b3       	in	r20, 0x12	; 18
     a08:	21 e0       	ldi	r18, 0x01	; 1
     a0a:	30 e0       	ldi	r19, 0x00	; 0
     a0c:	b9 01       	movw	r22, r18
     a0e:	02 c0       	rjmp	.+4      	; 0xa14 <DIO_WRITEPIN+0x8e>
     a10:	66 0f       	add	r22, r22
     a12:	77 1f       	adc	r23, r23
     a14:	8a 95       	dec	r24
     a16:	e2 f7       	brpl	.-8      	; 0xa10 <DIO_WRITEPIN+0x8a>
     a18:	cb 01       	movw	r24, r22
     a1a:	84 2b       	or	r24, r20
     a1c:	82 bb       	out	0x12, r24	; 18
			break;

		}
		return VALID_DIO;
     a1e:	80 e0       	ldi	r24, 0x00	; 0
			case PC:
			set_bit(PORTC,PIN_NUM);
			break;
			case PD:
			set_bit(PORTD,PIN_NUM);
			break;
     a20:	08 95       	ret
		}
		return VALID_DIO;
	}


	else if(VOLTAGE==LOW)
     a22:	61 11       	cpse	r22, r1
     a24:	44 c0       	rjmp	.+136    	; 0xaae <DIO_WRITEPIN+0x128>
	{
		switch(PORT)
     a26:	91 30       	cpi	r25, 0x01	; 1
     a28:	a9 f0       	breq	.+42     	; 0xa54 <DIO_WRITEPIN+0xce>
     a2a:	28 f0       	brcs	.+10     	; 0xa36 <DIO_WRITEPIN+0xb0>
     a2c:	92 30       	cpi	r25, 0x02	; 2
     a2e:	09 f1       	breq	.+66     	; 0xa72 <DIO_WRITEPIN+0xec>
     a30:	93 30       	cpi	r25, 0x03	; 3
     a32:	71 f1       	breq	.+92     	; 0xa90 <DIO_WRITEPIN+0x10a>
     a34:	43 c0       	rjmp	.+134    	; 0xabc <DIO_WRITEPIN+0x136>
		{
			case PA:
			clear_bit(PORTA,PIN_NUM);
     a36:	4b b3       	in	r20, 0x1b	; 27
     a38:	21 e0       	ldi	r18, 0x01	; 1
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	b9 01       	movw	r22, r18
     a3e:	02 c0       	rjmp	.+4      	; 0xa44 <DIO_WRITEPIN+0xbe>
     a40:	66 0f       	add	r22, r22
     a42:	77 1f       	adc	r23, r23
     a44:	8a 95       	dec	r24
     a46:	e2 f7       	brpl	.-8      	; 0xa40 <DIO_WRITEPIN+0xba>
     a48:	cb 01       	movw	r24, r22
     a4a:	80 95       	com	r24
     a4c:	84 23       	and	r24, r20
     a4e:	8b bb       	out	0x1b, r24	; 27
			case PD:
			clear_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
     a50:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(PORT)
		{
			case PA:
			clear_bit(PORTA,PIN_NUM);
			break;
     a52:	08 95       	ret
			case PB:
			clear_bit(PORTB,PIN_NUM);
     a54:	48 b3       	in	r20, 0x18	; 24
     a56:	21 e0       	ldi	r18, 0x01	; 1
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	b9 01       	movw	r22, r18
     a5c:	02 c0       	rjmp	.+4      	; 0xa62 <DIO_WRITEPIN+0xdc>
     a5e:	66 0f       	add	r22, r22
     a60:	77 1f       	adc	r23, r23
     a62:	8a 95       	dec	r24
     a64:	e2 f7       	brpl	.-8      	; 0xa5e <DIO_WRITEPIN+0xd8>
     a66:	cb 01       	movw	r24, r22
     a68:	80 95       	com	r24
     a6a:	84 23       	and	r24, r20
     a6c:	88 bb       	out	0x18, r24	; 24
			case PD:
			clear_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
     a6e:	80 e0       	ldi	r24, 0x00	; 0
			case PA:
			clear_bit(PORTA,PIN_NUM);
			break;
			case PB:
			clear_bit(PORTB,PIN_NUM);
			break;
     a70:	08 95       	ret
			case PC:
			clear_bit(PORTC,PIN_NUM);
     a72:	45 b3       	in	r20, 0x15	; 21
     a74:	21 e0       	ldi	r18, 0x01	; 1
     a76:	30 e0       	ldi	r19, 0x00	; 0
     a78:	b9 01       	movw	r22, r18
     a7a:	02 c0       	rjmp	.+4      	; 0xa80 <DIO_WRITEPIN+0xfa>
     a7c:	66 0f       	add	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	e2 f7       	brpl	.-8      	; 0xa7c <DIO_WRITEPIN+0xf6>
     a84:	cb 01       	movw	r24, r22
     a86:	80 95       	com	r24
     a88:	84 23       	and	r24, r20
     a8a:	85 bb       	out	0x15, r24	; 21
			case PD:
			clear_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
     a8c:	80 e0       	ldi	r24, 0x00	; 0
			case PB:
			clear_bit(PORTB,PIN_NUM);
			break;
			case PC:
			clear_bit(PORTC,PIN_NUM);
			break;
     a8e:	08 95       	ret
			case PD:
			clear_bit(PORTD,PIN_NUM);
     a90:	42 b3       	in	r20, 0x12	; 18
     a92:	21 e0       	ldi	r18, 0x01	; 1
     a94:	30 e0       	ldi	r19, 0x00	; 0
     a96:	b9 01       	movw	r22, r18
     a98:	02 c0       	rjmp	.+4      	; 0xa9e <DIO_WRITEPIN+0x118>
     a9a:	66 0f       	add	r22, r22
     a9c:	77 1f       	adc	r23, r23
     a9e:	8a 95       	dec	r24
     aa0:	e2 f7       	brpl	.-8      	; 0xa9a <DIO_WRITEPIN+0x114>
     aa2:	cb 01       	movw	r24, r22
     aa4:	80 95       	com	r24
     aa6:	84 23       	and	r24, r20
     aa8:	82 bb       	out	0x12, r24	; 18
			break;

		}
		return VALID_DIO;
     aaa:	80 e0       	ldi	r24, 0x00	; 0
			case PC:
			clear_bit(PORTC,PIN_NUM);
			break;
			case PD:
			clear_bit(PORTD,PIN_NUM);
			break;
     aac:	08 95       	ret

		}
		return VALID_DIO;
	}
}
}
     aae:	08 95       	ret
	DIO_PORT_TYPE PORT;
	PORT=PIN/8;
	PIN_NUM=PIN%8;
	if(PORT>4)
	{
		return INVALID_PORT;
     ab0:	82 e0       	ldi	r24, 0x02	; 2
     ab2:	08 95       	ret
	{
		return INVALID_PIN_NUMBER;
	}
	else if(VOLTAGE>2)
	{
		return INVALID_VOLTAGE;
     ab4:	83 e0       	ldi	r24, 0x03	; 3
     ab6:	08 95       	ret
			case PD:
			set_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	08 95       	ret
			case PD:
			clear_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
     abc:	80 e0       	ldi	r24, 0x00	; 0
	}
}
}
     abe:	08 95       	ret

00000ac0 <__vector_1>:
}
/*******************************************************ISR INT_0********************************************************/


ISR (INT0_vect)
{
     ac0:	1f 92       	push	r1
     ac2:	0f 92       	push	r0
     ac4:	0f b6       	in	r0, 0x3f	; 63
     ac6:	0f 92       	push	r0
     ac8:	11 24       	eor	r1, r1
     aca:	2f 93       	push	r18
     acc:	3f 93       	push	r19
     ace:	4f 93       	push	r20
     ad0:	5f 93       	push	r21
     ad2:	6f 93       	push	r22
     ad4:	7f 93       	push	r23
     ad6:	8f 93       	push	r24
     ad8:	9f 93       	push	r25
     ada:	af 93       	push	r26
     adc:	bf 93       	push	r27
     ade:	ef 93       	push	r30
     ae0:	ff 93       	push	r31
	car_flag = 0;
     ae2:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <__data_end>
	if (ptrf_INT_0 != NULL)
     ae6:	e0 91 0b 03 	lds	r30, 0x030B	; 0x80030b <ptrf_INT_0>
     aea:	f0 91 0c 03 	lds	r31, 0x030C	; 0x80030c <ptrf_INT_0+0x1>
     aee:	30 97       	sbiw	r30, 0x00	; 0
     af0:	89 f0       	breq	.+34     	; 0xb14 <__vector_1+0x54>
	{
		ptrf_INT_0();
     af2:	09 95       	icall
		
		DIO_WRITEPIN(pinc0,LOW);
     af4:	60 e0       	ldi	r22, 0x00	; 0
     af6:	80 e1       	ldi	r24, 0x10	; 16
     af8:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_WRITEPIN>
		DIO_WRITEPIN(pinc1,LOW);
     afc:	60 e0       	ldi	r22, 0x00	; 0
     afe:	81 e1       	ldi	r24, 0x11	; 17
     b00:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_WRITEPIN>
		DIO_WRITEPIN(pinc2,LOW);
     b04:	60 e0       	ldi	r22, 0x00	; 0
     b06:	82 e1       	ldi	r24, 0x12	; 18
     b08:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_WRITEPIN>
		DIO_WRITEPIN(pinc3,LOW);
     b0c:	60 e0       	ldi	r22, 0x00	; 0
     b0e:	83 e1       	ldi	r24, 0x13	; 19
     b10:	0e 94 c3 04 	call	0x986	; 0x986 <DIO_WRITEPIN>
		
	}
}
     b14:	ff 91       	pop	r31
     b16:	ef 91       	pop	r30
     b18:	bf 91       	pop	r27
     b1a:	af 91       	pop	r26
     b1c:	9f 91       	pop	r25
     b1e:	8f 91       	pop	r24
     b20:	7f 91       	pop	r23
     b22:	6f 91       	pop	r22
     b24:	5f 91       	pop	r21
     b26:	4f 91       	pop	r20
     b28:	3f 91       	pop	r19
     b2a:	2f 91       	pop	r18
     b2c:	0f 90       	pop	r0
     b2e:	0f be       	out	0x3f, r0	; 63
     b30:	0f 90       	pop	r0
     b32:	1f 90       	pop	r1
     b34:	18 95       	reti

00000b36 <__vector_2>:

ISR (INT1_vect)
{
     b36:	1f 92       	push	r1
     b38:	0f 92       	push	r0
     b3a:	0f b6       	in	r0, 0x3f	; 63
     b3c:	0f 92       	push	r0
     b3e:	11 24       	eor	r1, r1
     b40:	8f 93       	push	r24
	if (ptrf_INT_1 != NULL)
	{
		//ptrf_INT_1();
		
	}
	car_flag = 1 ;
     b42:	81 e0       	ldi	r24, 0x01	; 1
     b44:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <__data_end>
}
     b48:	8f 91       	pop	r24
     b4a:	0f 90       	pop	r0
     b4c:	0f be       	out	0x3f, r0	; 63
     b4e:	0f 90       	pop	r0
     b50:	1f 90       	pop	r1
     b52:	18 95       	reti

00000b54 <__vector_3>:

ISR (INT2_vect)
{
     b54:	1f 92       	push	r1
     b56:	0f 92       	push	r0
     b58:	0f b6       	in	r0, 0x3f	; 63
     b5a:	0f 92       	push	r0
     b5c:	11 24       	eor	r1, r1
     b5e:	2f 93       	push	r18
     b60:	3f 93       	push	r19
     b62:	4f 93       	push	r20
     b64:	5f 93       	push	r21
     b66:	6f 93       	push	r22
     b68:	7f 93       	push	r23
     b6a:	8f 93       	push	r24
     b6c:	9f 93       	push	r25
     b6e:	af 93       	push	r26
     b70:	bf 93       	push	r27
     b72:	ef 93       	push	r30
     b74:	ff 93       	push	r31
	if (ptrf_INT_2 != NULL)
     b76:	e0 91 09 03 	lds	r30, 0x0309	; 0x800309 <ptrf_INT_2>
     b7a:	f0 91 0a 03 	lds	r31, 0x030A	; 0x80030a <ptrf_INT_2+0x1>
     b7e:	30 97       	sbiw	r30, 0x00	; 0
     b80:	09 f0       	breq	.+2      	; 0xb84 <__vector_3+0x30>
	{
		ptrf_INT_2();
     b82:	09 95       	icall
	}
     b84:	ff 91       	pop	r31
     b86:	ef 91       	pop	r30
     b88:	bf 91       	pop	r27
     b8a:	af 91       	pop	r26
     b8c:	9f 91       	pop	r25
     b8e:	8f 91       	pop	r24
     b90:	7f 91       	pop	r23
     b92:	6f 91       	pop	r22
     b94:	5f 91       	pop	r21
     b96:	4f 91       	pop	r20
     b98:	3f 91       	pop	r19
     b9a:	2f 91       	pop	r18
     b9c:	0f 90       	pop	r0
     b9e:	0f be       	out	0x3f, r0	; 63
     ba0:	0f 90       	pop	r0
     ba2:	1f 90       	pop	r1
     ba4:	18 95       	reti

00000ba6 <TIMER_0_init>:
void TIMER_2_INT(){
	sei();
	set_bit(TIMSK,TOIE2);
	TIMER_2_init(NORMAL_MODE);
	TIMER_2_setIntialValue(0);
	TIMER_2_start(PRECALER_1);
     ba6:	81 30       	cpi	r24, 0x01	; 1
     ba8:	f1 f0       	breq	.+60     	; 0xbe6 <TIMER_0_init+0x40>
     baa:	28 f0       	brcs	.+10     	; 0xbb6 <TIMER_0_init+0x10>
     bac:	82 30       	cpi	r24, 0x02	; 2
     bae:	99 f0       	breq	.+38     	; 0xbd6 <TIMER_0_init+0x30>
     bb0:	83 30       	cpi	r24, 0x03	; 3
     bb2:	49 f0       	breq	.+18     	; 0xbc6 <TIMER_0_init+0x20>
     bb4:	20 c0       	rjmp	.+64     	; 0xbf6 <TIMER_0_init+0x50>
     bb6:	83 b7       	in	r24, 0x33	; 51
     bb8:	8f 7b       	andi	r24, 0xBF	; 191
     bba:	83 bf       	out	0x33, r24	; 51
     bbc:	83 b7       	in	r24, 0x33	; 51
     bbe:	87 7f       	andi	r24, 0xF7	; 247
     bc0:	83 bf       	out	0x33, r24	; 51
     bc2:	84 e0       	ldi	r24, 0x04	; 4
     bc4:	08 95       	ret
     bc6:	83 b7       	in	r24, 0x33	; 51
     bc8:	80 64       	ori	r24, 0x40	; 64
     bca:	83 bf       	out	0x33, r24	; 51
     bcc:	83 b7       	in	r24, 0x33	; 51
     bce:	87 7f       	andi	r24, 0xF7	; 247
     bd0:	83 bf       	out	0x33, r24	; 51
     bd2:	84 e0       	ldi	r24, 0x04	; 4
     bd4:	08 95       	ret
     bd6:	83 b7       	in	r24, 0x33	; 51
     bd8:	8f 7b       	andi	r24, 0xBF	; 191
     bda:	83 bf       	out	0x33, r24	; 51
     bdc:	83 b7       	in	r24, 0x33	; 51
     bde:	88 60       	ori	r24, 0x08	; 8
     be0:	83 bf       	out	0x33, r24	; 51
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	08 95       	ret
     be6:	83 b7       	in	r24, 0x33	; 51
     be8:	80 64       	ori	r24, 0x40	; 64
     bea:	83 bf       	out	0x33, r24	; 51
     bec:	83 b7       	in	r24, 0x33	; 51
     bee:	88 60       	ori	r24, 0x08	; 8
     bf0:	83 bf       	out	0x33, r24	; 51
     bf2:	84 e0       	ldi	r24, 0x04	; 4
     bf4:	08 95       	ret
     bf6:	81 e0       	ldi	r24, 0x01	; 1
     bf8:	08 95       	ret

00000bfa <TIMER_0_start>:
     bfa:	82 30       	cpi	r24, 0x02	; 2
     bfc:	09 f1       	breq	.+66     	; 0xc40 <TIMER_0_start+0x46>
     bfe:	28 f4       	brcc	.+10     	; 0xc0a <TIMER_0_start+0x10>
     c00:	88 23       	and	r24, r24
     c02:	41 f0       	breq	.+16     	; 0xc14 <TIMER_0_start+0x1a>
     c04:	81 30       	cpi	r24, 0x01	; 1
     c06:	89 f0       	breq	.+34     	; 0xc2a <TIMER_0_start+0x30>
     c08:	3c c0       	rjmp	.+120    	; 0xc82 <TIMER_0_start+0x88>
     c0a:	85 30       	cpi	r24, 0x05	; 5
     c0c:	21 f1       	breq	.+72     	; 0xc56 <TIMER_0_start+0x5c>
     c0e:	86 30       	cpi	r24, 0x06	; 6
     c10:	69 f1       	breq	.+90     	; 0xc6c <TIMER_0_start+0x72>
     c12:	37 c0       	rjmp	.+110    	; 0xc82 <TIMER_0_start+0x88>
     c14:	83 b7       	in	r24, 0x33	; 51
     c16:	81 60       	ori	r24, 0x01	; 1
     c18:	83 bf       	out	0x33, r24	; 51
     c1a:	83 b7       	in	r24, 0x33	; 51
     c1c:	8d 7f       	andi	r24, 0xFD	; 253
     c1e:	83 bf       	out	0x33, r24	; 51
     c20:	83 b7       	in	r24, 0x33	; 51
     c22:	8b 7f       	andi	r24, 0xFB	; 251
     c24:	83 bf       	out	0x33, r24	; 51
     c26:	84 e0       	ldi	r24, 0x04	; 4
     c28:	08 95       	ret
     c2a:	83 b7       	in	r24, 0x33	; 51
     c2c:	82 60       	ori	r24, 0x02	; 2
     c2e:	83 bf       	out	0x33, r24	; 51
     c30:	83 b7       	in	r24, 0x33	; 51
     c32:	8e 7f       	andi	r24, 0xFE	; 254
     c34:	83 bf       	out	0x33, r24	; 51
     c36:	83 b7       	in	r24, 0x33	; 51
     c38:	8b 7f       	andi	r24, 0xFB	; 251
     c3a:	83 bf       	out	0x33, r24	; 51
     c3c:	84 e0       	ldi	r24, 0x04	; 4
     c3e:	08 95       	ret
     c40:	83 b7       	in	r24, 0x33	; 51
     c42:	81 60       	ori	r24, 0x01	; 1
     c44:	83 bf       	out	0x33, r24	; 51
     c46:	83 b7       	in	r24, 0x33	; 51
     c48:	82 60       	ori	r24, 0x02	; 2
     c4a:	83 bf       	out	0x33, r24	; 51
     c4c:	83 b7       	in	r24, 0x33	; 51
     c4e:	8b 7f       	andi	r24, 0xFB	; 251
     c50:	83 bf       	out	0x33, r24	; 51
     c52:	84 e0       	ldi	r24, 0x04	; 4
     c54:	08 95       	ret
     c56:	83 b7       	in	r24, 0x33	; 51
     c58:	84 60       	ori	r24, 0x04	; 4
     c5a:	83 bf       	out	0x33, r24	; 51
     c5c:	83 b7       	in	r24, 0x33	; 51
     c5e:	8d 7f       	andi	r24, 0xFD	; 253
     c60:	83 bf       	out	0x33, r24	; 51
     c62:	83 b7       	in	r24, 0x33	; 51
     c64:	8e 7f       	andi	r24, 0xFE	; 254
     c66:	83 bf       	out	0x33, r24	; 51
     c68:	84 e0       	ldi	r24, 0x04	; 4
     c6a:	08 95       	ret
     c6c:	83 b7       	in	r24, 0x33	; 51
     c6e:	81 60       	ori	r24, 0x01	; 1
     c70:	83 bf       	out	0x33, r24	; 51
     c72:	83 b7       	in	r24, 0x33	; 51
     c74:	8d 7f       	andi	r24, 0xFD	; 253
     c76:	83 bf       	out	0x33, r24	; 51
     c78:	83 b7       	in	r24, 0x33	; 51
     c7a:	84 60       	ori	r24, 0x04	; 4
     c7c:	83 bf       	out	0x33, r24	; 51
     c7e:	84 e0       	ldi	r24, 0x04	; 4
     c80:	08 95       	ret
     c82:	80 e0       	ldi	r24, 0x00	; 0
     c84:	08 95       	ret

00000c86 <TIMER_0_setIntialValue>:
     c86:	cf 92       	push	r12
     c88:	df 92       	push	r13
     c8a:	ef 92       	push	r14
     c8c:	ff 92       	push	r15
     c8e:	6b 01       	movw	r12, r22
     c90:	7c 01       	movw	r14, r24
     c92:	20 e0       	ldi	r18, 0x00	; 0
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	40 e8       	ldi	r20, 0x80	; 128
     c98:	53 e4       	ldi	r21, 0x43	; 67
     c9a:	0e 94 b9 07 	call	0xf72	; 0xf72 <__cmpsf2>
     c9e:	88 23       	and	r24, r24
     ca0:	94 f4       	brge	.+36     	; 0xcc6 <TIMER_0_setIntialValue+0x40>
     ca2:	20 e0       	ldi	r18, 0x00	; 0
     ca4:	30 e0       	ldi	r19, 0x00	; 0
     ca6:	a9 01       	movw	r20, r18
     ca8:	c7 01       	movw	r24, r14
     caa:	b6 01       	movw	r22, r12
     cac:	0e 94 15 09 	call	0x122a	; 0x122a <__gesf2>
     cb0:	88 23       	and	r24, r24
     cb2:	5c f0       	brlt	.+22     	; 0xcca <TIMER_0_setIntialValue+0x44>
     cb4:	c7 01       	movw	r24, r14
     cb6:	b6 01       	movw	r22, r12
     cb8:	0e 94 a2 07 	call	0xf44	; 0xf44 <ceil>
     cbc:	0e 94 30 08 	call	0x1060	; 0x1060 <__fixunssfsi>
     cc0:	62 bf       	out	0x32, r22	; 50
     cc2:	84 e0       	ldi	r24, 0x04	; 4
     cc4:	03 c0       	rjmp	.+6      	; 0xccc <TIMER_0_setIntialValue+0x46>
     cc6:	83 e0       	ldi	r24, 0x03	; 3
     cc8:	01 c0       	rjmp	.+2      	; 0xccc <TIMER_0_setIntialValue+0x46>
     cca:	83 e0       	ldi	r24, 0x03	; 3
     ccc:	ff 90       	pop	r15
     cce:	ef 90       	pop	r14
     cd0:	df 90       	pop	r13
     cd2:	cf 90       	pop	r12
     cd4:	08 95       	ret

00000cd6 <TIMER_0_OvfNum>:
     cd6:	8f 92       	push	r8
     cd8:	9f 92       	push	r9
     cda:	af 92       	push	r10
     cdc:	bf 92       	push	r11
     cde:	cf 92       	push	r12
     ce0:	df 92       	push	r13
     ce2:	ef 92       	push	r14
     ce4:	ff 92       	push	r15
     ce6:	4b 01       	movw	r8, r22
     ce8:	5c 01       	movw	r10, r24
     cea:	20 e0       	ldi	r18, 0x00	; 0
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	a9 01       	movw	r20, r18
     cf0:	0e 94 15 09 	call	0x122a	; 0x122a <__gesf2>
     cf4:	18 16       	cp	r1, r24
     cf6:	94 f0       	brlt	.+36     	; 0xd1c <TIMER_0_OvfNum+0x46>
     cf8:	1e c0       	rjmp	.+60     	; 0xd36 <TIMER_0_OvfNum+0x60>
     cfa:	08 b6       	in	r0, 0x38	; 56
     cfc:	00 fe       	sbrs	r0, 0
     cfe:	fd cf       	rjmp	.-6      	; 0xcfa <TIMER_0_OvfNum+0x24>
     d00:	88 b7       	in	r24, 0x38	; 56
     d02:	81 60       	ori	r24, 0x01	; 1
     d04:	88 bf       	out	0x38, r24	; 56
     d06:	20 e0       	ldi	r18, 0x00	; 0
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	40 e8       	ldi	r20, 0x80	; 128
     d0c:	5f e3       	ldi	r21, 0x3F	; 63
     d0e:	c7 01       	movw	r24, r14
     d10:	b6 01       	movw	r22, r12
     d12:	0e 94 36 07 	call	0xe6c	; 0xe6c <__addsf3>
     d16:	6b 01       	movw	r12, r22
     d18:	7c 01       	movw	r14, r24
     d1a:	03 c0       	rjmp	.+6      	; 0xd22 <TIMER_0_OvfNum+0x4c>
     d1c:	c1 2c       	mov	r12, r1
     d1e:	d1 2c       	mov	r13, r1
     d20:	76 01       	movw	r14, r12
     d22:	a5 01       	movw	r20, r10
     d24:	94 01       	movw	r18, r8
     d26:	c7 01       	movw	r24, r14
     d28:	b6 01       	movw	r22, r12
     d2a:	0e 94 b9 07 	call	0xf72	; 0xf72 <__cmpsf2>
     d2e:	88 23       	and	r24, r24
     d30:	24 f3       	brlt	.-56     	; 0xcfa <TIMER_0_OvfNum+0x24>
     d32:	84 e0       	ldi	r24, 0x04	; 4
     d34:	2a c0       	rjmp	.+84     	; 0xd8a <TIMER_0_OvfNum+0xb4>
     d36:	20 e0       	ldi	r18, 0x00	; 0
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	a9 01       	movw	r20, r18
     d3c:	c5 01       	movw	r24, r10
     d3e:	b4 01       	movw	r22, r8
     d40:	0e 94 b9 07 	call	0xf72	; 0xf72 <__cmpsf2>
     d44:	18 16       	cp	r1, r24
     d46:	9c f4       	brge	.+38     	; 0xd6e <TIMER_0_OvfNum+0x98>
     d48:	82 e0       	ldi	r24, 0x02	; 2
     d4a:	1f c0       	rjmp	.+62     	; 0xd8a <TIMER_0_OvfNum+0xb4>
     d4c:	08 b6       	in	r0, 0x38	; 56
     d4e:	00 fe       	sbrs	r0, 0
     d50:	fd cf       	rjmp	.-6      	; 0xd4c <TIMER_0_OvfNum+0x76>
     d52:	88 b7       	in	r24, 0x38	; 56
     d54:	81 60       	ori	r24, 0x01	; 1
     d56:	88 bf       	out	0x38, r24	; 56
     d58:	20 e0       	ldi	r18, 0x00	; 0
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	40 e8       	ldi	r20, 0x80	; 128
     d5e:	5f e3       	ldi	r21, 0x3F	; 63
     d60:	c7 01       	movw	r24, r14
     d62:	b6 01       	movw	r22, r12
     d64:	0e 94 36 07 	call	0xe6c	; 0xe6c <__addsf3>
     d68:	6b 01       	movw	r12, r22
     d6a:	7c 01       	movw	r14, r24
     d6c:	03 c0       	rjmp	.+6      	; 0xd74 <TIMER_0_OvfNum+0x9e>
     d6e:	c1 2c       	mov	r12, r1
     d70:	d1 2c       	mov	r13, r1
     d72:	76 01       	movw	r14, r12
     d74:	20 e0       	ldi	r18, 0x00	; 0
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	40 e8       	ldi	r20, 0x80	; 128
     d7a:	5f e3       	ldi	r21, 0x3F	; 63
     d7c:	c7 01       	movw	r24, r14
     d7e:	b6 01       	movw	r22, r12
     d80:	0e 94 b9 07 	call	0xf72	; 0xf72 <__cmpsf2>
     d84:	88 23       	and	r24, r24
     d86:	14 f3       	brlt	.-60     	; 0xd4c <TIMER_0_OvfNum+0x76>
     d88:	84 e0       	ldi	r24, 0x04	; 4
     d8a:	ff 90       	pop	r15
     d8c:	ef 90       	pop	r14
     d8e:	df 90       	pop	r13
     d90:	cf 90       	pop	r12
     d92:	bf 90       	pop	r11
     d94:	af 90       	pop	r10
     d96:	9f 90       	pop	r9
     d98:	8f 90       	pop	r8
     d9a:	08 95       	ret

00000d9c <TIMER_0_DELAY_MS>:
     d9c:	20 e0       	ldi	r18, 0x00	; 0
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	4a e7       	ldi	r20, 0x7A	; 122
     da2:	54 e4       	ldi	r21, 0x44	; 68
     da4:	0e 94 be 07 	call	0xf7c	; 0xf7c <__divsf3>
     da8:	2d eb       	ldi	r18, 0xBD	; 189
     daa:	37 e3       	ldi	r19, 0x37	; 55
     dac:	46 e8       	ldi	r20, 0x86	; 134
     dae:	59 e3       	ldi	r21, 0x39	; 57
     db0:	0e 94 be 07 	call	0xf7c	; 0xf7c <__divsf3>
     db4:	0e 94 a2 07 	call	0xf44	; 0xf44 <ceil>
     db8:	60 93 11 03 	sts	0x0311, r22	; 0x800311 <g_ovfNum>
     dbc:	70 93 12 03 	sts	0x0312, r23	; 0x800312 <g_ovfNum+0x1>
     dc0:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <g_ovfNum+0x2>
     dc4:	90 93 14 03 	sts	0x0314, r25	; 0x800314 <g_ovfNum+0x3>
     dc8:	80 e0       	ldi	r24, 0x00	; 0
     dca:	0e 94 d3 05 	call	0xba6	; 0xba6 <TIMER_0_init>
     dce:	60 e0       	ldi	r22, 0x00	; 0
     dd0:	70 e0       	ldi	r23, 0x00	; 0
     dd2:	cb 01       	movw	r24, r22
     dd4:	0e 94 43 06 	call	0xc86	; 0xc86 <TIMER_0_setIntialValue>
     dd8:	80 e0       	ldi	r24, 0x00	; 0
     dda:	0e 94 fd 05 	call	0xbfa	; 0xbfa <TIMER_0_start>
     dde:	60 91 11 03 	lds	r22, 0x0311	; 0x800311 <g_ovfNum>
     de2:	70 91 12 03 	lds	r23, 0x0312	; 0x800312 <g_ovfNum+0x1>
     de6:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <g_ovfNum+0x2>
     dea:	90 91 14 03 	lds	r25, 0x0314	; 0x800314 <g_ovfNum+0x3>
     dee:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <TIMER_0_OvfNum>
     df2:	08 95       	ret

00000df4 <__vector_5>:
}




ISR(TIMER2_OVF){
     df4:	1f 92       	push	r1
     df6:	0f 92       	push	r0
     df8:	0f b6       	in	r0, 0x3f	; 63
     dfa:	0f 92       	push	r0
     dfc:	11 24       	eor	r1, r1
     dfe:	2f 93       	push	r18
     e00:	8f 93       	push	r24
     e02:	9f 93       	push	r25
     e04:	af 93       	push	r26
     e06:	bf 93       	push	r27

	if (ovf < 19532 ){
     e08:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <ovf>
     e0c:	90 91 0e 03 	lds	r25, 0x030E	; 0x80030e <ovf+0x1>
     e10:	a0 91 0f 03 	lds	r26, 0x030F	; 0x80030f <ovf+0x2>
     e14:	b0 91 10 03 	lds	r27, 0x0310	; 0x800310 <ovf+0x3>
     e18:	8c 34       	cpi	r24, 0x4C	; 76
     e1a:	2c e4       	ldi	r18, 0x4C	; 76
     e1c:	92 07       	cpc	r25, r18
     e1e:	a1 05       	cpc	r26, r1
     e20:	b1 05       	cpc	r27, r1
     e22:	64 f4       	brge	.+24     	; 0xe3c <__vector_5+0x48>
		ovf++;
     e24:	01 96       	adiw	r24, 0x01	; 1
     e26:	a1 1d       	adc	r26, r1
     e28:	b1 1d       	adc	r27, r1
     e2a:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <ovf>
     e2e:	90 93 0e 03 	sts	0x030E, r25	; 0x80030e <ovf+0x1>
     e32:	a0 93 0f 03 	sts	0x030F, r26	; 0x80030f <ovf+0x2>
     e36:	b0 93 10 03 	sts	0x0310, r27	; 0x800310 <ovf+0x3>
     e3a:	0d c0       	rjmp	.+26     	; 0xe56 <__vector_5+0x62>
	}
	else if ( ovf == 19532){
     e3c:	8c 34       	cpi	r24, 0x4C	; 76
     e3e:	9c 44       	sbci	r25, 0x4C	; 76
     e40:	a1 05       	cpc	r26, r1
     e42:	b1 05       	cpc	r27, r1
     e44:	41 f4       	brne	.+16     	; 0xe56 <__vector_5+0x62>
		ovf =0 ;
     e46:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <ovf>
     e4a:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <ovf+0x1>
     e4e:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <ovf+0x2>
     e52:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <ovf+0x3>
	
	
}


     e56:	bf 91       	pop	r27
     e58:	af 91       	pop	r26
     e5a:	9f 91       	pop	r25
     e5c:	8f 91       	pop	r24
     e5e:	2f 91       	pop	r18
     e60:	0f 90       	pop	r0
     e62:	0f be       	out	0x3f, r0	; 63
     e64:	0f 90       	pop	r0
     e66:	1f 90       	pop	r1
     e68:	18 95       	reti

00000e6a <__subsf3>:
     e6a:	50 58       	subi	r21, 0x80	; 128

00000e6c <__addsf3>:
     e6c:	bb 27       	eor	r27, r27
     e6e:	aa 27       	eor	r26, r26
     e70:	0e 94 4d 07 	call	0xe9a	; 0xe9a <__addsf3x>
     e74:	0c 94 c3 08 	jmp	0x1186	; 0x1186 <__fp_round>
     e78:	0e 94 b5 08 	call	0x116a	; 0x116a <__fp_pscA>
     e7c:	38 f0       	brcs	.+14     	; 0xe8c <__addsf3+0x20>
     e7e:	0e 94 bc 08 	call	0x1178	; 0x1178 <__fp_pscB>
     e82:	20 f0       	brcs	.+8      	; 0xe8c <__addsf3+0x20>
     e84:	39 f4       	brne	.+14     	; 0xe94 <__addsf3+0x28>
     e86:	9f 3f       	cpi	r25, 0xFF	; 255
     e88:	19 f4       	brne	.+6      	; 0xe90 <__addsf3+0x24>
     e8a:	26 f4       	brtc	.+8      	; 0xe94 <__addsf3+0x28>
     e8c:	0c 94 b2 08 	jmp	0x1164	; 0x1164 <__fp_nan>
     e90:	0e f4       	brtc	.+2      	; 0xe94 <__addsf3+0x28>
     e92:	e0 95       	com	r30
     e94:	e7 fb       	bst	r30, 7
     e96:	0c 94 83 08 	jmp	0x1106	; 0x1106 <__fp_inf>

00000e9a <__addsf3x>:
     e9a:	e9 2f       	mov	r30, r25
     e9c:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <__fp_split3>
     ea0:	58 f3       	brcs	.-42     	; 0xe78 <__addsf3+0xc>
     ea2:	ba 17       	cp	r27, r26
     ea4:	62 07       	cpc	r22, r18
     ea6:	73 07       	cpc	r23, r19
     ea8:	84 07       	cpc	r24, r20
     eaa:	95 07       	cpc	r25, r21
     eac:	20 f0       	brcs	.+8      	; 0xeb6 <__addsf3x+0x1c>
     eae:	79 f4       	brne	.+30     	; 0xece <__addsf3x+0x34>
     eb0:	a6 f5       	brtc	.+104    	; 0xf1a <__addsf3x+0x80>
     eb2:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__fp_zero>
     eb6:	0e f4       	brtc	.+2      	; 0xeba <__addsf3x+0x20>
     eb8:	e0 95       	com	r30
     eba:	0b 2e       	mov	r0, r27
     ebc:	ba 2f       	mov	r27, r26
     ebe:	a0 2d       	mov	r26, r0
     ec0:	0b 01       	movw	r0, r22
     ec2:	b9 01       	movw	r22, r18
     ec4:	90 01       	movw	r18, r0
     ec6:	0c 01       	movw	r0, r24
     ec8:	ca 01       	movw	r24, r20
     eca:	a0 01       	movw	r20, r0
     ecc:	11 24       	eor	r1, r1
     ece:	ff 27       	eor	r31, r31
     ed0:	59 1b       	sub	r21, r25
     ed2:	99 f0       	breq	.+38     	; 0xefa <__addsf3x+0x60>
     ed4:	59 3f       	cpi	r21, 0xF9	; 249
     ed6:	50 f4       	brcc	.+20     	; 0xeec <__addsf3x+0x52>
     ed8:	50 3e       	cpi	r21, 0xE0	; 224
     eda:	68 f1       	brcs	.+90     	; 0xf36 <__addsf3x+0x9c>
     edc:	1a 16       	cp	r1, r26
     ede:	f0 40       	sbci	r31, 0x00	; 0
     ee0:	a2 2f       	mov	r26, r18
     ee2:	23 2f       	mov	r18, r19
     ee4:	34 2f       	mov	r19, r20
     ee6:	44 27       	eor	r20, r20
     ee8:	58 5f       	subi	r21, 0xF8	; 248
     eea:	f3 cf       	rjmp	.-26     	; 0xed2 <__addsf3x+0x38>
     eec:	46 95       	lsr	r20
     eee:	37 95       	ror	r19
     ef0:	27 95       	ror	r18
     ef2:	a7 95       	ror	r26
     ef4:	f0 40       	sbci	r31, 0x00	; 0
     ef6:	53 95       	inc	r21
     ef8:	c9 f7       	brne	.-14     	; 0xeec <__addsf3x+0x52>
     efa:	7e f4       	brtc	.+30     	; 0xf1a <__addsf3x+0x80>
     efc:	1f 16       	cp	r1, r31
     efe:	ba 0b       	sbc	r27, r26
     f00:	62 0b       	sbc	r22, r18
     f02:	73 0b       	sbc	r23, r19
     f04:	84 0b       	sbc	r24, r20
     f06:	ba f0       	brmi	.+46     	; 0xf36 <__addsf3x+0x9c>
     f08:	91 50       	subi	r25, 0x01	; 1
     f0a:	a1 f0       	breq	.+40     	; 0xf34 <__addsf3x+0x9a>
     f0c:	ff 0f       	add	r31, r31
     f0e:	bb 1f       	adc	r27, r27
     f10:	66 1f       	adc	r22, r22
     f12:	77 1f       	adc	r23, r23
     f14:	88 1f       	adc	r24, r24
     f16:	c2 f7       	brpl	.-16     	; 0xf08 <__addsf3x+0x6e>
     f18:	0e c0       	rjmp	.+28     	; 0xf36 <__addsf3x+0x9c>
     f1a:	ba 0f       	add	r27, r26
     f1c:	62 1f       	adc	r22, r18
     f1e:	73 1f       	adc	r23, r19
     f20:	84 1f       	adc	r24, r20
     f22:	48 f4       	brcc	.+18     	; 0xf36 <__addsf3x+0x9c>
     f24:	87 95       	ror	r24
     f26:	77 95       	ror	r23
     f28:	67 95       	ror	r22
     f2a:	b7 95       	ror	r27
     f2c:	f7 95       	ror	r31
     f2e:	9e 3f       	cpi	r25, 0xFE	; 254
     f30:	08 f0       	brcs	.+2      	; 0xf34 <__addsf3x+0x9a>
     f32:	b0 cf       	rjmp	.-160    	; 0xe94 <__addsf3+0x28>
     f34:	93 95       	inc	r25
     f36:	88 0f       	add	r24, r24
     f38:	08 f0       	brcs	.+2      	; 0xf3c <__addsf3x+0xa2>
     f3a:	99 27       	eor	r25, r25
     f3c:	ee 0f       	add	r30, r30
     f3e:	97 95       	ror	r25
     f40:	87 95       	ror	r24
     f42:	08 95       	ret

00000f44 <ceil>:
     f44:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__fp_trunc>
     f48:	90 f0       	brcs	.+36     	; 0xf6e <ceil+0x2a>
     f4a:	9f 37       	cpi	r25, 0x7F	; 127
     f4c:	48 f4       	brcc	.+18     	; 0xf60 <ceil+0x1c>
     f4e:	91 11       	cpse	r25, r1
     f50:	16 f4       	brtc	.+4      	; 0xf56 <ceil+0x12>
     f52:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__fp_szero>
     f56:	60 e0       	ldi	r22, 0x00	; 0
     f58:	70 e0       	ldi	r23, 0x00	; 0
     f5a:	80 e8       	ldi	r24, 0x80	; 128
     f5c:	9f e3       	ldi	r25, 0x3F	; 63
     f5e:	08 95       	ret
     f60:	26 f0       	brts	.+8      	; 0xf6a <ceil+0x26>
     f62:	1b 16       	cp	r1, r27
     f64:	61 1d       	adc	r22, r1
     f66:	71 1d       	adc	r23, r1
     f68:	81 1d       	adc	r24, r1
     f6a:	0c 94 89 08 	jmp	0x1112	; 0x1112 <__fp_mintl>
     f6e:	0c 94 a4 08 	jmp	0x1148	; 0x1148 <__fp_mpack>

00000f72 <__cmpsf2>:
     f72:	0e 94 5f 08 	call	0x10be	; 0x10be <__fp_cmp>
     f76:	08 f4       	brcc	.+2      	; 0xf7a <__cmpsf2+0x8>
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	08 95       	ret

00000f7c <__divsf3>:
     f7c:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__divsf3x>
     f80:	0c 94 c3 08 	jmp	0x1186	; 0x1186 <__fp_round>
     f84:	0e 94 bc 08 	call	0x1178	; 0x1178 <__fp_pscB>
     f88:	58 f0       	brcs	.+22     	; 0xfa0 <__divsf3+0x24>
     f8a:	0e 94 b5 08 	call	0x116a	; 0x116a <__fp_pscA>
     f8e:	40 f0       	brcs	.+16     	; 0xfa0 <__divsf3+0x24>
     f90:	29 f4       	brne	.+10     	; 0xf9c <__divsf3+0x20>
     f92:	5f 3f       	cpi	r21, 0xFF	; 255
     f94:	29 f0       	breq	.+10     	; 0xfa0 <__divsf3+0x24>
     f96:	0c 94 83 08 	jmp	0x1106	; 0x1106 <__fp_inf>
     f9a:	51 11       	cpse	r21, r1
     f9c:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__fp_szero>
     fa0:	0c 94 b2 08 	jmp	0x1164	; 0x1164 <__fp_nan>

00000fa4 <__divsf3x>:
     fa4:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <__fp_split3>
     fa8:	68 f3       	brcs	.-38     	; 0xf84 <__divsf3+0x8>

00000faa <__divsf3_pse>:
     faa:	99 23       	and	r25, r25
     fac:	b1 f3       	breq	.-20     	; 0xf9a <__divsf3+0x1e>
     fae:	55 23       	and	r21, r21
     fb0:	91 f3       	breq	.-28     	; 0xf96 <__divsf3+0x1a>
     fb2:	95 1b       	sub	r25, r21
     fb4:	55 0b       	sbc	r21, r21
     fb6:	bb 27       	eor	r27, r27
     fb8:	aa 27       	eor	r26, r26
     fba:	62 17       	cp	r22, r18
     fbc:	73 07       	cpc	r23, r19
     fbe:	84 07       	cpc	r24, r20
     fc0:	38 f0       	brcs	.+14     	; 0xfd0 <__divsf3_pse+0x26>
     fc2:	9f 5f       	subi	r25, 0xFF	; 255
     fc4:	5f 4f       	sbci	r21, 0xFF	; 255
     fc6:	22 0f       	add	r18, r18
     fc8:	33 1f       	adc	r19, r19
     fca:	44 1f       	adc	r20, r20
     fcc:	aa 1f       	adc	r26, r26
     fce:	a9 f3       	breq	.-22     	; 0xfba <__divsf3_pse+0x10>
     fd0:	35 d0       	rcall	.+106    	; 0x103c <__divsf3_pse+0x92>
     fd2:	0e 2e       	mov	r0, r30
     fd4:	3a f0       	brmi	.+14     	; 0xfe4 <__divsf3_pse+0x3a>
     fd6:	e0 e8       	ldi	r30, 0x80	; 128
     fd8:	32 d0       	rcall	.+100    	; 0x103e <__divsf3_pse+0x94>
     fda:	91 50       	subi	r25, 0x01	; 1
     fdc:	50 40       	sbci	r21, 0x00	; 0
     fde:	e6 95       	lsr	r30
     fe0:	00 1c       	adc	r0, r0
     fe2:	ca f7       	brpl	.-14     	; 0xfd6 <__divsf3_pse+0x2c>
     fe4:	2b d0       	rcall	.+86     	; 0x103c <__divsf3_pse+0x92>
     fe6:	fe 2f       	mov	r31, r30
     fe8:	29 d0       	rcall	.+82     	; 0x103c <__divsf3_pse+0x92>
     fea:	66 0f       	add	r22, r22
     fec:	77 1f       	adc	r23, r23
     fee:	88 1f       	adc	r24, r24
     ff0:	bb 1f       	adc	r27, r27
     ff2:	26 17       	cp	r18, r22
     ff4:	37 07       	cpc	r19, r23
     ff6:	48 07       	cpc	r20, r24
     ff8:	ab 07       	cpc	r26, r27
     ffa:	b0 e8       	ldi	r27, 0x80	; 128
     ffc:	09 f0       	breq	.+2      	; 0x1000 <__divsf3_pse+0x56>
     ffe:	bb 0b       	sbc	r27, r27
    1000:	80 2d       	mov	r24, r0
    1002:	bf 01       	movw	r22, r30
    1004:	ff 27       	eor	r31, r31
    1006:	93 58       	subi	r25, 0x83	; 131
    1008:	5f 4f       	sbci	r21, 0xFF	; 255
    100a:	3a f0       	brmi	.+14     	; 0x101a <__divsf3_pse+0x70>
    100c:	9e 3f       	cpi	r25, 0xFE	; 254
    100e:	51 05       	cpc	r21, r1
    1010:	78 f0       	brcs	.+30     	; 0x1030 <__divsf3_pse+0x86>
    1012:	0c 94 83 08 	jmp	0x1106	; 0x1106 <__fp_inf>
    1016:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__fp_szero>
    101a:	5f 3f       	cpi	r21, 0xFF	; 255
    101c:	e4 f3       	brlt	.-8      	; 0x1016 <__divsf3_pse+0x6c>
    101e:	98 3e       	cpi	r25, 0xE8	; 232
    1020:	d4 f3       	brlt	.-12     	; 0x1016 <__divsf3_pse+0x6c>
    1022:	86 95       	lsr	r24
    1024:	77 95       	ror	r23
    1026:	67 95       	ror	r22
    1028:	b7 95       	ror	r27
    102a:	f7 95       	ror	r31
    102c:	9f 5f       	subi	r25, 0xFF	; 255
    102e:	c9 f7       	brne	.-14     	; 0x1022 <__divsf3_pse+0x78>
    1030:	88 0f       	add	r24, r24
    1032:	91 1d       	adc	r25, r1
    1034:	96 95       	lsr	r25
    1036:	87 95       	ror	r24
    1038:	97 f9       	bld	r25, 7
    103a:	08 95       	ret
    103c:	e1 e0       	ldi	r30, 0x01	; 1
    103e:	66 0f       	add	r22, r22
    1040:	77 1f       	adc	r23, r23
    1042:	88 1f       	adc	r24, r24
    1044:	bb 1f       	adc	r27, r27
    1046:	62 17       	cp	r22, r18
    1048:	73 07       	cpc	r23, r19
    104a:	84 07       	cpc	r24, r20
    104c:	ba 07       	cpc	r27, r26
    104e:	20 f0       	brcs	.+8      	; 0x1058 <__divsf3_pse+0xae>
    1050:	62 1b       	sub	r22, r18
    1052:	73 0b       	sbc	r23, r19
    1054:	84 0b       	sbc	r24, r20
    1056:	ba 0b       	sbc	r27, r26
    1058:	ee 1f       	adc	r30, r30
    105a:	88 f7       	brcc	.-30     	; 0x103e <__divsf3_pse+0x94>
    105c:	e0 95       	com	r30
    105e:	08 95       	ret

00001060 <__fixunssfsi>:
    1060:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <__fp_splitA>
    1064:	88 f0       	brcs	.+34     	; 0x1088 <__fixunssfsi+0x28>
    1066:	9f 57       	subi	r25, 0x7F	; 127
    1068:	98 f0       	brcs	.+38     	; 0x1090 <__fixunssfsi+0x30>
    106a:	b9 2f       	mov	r27, r25
    106c:	99 27       	eor	r25, r25
    106e:	b7 51       	subi	r27, 0x17	; 23
    1070:	b0 f0       	brcs	.+44     	; 0x109e <__fixunssfsi+0x3e>
    1072:	e1 f0       	breq	.+56     	; 0x10ac <__fixunssfsi+0x4c>
    1074:	66 0f       	add	r22, r22
    1076:	77 1f       	adc	r23, r23
    1078:	88 1f       	adc	r24, r24
    107a:	99 1f       	adc	r25, r25
    107c:	1a f0       	brmi	.+6      	; 0x1084 <__fixunssfsi+0x24>
    107e:	ba 95       	dec	r27
    1080:	c9 f7       	brne	.-14     	; 0x1074 <__fixunssfsi+0x14>
    1082:	14 c0       	rjmp	.+40     	; 0x10ac <__fixunssfsi+0x4c>
    1084:	b1 30       	cpi	r27, 0x01	; 1
    1086:	91 f0       	breq	.+36     	; 0x10ac <__fixunssfsi+0x4c>
    1088:	0e 94 0e 09 	call	0x121c	; 0x121c <__fp_zero>
    108c:	b1 e0       	ldi	r27, 0x01	; 1
    108e:	08 95       	ret
    1090:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__fp_zero>
    1094:	67 2f       	mov	r22, r23
    1096:	78 2f       	mov	r23, r24
    1098:	88 27       	eor	r24, r24
    109a:	b8 5f       	subi	r27, 0xF8	; 248
    109c:	39 f0       	breq	.+14     	; 0x10ac <__fixunssfsi+0x4c>
    109e:	b9 3f       	cpi	r27, 0xF9	; 249
    10a0:	cc f3       	brlt	.-14     	; 0x1094 <__fixunssfsi+0x34>
    10a2:	86 95       	lsr	r24
    10a4:	77 95       	ror	r23
    10a6:	67 95       	ror	r22
    10a8:	b3 95       	inc	r27
    10aa:	d9 f7       	brne	.-10     	; 0x10a2 <__fixunssfsi+0x42>
    10ac:	3e f4       	brtc	.+14     	; 0x10bc <__fixunssfsi+0x5c>
    10ae:	90 95       	com	r25
    10b0:	80 95       	com	r24
    10b2:	70 95       	com	r23
    10b4:	61 95       	neg	r22
    10b6:	7f 4f       	sbci	r23, 0xFF	; 255
    10b8:	8f 4f       	sbci	r24, 0xFF	; 255
    10ba:	9f 4f       	sbci	r25, 0xFF	; 255
    10bc:	08 95       	ret

000010be <__fp_cmp>:
    10be:	99 0f       	add	r25, r25
    10c0:	00 08       	sbc	r0, r0
    10c2:	55 0f       	add	r21, r21
    10c4:	aa 0b       	sbc	r26, r26
    10c6:	e0 e8       	ldi	r30, 0x80	; 128
    10c8:	fe ef       	ldi	r31, 0xFE	; 254
    10ca:	16 16       	cp	r1, r22
    10cc:	17 06       	cpc	r1, r23
    10ce:	e8 07       	cpc	r30, r24
    10d0:	f9 07       	cpc	r31, r25
    10d2:	c0 f0       	brcs	.+48     	; 0x1104 <__fp_cmp+0x46>
    10d4:	12 16       	cp	r1, r18
    10d6:	13 06       	cpc	r1, r19
    10d8:	e4 07       	cpc	r30, r20
    10da:	f5 07       	cpc	r31, r21
    10dc:	98 f0       	brcs	.+38     	; 0x1104 <__fp_cmp+0x46>
    10de:	62 1b       	sub	r22, r18
    10e0:	73 0b       	sbc	r23, r19
    10e2:	84 0b       	sbc	r24, r20
    10e4:	95 0b       	sbc	r25, r21
    10e6:	39 f4       	brne	.+14     	; 0x10f6 <__fp_cmp+0x38>
    10e8:	0a 26       	eor	r0, r26
    10ea:	61 f0       	breq	.+24     	; 0x1104 <__fp_cmp+0x46>
    10ec:	23 2b       	or	r18, r19
    10ee:	24 2b       	or	r18, r20
    10f0:	25 2b       	or	r18, r21
    10f2:	21 f4       	brne	.+8      	; 0x10fc <__fp_cmp+0x3e>
    10f4:	08 95       	ret
    10f6:	0a 26       	eor	r0, r26
    10f8:	09 f4       	brne	.+2      	; 0x10fc <__fp_cmp+0x3e>
    10fa:	a1 40       	sbci	r26, 0x01	; 1
    10fc:	a6 95       	lsr	r26
    10fe:	8f ef       	ldi	r24, 0xFF	; 255
    1100:	81 1d       	adc	r24, r1
    1102:	81 1d       	adc	r24, r1
    1104:	08 95       	ret

00001106 <__fp_inf>:
    1106:	97 f9       	bld	r25, 7
    1108:	9f 67       	ori	r25, 0x7F	; 127
    110a:	80 e8       	ldi	r24, 0x80	; 128
    110c:	70 e0       	ldi	r23, 0x00	; 0
    110e:	60 e0       	ldi	r22, 0x00	; 0
    1110:	08 95       	ret

00001112 <__fp_mintl>:
    1112:	88 23       	and	r24, r24
    1114:	71 f4       	brne	.+28     	; 0x1132 <__fp_mintl+0x20>
    1116:	77 23       	and	r23, r23
    1118:	21 f0       	breq	.+8      	; 0x1122 <__fp_mintl+0x10>
    111a:	98 50       	subi	r25, 0x08	; 8
    111c:	87 2b       	or	r24, r23
    111e:	76 2f       	mov	r23, r22
    1120:	07 c0       	rjmp	.+14     	; 0x1130 <__fp_mintl+0x1e>
    1122:	66 23       	and	r22, r22
    1124:	11 f4       	brne	.+4      	; 0x112a <__fp_mintl+0x18>
    1126:	99 27       	eor	r25, r25
    1128:	0d c0       	rjmp	.+26     	; 0x1144 <__fp_mintl+0x32>
    112a:	90 51       	subi	r25, 0x10	; 16
    112c:	86 2b       	or	r24, r22
    112e:	70 e0       	ldi	r23, 0x00	; 0
    1130:	60 e0       	ldi	r22, 0x00	; 0
    1132:	2a f0       	brmi	.+10     	; 0x113e <__fp_mintl+0x2c>
    1134:	9a 95       	dec	r25
    1136:	66 0f       	add	r22, r22
    1138:	77 1f       	adc	r23, r23
    113a:	88 1f       	adc	r24, r24
    113c:	da f7       	brpl	.-10     	; 0x1134 <__fp_mintl+0x22>
    113e:	88 0f       	add	r24, r24
    1140:	96 95       	lsr	r25
    1142:	87 95       	ror	r24
    1144:	97 f9       	bld	r25, 7
    1146:	08 95       	ret

00001148 <__fp_mpack>:
    1148:	9f 3f       	cpi	r25, 0xFF	; 255
    114a:	31 f0       	breq	.+12     	; 0x1158 <__fp_mpack_finite+0xc>

0000114c <__fp_mpack_finite>:
    114c:	91 50       	subi	r25, 0x01	; 1
    114e:	20 f4       	brcc	.+8      	; 0x1158 <__fp_mpack_finite+0xc>
    1150:	87 95       	ror	r24
    1152:	77 95       	ror	r23
    1154:	67 95       	ror	r22
    1156:	b7 95       	ror	r27
    1158:	88 0f       	add	r24, r24
    115a:	91 1d       	adc	r25, r1
    115c:	96 95       	lsr	r25
    115e:	87 95       	ror	r24
    1160:	97 f9       	bld	r25, 7
    1162:	08 95       	ret

00001164 <__fp_nan>:
    1164:	9f ef       	ldi	r25, 0xFF	; 255
    1166:	80 ec       	ldi	r24, 0xC0	; 192
    1168:	08 95       	ret

0000116a <__fp_pscA>:
    116a:	00 24       	eor	r0, r0
    116c:	0a 94       	dec	r0
    116e:	16 16       	cp	r1, r22
    1170:	17 06       	cpc	r1, r23
    1172:	18 06       	cpc	r1, r24
    1174:	09 06       	cpc	r0, r25
    1176:	08 95       	ret

00001178 <__fp_pscB>:
    1178:	00 24       	eor	r0, r0
    117a:	0a 94       	dec	r0
    117c:	12 16       	cp	r1, r18
    117e:	13 06       	cpc	r1, r19
    1180:	14 06       	cpc	r1, r20
    1182:	05 06       	cpc	r0, r21
    1184:	08 95       	ret

00001186 <__fp_round>:
    1186:	09 2e       	mov	r0, r25
    1188:	03 94       	inc	r0
    118a:	00 0c       	add	r0, r0
    118c:	11 f4       	brne	.+4      	; 0x1192 <__fp_round+0xc>
    118e:	88 23       	and	r24, r24
    1190:	52 f0       	brmi	.+20     	; 0x11a6 <__fp_round+0x20>
    1192:	bb 0f       	add	r27, r27
    1194:	40 f4       	brcc	.+16     	; 0x11a6 <__fp_round+0x20>
    1196:	bf 2b       	or	r27, r31
    1198:	11 f4       	brne	.+4      	; 0x119e <__fp_round+0x18>
    119a:	60 ff       	sbrs	r22, 0
    119c:	04 c0       	rjmp	.+8      	; 0x11a6 <__fp_round+0x20>
    119e:	6f 5f       	subi	r22, 0xFF	; 255
    11a0:	7f 4f       	sbci	r23, 0xFF	; 255
    11a2:	8f 4f       	sbci	r24, 0xFF	; 255
    11a4:	9f 4f       	sbci	r25, 0xFF	; 255
    11a6:	08 95       	ret

000011a8 <__fp_split3>:
    11a8:	57 fd       	sbrc	r21, 7
    11aa:	90 58       	subi	r25, 0x80	; 128
    11ac:	44 0f       	add	r20, r20
    11ae:	55 1f       	adc	r21, r21
    11b0:	59 f0       	breq	.+22     	; 0x11c8 <__fp_splitA+0x10>
    11b2:	5f 3f       	cpi	r21, 0xFF	; 255
    11b4:	71 f0       	breq	.+28     	; 0x11d2 <__fp_splitA+0x1a>
    11b6:	47 95       	ror	r20

000011b8 <__fp_splitA>:
    11b8:	88 0f       	add	r24, r24
    11ba:	97 fb       	bst	r25, 7
    11bc:	99 1f       	adc	r25, r25
    11be:	61 f0       	breq	.+24     	; 0x11d8 <__fp_splitA+0x20>
    11c0:	9f 3f       	cpi	r25, 0xFF	; 255
    11c2:	79 f0       	breq	.+30     	; 0x11e2 <__fp_splitA+0x2a>
    11c4:	87 95       	ror	r24
    11c6:	08 95       	ret
    11c8:	12 16       	cp	r1, r18
    11ca:	13 06       	cpc	r1, r19
    11cc:	14 06       	cpc	r1, r20
    11ce:	55 1f       	adc	r21, r21
    11d0:	f2 cf       	rjmp	.-28     	; 0x11b6 <__fp_split3+0xe>
    11d2:	46 95       	lsr	r20
    11d4:	f1 df       	rcall	.-30     	; 0x11b8 <__fp_splitA>
    11d6:	08 c0       	rjmp	.+16     	; 0x11e8 <__fp_splitA+0x30>
    11d8:	16 16       	cp	r1, r22
    11da:	17 06       	cpc	r1, r23
    11dc:	18 06       	cpc	r1, r24
    11de:	99 1f       	adc	r25, r25
    11e0:	f1 cf       	rjmp	.-30     	; 0x11c4 <__fp_splitA+0xc>
    11e2:	86 95       	lsr	r24
    11e4:	71 05       	cpc	r23, r1
    11e6:	61 05       	cpc	r22, r1
    11e8:	08 94       	sec
    11ea:	08 95       	ret

000011ec <__fp_trunc>:
    11ec:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <__fp_splitA>
    11f0:	a0 f0       	brcs	.+40     	; 0x121a <__fp_trunc+0x2e>
    11f2:	be e7       	ldi	r27, 0x7E	; 126
    11f4:	b9 17       	cp	r27, r25
    11f6:	88 f4       	brcc	.+34     	; 0x121a <__fp_trunc+0x2e>
    11f8:	bb 27       	eor	r27, r27
    11fa:	9f 38       	cpi	r25, 0x8F	; 143
    11fc:	60 f4       	brcc	.+24     	; 0x1216 <__fp_trunc+0x2a>
    11fe:	16 16       	cp	r1, r22
    1200:	b1 1d       	adc	r27, r1
    1202:	67 2f       	mov	r22, r23
    1204:	78 2f       	mov	r23, r24
    1206:	88 27       	eor	r24, r24
    1208:	98 5f       	subi	r25, 0xF8	; 248
    120a:	f7 cf       	rjmp	.-18     	; 0x11fa <__fp_trunc+0xe>
    120c:	86 95       	lsr	r24
    120e:	77 95       	ror	r23
    1210:	67 95       	ror	r22
    1212:	b1 1d       	adc	r27, r1
    1214:	93 95       	inc	r25
    1216:	96 39       	cpi	r25, 0x96	; 150
    1218:	c8 f3       	brcs	.-14     	; 0x120c <__fp_trunc+0x20>
    121a:	08 95       	ret

0000121c <__fp_zero>:
    121c:	e8 94       	clt

0000121e <__fp_szero>:
    121e:	bb 27       	eor	r27, r27
    1220:	66 27       	eor	r22, r22
    1222:	77 27       	eor	r23, r23
    1224:	cb 01       	movw	r24, r22
    1226:	97 f9       	bld	r25, 7
    1228:	08 95       	ret

0000122a <__gesf2>:
    122a:	0e 94 5f 08 	call	0x10be	; 0x10be <__fp_cmp>
    122e:	08 f4       	brcc	.+2      	; 0x1232 <__gesf2+0x8>
    1230:	8f ef       	ldi	r24, 0xFF	; 255
    1232:	08 95       	ret

00001234 <__udivmodsi4>:
    1234:	a1 e2       	ldi	r26, 0x21	; 33
    1236:	1a 2e       	mov	r1, r26
    1238:	aa 1b       	sub	r26, r26
    123a:	bb 1b       	sub	r27, r27
    123c:	fd 01       	movw	r30, r26
    123e:	0d c0       	rjmp	.+26     	; 0x125a <__udivmodsi4_ep>

00001240 <__udivmodsi4_loop>:
    1240:	aa 1f       	adc	r26, r26
    1242:	bb 1f       	adc	r27, r27
    1244:	ee 1f       	adc	r30, r30
    1246:	ff 1f       	adc	r31, r31
    1248:	a2 17       	cp	r26, r18
    124a:	b3 07       	cpc	r27, r19
    124c:	e4 07       	cpc	r30, r20
    124e:	f5 07       	cpc	r31, r21
    1250:	20 f0       	brcs	.+8      	; 0x125a <__udivmodsi4_ep>
    1252:	a2 1b       	sub	r26, r18
    1254:	b3 0b       	sbc	r27, r19
    1256:	e4 0b       	sbc	r30, r20
    1258:	f5 0b       	sbc	r31, r21

0000125a <__udivmodsi4_ep>:
    125a:	66 1f       	adc	r22, r22
    125c:	77 1f       	adc	r23, r23
    125e:	88 1f       	adc	r24, r24
    1260:	99 1f       	adc	r25, r25
    1262:	1a 94       	dec	r1
    1264:	69 f7       	brne	.-38     	; 0x1240 <__udivmodsi4_loop>
    1266:	60 95       	com	r22
    1268:	70 95       	com	r23
    126a:	80 95       	com	r24
    126c:	90 95       	com	r25
    126e:	9b 01       	movw	r18, r22
    1270:	ac 01       	movw	r20, r24
    1272:	bd 01       	movw	r22, r26
    1274:	cf 01       	movw	r24, r30
    1276:	08 95       	ret

00001278 <_exit>:
    1278:	f8 94       	cli

0000127a <__stop_program>:
    127a:	ff cf       	rjmp	.-2      	; 0x127a <__stop_program>
