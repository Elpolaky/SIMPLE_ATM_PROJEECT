
ATM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000210a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002c6  00800060  0000210a  0000219e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002c  00800326  00800326  00002464  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002464  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000024c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f0  00000000  00000000  000024fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003b89  00000000  00000000  000027ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000118e  00000000  00000000  00006375  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002073  00000000  00000000  00007503  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000072c  00000000  00000000  00009578  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ede  00000000  00000000  00009ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000023f0  00000000  00000000  0000ab82  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000298  00000000  00000000  0000cf72  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
       4:	0c 94 29 09 	jmp	0x1252	; 0x1252 <__vector_1>
       8:	0c 94 52 09 	jmp	0x12a4	; 0x12a4 <__vector_2>
       c:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <__vector_3>
      10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      14:	0c 94 bb 0b 	jmp	0x1776	; 0x1776 <__vector_5>
      18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      54:	ae 09       	sbc	r26, r14
      56:	b8 09       	sbc	r27, r8
      58:	c2 09       	sbc	r28, r2
      5a:	cc 09       	sbc	r28, r12
      5c:	d6 09       	sbc	r29, r6
      5e:	e0 09       	sbc	r30, r0
      60:	ea 09       	sbc	r30, r10
      62:	5e 0b       	sbc	r21, r30
      64:	69 0b       	sbc	r22, r25
      66:	7f 0b       	sbc	r23, r31
      68:	74 0b       	sbc	r23, r20
      6a:	8a 0b       	sbc	r24, r26
      6c:	95 0b       	sbc	r25, r21
      6e:	a0 0b       	sbc	r26, r16

00000070 <__trampolines_end>:
      70:	4e 41       	sbci	r20, 0x1E	; 30
      72:	4e 49       	Address 0x00000072 is out of bounds.
.word	0xffff	; ????

00000073 <pstr_inity>:
      73:	49 4e 49 54 59                                      INITY

00000078 <pstr_inf>:
      78:	49 4e 46                                            INF

0000007b <pwr_m10>:
      7b:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      8b:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000093 <pwr_p10>:
      93:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      a3:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

000000ac <__ctors_end>:
      ac:	11 24       	eor	r1, r1
      ae:	1f be       	out	0x3f, r1	; 63
      b0:	cf e5       	ldi	r28, 0x5F	; 95
      b2:	d8 e0       	ldi	r29, 0x08	; 8
      b4:	de bf       	out	0x3e, r29	; 62
      b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
      b8:	13 e0       	ldi	r17, 0x03	; 3
      ba:	a0 e6       	ldi	r26, 0x60	; 96
      bc:	b0 e0       	ldi	r27, 0x00	; 0
      be:	ea e0       	ldi	r30, 0x0A	; 10
      c0:	f1 e2       	ldi	r31, 0x21	; 33
      c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
      c4:	05 90       	lpm	r0, Z+
      c6:	0d 92       	st	X+, r0
      c8:	a6 32       	cpi	r26, 0x26	; 38
      ca:	b1 07       	cpc	r27, r17
      cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
      ce:	23 e0       	ldi	r18, 0x03	; 3
      d0:	a6 e2       	ldi	r26, 0x26	; 38
      d2:	b3 e0       	ldi	r27, 0x03	; 3
      d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
      d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
      d8:	a2 35       	cpi	r26, 0x52	; 82
      da:	b2 07       	cpc	r27, r18
      dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
      de:	0e 94 aa 06 	call	0xd54	; 0xd54 <main>
      e2:	0c 94 83 10 	jmp	0x2106	; 0x2106 <_exit>

000000e6 <__bad_interrupt>:
      e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <set_sage>:
/*DESCRIPTION :-
	- used for the call back function of interrupt 0
	- used to set stage flag to the PIN_Entery stage
*/
void set_sage(){
	Stage_flag = PIN_ENTRY_STAGE ;
      ea:	83 e0       	ldi	r24, 0x03	; 3
      ec:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <Stage_flag>
      f0:	08 95       	ret

000000f2 <app_Init>:
                                   FUNCTION IMPLMENTATION
************************************************************************************************************************/


void app_Init(void){
	SPI_SlaveInit(PRESCALER_16);	
      f2:	83 e0       	ldi	r24, 0x03	; 3
      f4:	0e 94 8a 09 	call	0x1314	; 0x1314 <SPI_SlaveInit>
	DIO_INITPIN(pind2,INPLUP);
      f8:	62 e0       	ldi	r22, 0x02	; 2
      fa:	8a e1       	ldi	r24, 0x1A	; 26
      fc:	0e 94 af 06 	call	0xd5e	; 0xd5e <DIO_INITPIN>
	EXI_Enable(EXT_INT_0);
     100:	80 e0       	ldi	r24, 0x00	; 0
     102:	0e 94 9a 08 	call	0x1134	; 0x1134 <EXI_Enable>
	EXI_Trigger(EXT_INT_0,ANY_LOGIC_CHANGE);
     106:	61 e0       	ldi	r22, 0x01	; 1
     108:	80 e0       	ldi	r24, 0x00	; 0
     10a:	0e 94 be 08 	call	0x117c	; 0x117c <EXI_Trigger>
	EXI_SetCallBack(EXT_INT_0,set_sage);
     10e:	65 e7       	ldi	r22, 0x75	; 117
     110:	70 e0       	ldi	r23, 0x00	; 0
     112:	80 e0       	ldi	r24, 0x00	; 0
     114:	0e 94 1a 09 	call	0x1234	; 0x1234 <EXI_SetCallBack>
	KEYPAD_init();
     118:	0e 94 1c 04 	call	0x838	; 0x838 <KEYPAD_init>
	LCD_INIT();
     11c:	0e 94 c5 05 	call	0xb8a	; 0xb8a <LCD_INIT>
	buzzer_init();
     120:	0e 94 0d 04 	call	0x81a	; 0x81a <buzzer_init>
	TIMER_0_init(NORMAL_MODE);
     124:	80 e0       	ldi	r24, 0x00	; 0
     126:	0e 94 00 0a 	call	0x1400	; 0x1400 <TIMER_0_init>
	DIO_INITPIN(BUTTON_PIN,INFREE);
     12a:	61 e0       	ldi	r22, 0x01	; 1
     12c:	8a e0       	ldi	r24, 0x0A	; 10
     12e:	0e 94 af 06 	call	0xd5e	; 0xd5e <DIO_INITPIN>
	DIO_INITPIN(pinb3,OUTPUT);
     132:	60 e0       	ldi	r22, 0x00	; 0
     134:	8b e0       	ldi	r24, 0x0B	; 11
     136:	0e 94 af 06 	call	0xd5e	; 0xd5e <DIO_INITPIN>
	TIMER_2_INT();
     13a:	0e 94 ad 0b 	call	0x175a	; 0x175a <TIMER_2_INT>
     13e:	08 95       	ret

00000140 <welcome>:

/*DESCRIPTION :-
	- used to display welcome message	
*/
void welcome(void){
	LCD_Write_String(" WELCOME TO ATM ");
     140:	8d e2       	ldi	r24, 0x2D	; 45
     142:	92 e0       	ldi	r25, 0x02	; 2
     144:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Write_String>
	TIMER_0_DELAY_MS(1000);
     148:	60 e0       	ldi	r22, 0x00	; 0
     14a:	70 e0       	ldi	r23, 0x00	; 0
     14c:	8a e7       	ldi	r24, 0x7A	; 122
     14e:	94 e4       	ldi	r25, 0x44	; 68
     150:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <TIMER_0_DELAY_MS>
	Stage_flag = INSERTION_STAGE ;
     154:	82 e0       	ldi	r24, 0x02	; 2
     156:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <Stage_flag>
     15a:	08 95       	ret

0000015c <insertion>:
/*DESCRIPTION :-
	- used to display a message to the user to insert the card 
*/
void insertion(void){
	
	LCD_GoTo(1,0);
     15c:	60 e0       	ldi	r22, 0x00	; 0
     15e:	81 e0       	ldi	r24, 0x01	; 1
     160:	0e 94 7e 06 	call	0xcfc	; 0xcfc <LCD_GoTo>
	LCD_Write_String("INSERT YOUR CARD");
     164:	8e e3       	ldi	r24, 0x3E	; 62
     166:	92 e0       	ldi	r25, 0x02	; 2
     168:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Write_String>
     16c:	08 95       	ret

0000016e <PIN_Entery>:
	- used to enter pin 
	- if user entered more than 4 numbers it will go to the next stage (PIN_Check) with status of incorrect pin
	- if user entered less than or equal to 4 numbers and then pressed enter it will go to the next stage to check if it is correct or not
*/
void PIN_Entery (void)
{
     16e:	1f 93       	push	r17
     170:	cf 93       	push	r28
     172:	df 93       	push	r29
	// start receiving data 
	uint8_t index = 0;
     174:	10 e0       	ldi	r17, 0x00	; 0
	while (1)
	{
		if (SPI_RecievePeriodicChecking(&pan[index]))
     176:	c1 2f       	mov	r28, r17
     178:	d0 e0       	ldi	r29, 0x00	; 0
     17a:	ce 01       	movw	r24, r28
     17c:	8a 5d       	subi	r24, 0xDA	; 218
     17e:	9c 4f       	sbci	r25, 0xFC	; 252
     180:	0e 94 f5 09 	call	0x13ea	; 0x13ea <SPI_RecievePeriodicChecking>
     184:	88 23       	and	r24, r24
     186:	b9 f3       	breq	.-18     	; 0x176 <PIN_Entery+0x8>
		{
			if (pan[index] == '\0')
     188:	fe 01       	movw	r30, r28
     18a:	ea 5d       	subi	r30, 0xDA	; 218
     18c:	fc 4f       	sbci	r31, 0xFC	; 252
     18e:	80 81       	ld	r24, Z
     190:	81 11       	cpse	r24, r1
     192:	25 c0       	rjmp	.+74     	; 0x1de <PIN_Entery+0x70>
			{
				pan[index] = '\0';
     194:	10 82       	st	Z, r1
			
		}
		
	}
	
	LCD_Clear();
     196:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <LCD_Clear>
	LCD_Write_String(pan);
     19a:	86 e2       	ldi	r24, 0x26	; 38
     19c:	93 e0       	ldi	r25, 0x03	; 3
     19e:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Write_String>
	TIMER_0_DELAY_MS(3000);
     1a2:	60 e0       	ldi	r22, 0x00	; 0
     1a4:	70 e8       	ldi	r23, 0x80	; 128
     1a6:	8b e3       	ldi	r24, 0x3B	; 59
     1a8:	95 e4       	ldi	r25, 0x45	; 69
     1aa:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <TIMER_0_DELAY_MS>
	
	
		uint8_t key ;
		DIO_READPIN(BUTTON_PIN,&state);
     1ae:	6b e4       	ldi	r22, 0x4B	; 75
     1b0:	73 e0       	ldi	r23, 0x03	; 3
     1b2:	8a e0       	ldi	r24, 0x0A	; 10
     1b4:	0e 94 4e 08 	call	0x109c	; 0x109c <DIO_READPIN>
	
				LCD_Clear();
     1b8:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <LCD_Clear>
				LCD_GoTo(1,1);
     1bc:	61 e0       	ldi	r22, 0x01	; 1
     1be:	81 e0       	ldi	r24, 0x01	; 1
     1c0:	0e 94 7e 06 	call	0xcfc	; 0xcfc <LCD_GoTo>
				LCD_Write_String("Enter Your PIN");
     1c4:	8f e4       	ldi	r24, 0x4F	; 79
     1c6:	92 e0       	ldi	r25, 0x02	; 2
     1c8:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Write_String>
				TIMER_0_DELAY_MS(200);
     1cc:	60 e0       	ldi	r22, 0x00	; 0
     1ce:	70 e0       	ldi	r23, 0x00	; 0
     1d0:	88 e4       	ldi	r24, 0x48	; 72
     1d2:	93 e4       	ldi	r25, 0x43	; 67
     1d4:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <TIMER_0_DELAY_MS>
				pin_index = 0 ;
     1d8:	10 92 37 03 	sts	0x0337, r1	; 0x800337 <pin_index>
     1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <PIN_Entery+0x74>
			{
				pan[index] = '\0';
				break;
				
			}
			index++;
     1de:	1f 5f       	subi	r17, 0xFF	; 255
     1e0:	ca cf       	rjmp	.-108    	; 0x176 <PIN_Entery+0x8>
				LCD_Write_String("Enter Your PIN");
				TIMER_0_DELAY_MS(200);
				pin_index = 0 ;
				while (1)
				{
					DIO_READPIN(BUTTON_PIN,&state);
     1e2:	6b e4       	ldi	r22, 0x4B	; 75
     1e4:	73 e0       	ldi	r23, 0x03	; 3
     1e6:	8a e0       	ldi	r24, 0x0A	; 10
     1e8:	0e 94 4e 08 	call	0x109c	; 0x109c <DIO_READPIN>
					 key = KEYPAD_getKey();
     1ec:	0e 94 35 04 	call	0x86a	; 0x86a <KEYPAD_getKey>
     1f0:	c8 2f       	mov	r28, r24
			
			 
					 if(pin_index > 4) // check if the user entered 5 numbers not 4
     1f2:	90 91 37 03 	lds	r25, 0x0337	; 0x800337 <pin_index>
     1f6:	95 30       	cpi	r25, 0x05	; 5
     1f8:	48 f0       	brcs	.+18     	; 0x20c <PIN_Entery+0x9e>
					 {
							 Stage_flag = PIN_CHECK_STAGE ; 
     1fa:	84 e0       	ldi	r24, 0x04	; 4
     1fc:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <Stage_flag>
							 check = 1 ;  // wrong entry 
     200:	81 e0       	ldi	r24, 0x01	; 1
     202:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <Balance>
							 pin_index = 0 ;
     206:	10 92 37 03 	sts	0x0337, r1	; 0x800337 <pin_index>
							 break;
     20a:	4c c0       	rjmp	.+152    	; 0x2a4 <PIN_Entery+0x136>
						 
					 }else 
					 {
							 
							 if (enter_zeroFlag ==1) // check if the enter button pressed
     20c:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <enter_zeroFlag>
     210:	81 30       	cpi	r24, 0x01	; 1
     212:	49 f4       	brne	.+18     	; 0x226 <PIN_Entery+0xb8>
							 {
								 check = 2 ;
     214:	82 e0       	ldi	r24, 0x02	; 2
     216:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <Balance>
								 Stage_flag = PIN_CHECK_STAGE ;
     21a:	84 e0       	ldi	r24, 0x04	; 4
     21c:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <Stage_flag>
								 pin_index =0;
     220:	10 92 37 03 	sts	0x0337, r1	; 0x800337 <pin_index>
								 break ;
     224:	3f c0       	rjmp	.+126    	; 0x2a4 <PIN_Entery+0x136>
								 
							 }
							 
						 }
			 
					  if (enter_zeroFlag == 2 && pin_index <4)  // check if the zero button pressed
     226:	82 30       	cpi	r24, 0x02	; 2
     228:	29 f5       	brne	.+74     	; 0x274 <PIN_Entery+0x106>
     22a:	94 30       	cpi	r25, 0x04	; 4
     22c:	90 f0       	brcs	.+36     	; 0x252 <PIN_Entery+0xe4>
     22e:	22 c0       	rjmp	.+68     	; 0x274 <PIN_Entery+0x106>
					  {
				 
						  while(state==1 && enter_zeroFlag == 2) 
						  {
							  DIO_READPIN(BUTTON_PIN,&state);
     230:	6b e4       	ldi	r22, 0x4B	; 75
     232:	73 e0       	ldi	r23, 0x03	; 3
     234:	8a e0       	ldi	r24, 0x0A	; 10
     236:	0e 94 4e 08 	call	0x109c	; 0x109c <DIO_READPIN>
							  PIN[pin_index] = '0';
     23a:	60 91 37 03 	lds	r22, 0x0337	; 0x800337 <pin_index>
     23e:	e6 2f       	mov	r30, r22
     240:	f0 e0       	ldi	r31, 0x00	; 0
     242:	e8 5c       	subi	r30, 0xC8	; 200
     244:	fc 4f       	sbci	r31, 0xFC	; 252
     246:	80 e3       	ldi	r24, 0x30	; 48
     248:	80 83       	st	Z, r24
							  LCD_GoTo(2,4+pin_index);
     24a:	6c 5f       	subi	r22, 0xFC	; 252
     24c:	82 e0       	ldi	r24, 0x02	; 2
     24e:	0e 94 7e 06 	call	0xcfc	; 0xcfc <LCD_GoTo>
						 }
			 
					  if (enter_zeroFlag == 2 && pin_index <4)  // check if the zero button pressed
					  {
				 
						  while(state==1 && enter_zeroFlag == 2) 
     252:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <state>
     256:	81 30       	cpi	r24, 0x01	; 1
     258:	21 f4       	brne	.+8      	; 0x262 <PIN_Entery+0xf4>
     25a:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <enter_zeroFlag>
     25e:	82 30       	cpi	r24, 0x02	; 2
     260:	39 f3       	breq	.-50     	; 0x230 <PIN_Entery+0xc2>
							  DIO_READPIN(BUTTON_PIN,&state);
							  PIN[pin_index] = '0';
							  LCD_GoTo(2,4+pin_index);
						  }
						  
						  LCD_Write_String("*");
     262:	8e e5       	ldi	r24, 0x5E	; 94
     264:	92 e0       	ldi	r25, 0x02	; 2
     266:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Write_String>
						  pin_index++;
     26a:	80 91 37 03 	lds	r24, 0x0337	; 0x800337 <pin_index>
     26e:	8f 5f       	subi	r24, 0xFF	; 255
     270:	80 93 37 03 	sts	0x0337, r24	; 0x800337 <pin_index>
				  
					  }
					  
					  if(key!=0) // if keypad pressed
     274:	cc 23       	and	r28, r28
     276:	09 f4       	brne	.+2      	; 0x27a <PIN_Entery+0x10c>
     278:	b4 cf       	rjmp	.-152    	; 0x1e2 <PIN_Entery+0x74>
					  {
							PIN[pin_index] = key;
     27a:	60 91 37 03 	lds	r22, 0x0337	; 0x800337 <pin_index>
     27e:	e6 2f       	mov	r30, r22
     280:	f0 e0       	ldi	r31, 0x00	; 0
     282:	e8 5c       	subi	r30, 0xC8	; 200
     284:	fc 4f       	sbci	r31, 0xFC	; 252
     286:	c0 83       	st	Z, r28
							LCD_GoTo(2,4+pin_index);
     288:	6c 5f       	subi	r22, 0xFC	; 252
     28a:	82 e0       	ldi	r24, 0x02	; 2
     28c:	0e 94 7e 06 	call	0xcfc	; 0xcfc <LCD_GoTo>
							LCD_Write_String("*");
     290:	8e e5       	ldi	r24, 0x5E	; 94
     292:	92 e0       	ldi	r25, 0x02	; 2
     294:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Write_String>
							pin_index++;
     298:	80 91 37 03 	lds	r24, 0x0337	; 0x800337 <pin_index>
     29c:	8f 5f       	subi	r24, 0xFF	; 255
     29e:	80 93 37 03 	sts	0x0337, r24	; 0x800337 <pin_index>
     2a2:	9f cf       	rjmp	.-194    	; 0x1e2 <PIN_Entery+0x74>
					  }
						   
			   
	}
				
}
     2a4:	df 91       	pop	r29
     2a6:	cf 91       	pop	r28
     2a8:	1f 91       	pop	r17
     2aa:	08 95       	ret

000002ac <PIN_Check>:


void PIN_Check (void)
{
	
	while (check == 2)  // if the pin entered was 4 numbers
     2ac:	1a c0       	rjmp	.+52     	; 0x2e2 <PIN_Check+0x36>
	{
		
	for (uint8_t i=0; i <4; i++)
		{
			if (PIN[i] !=  pin[i] /*EEPROM PIN)*/ ) // check if the pin was not matched
     2ae:	82 2f       	mov	r24, r18
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	fc 01       	movw	r30, r24
     2b4:	e8 5c       	subi	r30, 0xC8	; 200
     2b6:	fc 4f       	sbci	r31, 0xFC	; 252
     2b8:	30 81       	ld	r19, Z
     2ba:	fc 01       	movw	r30, r24
     2bc:	e4 59       	subi	r30, 0x94	; 148
     2be:	ff 4f       	sbci	r31, 0xFF	; 255
     2c0:	80 81       	ld	r24, Z
     2c2:	38 17       	cp	r19, r24
     2c4:	19 f0       	breq	.+6      	; 0x2cc <PIN_Check+0x20>
			{
				
				check = 1 ; 
     2c6:	81 e0       	ldi	r24, 0x01	; 1
     2c8:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <Balance>
{
	
	while (check == 2)  // if the pin entered was 4 numbers
	{
		
	for (uint8_t i=0; i <4; i++)
     2cc:	2f 5f       	subi	r18, 0xFF	; 255
     2ce:	01 c0       	rjmp	.+2      	; 0x2d2 <PIN_Check+0x26>
     2d0:	20 e0       	ldi	r18, 0x00	; 0
     2d2:	24 30       	cpi	r18, 0x04	; 4
     2d4:	60 f3       	brcs	.-40     	; 0x2ae <PIN_Check+0x2>
				
				check = 1 ; 
			}
		}
		
		if (check != 1) // check if the pin was correct
     2d6:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <Balance>
     2da:	81 30       	cpi	r24, 0x01	; 1
     2dc:	11 f0       	breq	.+4      	; 0x2e2 <PIN_Check+0x36>
		{
			check = 0 ;
     2de:	10 92 36 03 	sts	0x0336, r1	; 0x800336 <Balance>


void PIN_Check (void)
{
	
	while (check == 2)  // if the pin entered was 4 numbers
     2e2:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <Balance>
     2e6:	82 30       	cpi	r24, 0x02	; 2
     2e8:	99 f3       	breq	.-26     	; 0x2d0 <PIN_Check+0x24>
		{
			check = 0 ;
		}
	}
	
	if (check == 1)  // if the pin was incorrect
     2ea:	81 30       	cpi	r24, 0x01	; 1
     2ec:	09 f0       	breq	.+2      	; 0x2f0 <PIN_Check+0x44>
     2ee:	4d c0       	rjmp	.+154    	; 0x38a <PIN_Check+0xde>
	{
	
		if(Wrong_Counter <3){
     2f0:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <Wrong_Counter>
     2f4:	83 30       	cpi	r24, 0x03	; 3
     2f6:	60 f5       	brcc	.+88     	; 0x350 <PIN_Check+0xa4>
			
				Stage_flag = PIN_ENTRY_STAGE ;
     2f8:	83 e0       	ldi	r24, 0x03	; 3
     2fa:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <Stage_flag>
				pin_index = 0;
     2fe:	10 92 37 03 	sts	0x0337, r1	; 0x800337 <pin_index>
				LCD_Clear();
     302:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <LCD_Clear>
				LCD_GoTo(1,3);
     306:	63 e0       	ldi	r22, 0x03	; 3
     308:	81 e0       	ldi	r24, 0x01	; 1
     30a:	0e 94 7e 06 	call	0xcfc	; 0xcfc <LCD_GoTo>
				LCD_Write_String("TRY AGAIN ");
     30e:	80 e6       	ldi	r24, 0x60	; 96
     310:	92 e0       	ldi	r25, 0x02	; 2
     312:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Write_String>
				LCD_GoTo(2,7);
     316:	67 e0       	ldi	r22, 0x07	; 7
     318:	82 e0       	ldi	r24, 0x02	; 2
     31a:	0e 94 7e 06 	call	0xcfc	; 0xcfc <LCD_GoTo>
				LCD_Write_String("TRIALS :");
     31e:	8b e6       	ldi	r24, 0x6B	; 107
     320:	92 e0       	ldi	r25, 0x02	; 2
     322:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Write_String>
				LCD_Write_Number(Wrong_Counter);
     326:	60 91 72 00 	lds	r22, 0x0072	; 0x800072 <Wrong_Counter>
     32a:	70 e0       	ldi	r23, 0x00	; 0
     32c:	80 e0       	ldi	r24, 0x00	; 0
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	0e 94 28 06 	call	0xc50	; 0xc50 <LCD_Write_Number>
				Wrong_Counter++;
     334:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <Wrong_Counter>
     338:	8f 5f       	subi	r24, 0xFF	; 255
     33a:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <Wrong_Counter>
				TIMER_0_DELAY_MS(2000);
     33e:	60 e0       	ldi	r22, 0x00	; 0
     340:	70 e0       	ldi	r23, 0x00	; 0
     342:	8a ef       	ldi	r24, 0xFA	; 250
     344:	94 e4       	ldi	r25, 0x44	; 68
     346:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <TIMER_0_DELAY_MS>
				LCD_Clear();
     34a:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <LCD_Clear>
     34e:	1d c0       	rjmp	.+58     	; 0x38a <PIN_Check+0xde>
		}
		else // if the user entered the pin wrong 3 times
		 {
				 LCD_Create_Charecter(bell,0);
     350:	60 e0       	ldi	r22, 0x00	; 0
     352:	80 e6       	ldi	r24, 0x60	; 96
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	0e 94 8f 06 	call	0xd1e	; 0xd1e <LCD_Create_Charecter>
				buzzer_On();
     35a:	0e 94 12 04 	call	0x824	; 0x824 <buzzer_On>
				LCD_Clear();
     35e:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <LCD_Clear>
				LCD_GoTo(1,3);
     362:	63 e0       	ldi	r22, 0x03	; 3
     364:	81 e0       	ldi	r24, 0x01	; 1
     366:	0e 94 7e 06 	call	0xcfc	; 0xcfc <LCD_GoTo>
				LCD_Write_String(" BLOCKED ");
     36a:	84 e7       	ldi	r24, 0x74	; 116
     36c:	92 e0       	ldi	r25, 0x02	; 2
     36e:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Write_String>
				LCD_Write_Charecter(0);
     372:	80 e0       	ldi	r24, 0x00	; 0
     374:	0e 94 8c 06 	call	0xd18	; 0xd18 <LCD_Write_Charecter>
				EXI_Disable(EXT_INT_0);
     378:	80 e0       	ldi	r24, 0x00	; 0
     37a:	0e 94 ac 08 	call	0x1158	; 0x1158 <EXI_Disable>
				TIMER_0_DELAY_MS(200000);
     37e:	60 e0       	ldi	r22, 0x00	; 0
     380:	70 e5       	ldi	r23, 0x50	; 80
     382:	83 e4       	ldi	r24, 0x43	; 67
     384:	98 e4       	ldi	r25, 0x48	; 72
     386:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <TIMER_0_DELAY_MS>
	
		
		
	}
	
	if (check == 0) // if the pin was correct
     38a:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <Balance>
     38e:	81 11       	cpse	r24, r1
     390:	0a c0       	rjmp	.+20     	; 0x3a6 <PIN_Check+0xfa>
	{
		Stage_flag = TRANSACTION_ENTRY_STAGE ;
     392:	85 e0       	ldi	r24, 0x05	; 5
     394:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <Stage_flag>
		Wrong_Counter = 1;
     398:	81 e0       	ldi	r24, 0x01	; 1
     39a:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <Wrong_Counter>
		pin_index = 0;
     39e:	10 92 37 03 	sts	0x0337, r1	; 0x800337 <pin_index>
		LCD_Clear();
     3a2:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <LCD_Clear>
     3a6:	08 95       	ret

000003a8 <transaction_Entry>:
/************************************************************************************************************/

/**DESCRIPTION:-
	
*/
void transaction_Entry(void){
     3a8:	1f 93       	push	r17
     3aa:	cf 93       	push	r28
     3ac:	df 93       	push	r29
	uint8_t key = 0,flag=0,temp=0,i=0;

	LCD_Clear();
     3ae:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <LCD_Clear>
	LCD_GoTo(1,0);
     3b2:	60 e0       	ldi	r22, 0x00	; 0
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	0e 94 7e 06 	call	0xcfc	; 0xcfc <LCD_GoTo>
	LCD_Write_String("Enter Amount");
     3ba:	8e e7       	ldi	r24, 0x7E	; 126
     3bc:	92 e0       	ldi	r25, 0x02	; 2
     3be:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Write_String>
	LCD_GoTo(2,0);
     3c2:	60 e0       	ldi	r22, 0x00	; 0
     3c4:	82 e0       	ldi	r24, 0x02	; 2
     3c6:	0e 94 7e 06 	call	0xcfc	; 0xcfc <LCD_GoTo>
	LCD_Write_String("0000.00");
     3ca:	8b e8       	ldi	r24, 0x8B	; 139
     3cc:	92 e0       	ldi	r25, 0x02	; 2
     3ce:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Write_String>

/**DESCRIPTION:-
	
*/
void transaction_Entry(void){
	uint8_t key = 0,flag=0,temp=0,i=0;
     3d2:	d0 e0       	ldi	r29, 0x00	; 0
     3d4:	c0 e0       	ldi	r28, 0x00	; 0
	LCD_GoTo(1,0);
	LCD_Write_String("Enter Amount");
	LCD_GoTo(2,0);
	LCD_Write_String("0000.00");
	
	while (i<=4) 
     3d6:	52 c0       	rjmp	.+164    	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
	
	
	{
		key=KEYPAD_getKey();
     3d8:	0e 94 35 04 	call	0x86a	; 0x86a <KEYPAD_getKey>
     3dc:	18 2f       	mov	r17, r24
		DIO_READPIN(BUTTON_PIN,&state);
     3de:	6b e4       	ldi	r22, 0x4B	; 75
     3e0:	73 e0       	ldi	r23, 0x03	; 3
     3e2:	8a e0       	ldi	r24, 0x0A	; 10
     3e4:	0e 94 4e 08 	call	0x109c	; 0x109c <DIO_READPIN>
		
		
		while (enter_zeroFlag == 2 && state ==1) // check the zero button is pressed
     3e8:	0c c0       	rjmp	.+24     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
		{
				DIO_READPIN(BUTTON_PIN,&state);
     3ea:	6b e4       	ldi	r22, 0x4B	; 75
     3ec:	73 e0       	ldi	r23, 0x03	; 3
     3ee:	8a e0       	ldi	r24, 0x0A	; 10
     3f0:	0e 94 4e 08 	call	0x109c	; 0x109c <DIO_READPIN>
				Balance[i]='0'; // save zero to the balance array
     3f4:	ed 2f       	mov	r30, r29
     3f6:	f0 e0       	ldi	r31, 0x00	; 0
     3f8:	ea 5c       	subi	r30, 0xCA	; 202
     3fa:	fc 4f       	sbci	r31, 0xFC	; 252
     3fc:	80 e3       	ldi	r24, 0x30	; 48
     3fe:	80 83       	st	Z, r24
					flag = 1 ;
     400:	c1 e0       	ldi	r28, 0x01	; 1
	{
		key=KEYPAD_getKey();
		DIO_READPIN(BUTTON_PIN,&state);
		
		
		while (enter_zeroFlag == 2 && state ==1) // check the zero button is pressed
     402:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <enter_zeroFlag>
     406:	82 30       	cpi	r24, 0x02	; 2
     408:	21 f4       	brne	.+8      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
     40a:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <state>
     40e:	81 30       	cpi	r24, 0x01	; 1
     410:	61 f3       	breq	.-40     	; 0x3ea <transaction_Entry+0x42>
		}
			
		
		
		
		if (key!=0 )  // check if keypad is pressed
     412:	11 23       	and	r17, r17
     414:	89 f1       	breq	.+98     	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
		{
			
			Balance[i]=key;	// save entered value to the balance array
     416:	ed 2f       	mov	r30, r29
     418:	f0 e0       	ldi	r31, 0x00	; 0
     41a:	ea 5c       	subi	r30, 0xCA	; 202
     41c:	fc 4f       	sbci	r31, 0xFC	; 252
     41e:	10 83       	st	Z, r17
				
			flag = 1;
     420:	c1 e0       	ldi	r28, 0x01	; 1
     422:	2a c0       	rjmp	.+84     	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
		while(flag == 1  ) // when zero button or keypad is pressed
		{
		
		
			
			if (enter_zeroFlag == 1) // if enter button is pressed
     424:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <enter_zeroFlag>
     428:	81 30       	cpi	r24, 0x01	; 1
     42a:	59 f4       	brne	.+22     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
				{
				Balance[i]='\0';   
     42c:	ed 2f       	mov	r30, r29
     42e:	f0 e0       	ldi	r31, 0x00	; 0
     430:	ea 5c       	subi	r30, 0xCA	; 202
     432:	fc 4f       	sbci	r31, 0xFC	; 252
     434:	10 82       	st	Z, r1
				Stage_flag = ACCOUNT_CHECK_STAGE ;
     436:	86 e0       	ldi	r24, 0x06	; 6
     438:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <Stage_flag>
				i=5 ;
     43c:	d5 e0       	ldi	r29, 0x05	; 5
				flag = 0;
     43e:	c0 e0       	ldi	r28, 0x00	; 0
     440:	1b c0       	rjmp	.+54     	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
				
			}else if(enter_zeroFlag == 2){
     442:	82 30       	cpi	r24, 0x02	; 2
     444:	c9 f0       	breq	.+50     	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
					
			}
			else // if enter or zero button not pressed
			{
				
				DIO_READPIN(BUTTON_PIN,&state);
     446:	6b e4       	ldi	r22, 0x4B	; 75
     448:	73 e0       	ldi	r23, 0x03	; 3
     44a:	8a e0       	ldi	r24, 0x0A	; 10
     44c:	0e 94 4e 08 	call	0x109c	; 0x109c <DIO_READPIN>
				for (uint8_t c =0 ; c<=i ; c++) // display numbers and shift them to left
     450:	c0 e0       	ldi	r28, 0x00	; 0
     452:	0e c0       	rjmp	.+28     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
				{
							
					LCD_GoTo(2,3-(i-c));
     454:	6c 2f       	mov	r22, r28
     456:	6d 1b       	sub	r22, r29
     458:	6d 5f       	subi	r22, 0xFD	; 253
     45a:	82 e0       	ldi	r24, 0x02	; 2
     45c:	0e 94 7e 06 	call	0xcfc	; 0xcfc <LCD_GoTo>
					LCD_Write_Charecter(Balance[(c)]);  
     460:	ec 2f       	mov	r30, r28
     462:	f0 e0       	ldi	r31, 0x00	; 0
     464:	ea 5c       	subi	r30, 0xCA	; 202
     466:	fc 4f       	sbci	r31, 0xFC	; 252
     468:	80 81       	ld	r24, Z
     46a:	0e 94 8c 06 	call	0xd18	; 0xd18 <LCD_Write_Charecter>
			}
			else // if enter or zero button not pressed
			{
				
				DIO_READPIN(BUTTON_PIN,&state);
				for (uint8_t c =0 ; c<=i ; c++) // display numbers and shift them to left
     46e:	cf 5f       	subi	r28, 0xFF	; 255
     470:	dc 17       	cp	r29, r28
     472:	80 f7       	brcc	.-32     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
					LCD_GoTo(2,3-(i-c));
					LCD_Write_Charecter(Balance[(c)]);  
						
				}
				flag =0 ;
				i++;
     474:	df 5f       	subi	r29, 0xFF	; 255
							
					LCD_GoTo(2,3-(i-c));
					LCD_Write_Charecter(Balance[(c)]);  
						
				}
				flag =0 ;
     476:	c0 e0       	ldi	r28, 0x00	; 0
				
			flag = 1;
		}
			
			
		while(flag == 1  ) // when zero button or keypad is pressed
     478:	c1 30       	cpi	r28, 0x01	; 1
     47a:	a1 f2       	breq	.-88     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
	LCD_GoTo(1,0);
	LCD_Write_String("Enter Amount");
	LCD_GoTo(2,0);
	LCD_Write_String("0000.00");
	
	while (i<=4) 
     47c:	d5 30       	cpi	r29, 0x05	; 5
     47e:	08 f4       	brcc	.+2      	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
     480:	ab cf       	rjmp	.-170    	; 0x3d8 <transaction_Entry+0x30>
		
	}
	
	
	
}
     482:	df 91       	pop	r29
     484:	cf 91       	pop	r28
     486:	1f 91       	pop	r17
     488:	08 95       	ret

0000048a <account_checks>:

/************************************************************************************************************/
/**DESCRIPTION:-
	
*/
void account_checks(void){
     48a:	0f 93       	push	r16
     48c:	1f 93       	push	r17
     48e:	cf 93       	push	r28
     490:	df 93       	push	r29
     492:	00 d0       	rcall	.+0      	; 0x494 <account_checks+0xa>
     494:	00 d0       	rcall	.+0      	; 0x496 <account_checks+0xc>
     496:	cd b7       	in	r28, 0x3d	; 61
     498:	de b7       	in	r29, 0x3e	; 62
	
		
	LCD_Create_Charecter(bell,0);
     49a:	60 e0       	ldi	r22, 0x00	; 0
     49c:	80 e6       	ldi	r24, 0x60	; 96
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	0e 94 8f 06 	call	0xd1e	; 0xd1e <LCD_Create_Charecter>
	float transAmount = atof(Balance);
     4a4:	86 e3       	ldi	r24, 0x36	; 54
     4a6:	93 e0       	ldi	r25, 0x03	; 3
     4a8:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <atof>
     4ac:	69 83       	std	Y+1, r22	; 0x01
     4ae:	7a 83       	std	Y+2, r23	; 0x02
     4b0:	8b 83       	std	Y+3, r24	; 0x03
     4b2:	9c 83       	std	Y+4, r25	; 0x04
	uint8_t approved_flag = 0 ;
	
	LCD_Clear();
     4b4:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <LCD_Clear>
	LCD_Write_String(Balance);
     4b8:	86 e3       	ldi	r24, 0x36	; 54
     4ba:	93 e0       	ldi	r25, 0x03	; 3
     4bc:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Write_String>
	LCD_GoTo(2,0);
     4c0:	60 e0       	ldi	r22, 0x00	; 0
     4c2:	82 e0       	ldi	r24, 0x02	; 2
     4c4:	0e 94 7e 06 	call	0xcfc	; 0xcfc <LCD_GoTo>
	
	
	LCD_Clear();
     4c8:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <LCD_Clear>
	
	if(isValidAccount(pan) == SERVER_OK){
     4cc:	86 e2       	ldi	r24, 0x26	; 38
     4ce:	93 e0       	ldi	r25, 0x03	; 3
     4d0:	0e 94 ad 03 	call	0x75a	; 0x75a <isValidAccount>
     4d4:	81 11       	cpse	r24, r1
     4d6:	80 c0       	rjmp	.+256    	; 0x5d8 <account_checks+0x14e>
		
		if(isBlockedAccount()==SERVER_OK){
     4d8:	0e 94 de 03 	call	0x7bc	; 0x7bc <isBlockedAccount>
     4dc:	81 11       	cpse	r24, r1
     4de:	5b c0       	rjmp	.+182    	; 0x596 <account_checks+0x10c>
		
			if (transAmount<= dailyMax)
     4e0:	69 81       	ldd	r22, Y+1	; 0x01
     4e2:	7a 81       	ldd	r23, Y+2	; 0x02
     4e4:	8b 81       	ldd	r24, Y+3	; 0x03
     4e6:	9c 81       	ldd	r25, Y+4	; 0x04
     4e8:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <dailyMax>
     4ec:	30 91 69 00 	lds	r19, 0x0069	; 0x800069 <dailyMax+0x1>
     4f0:	40 91 6a 00 	lds	r20, 0x006A	; 0x80006a <dailyMax+0x2>
     4f4:	50 91 6b 00 	lds	r21, 0x006B	; 0x80006b <dailyMax+0x3>
     4f8:	0e 94 89 0c 	call	0x1912	; 0x1912 <__cmpsf2>
     4fc:	18 16       	cp	r1, r24
     4fe:	4c f1       	brlt	.+82     	; 0x552 <account_checks+0xc8>
			{
				if(isAmountAvailable(&transAmount) == SERVER_OK){
     500:	ce 01       	movw	r24, r28
     502:	01 96       	adiw	r24, 0x01	; 1
     504:	0e 94 ed 03 	call	0x7da	; 0x7da <isAmountAvailable>
     508:	88 23       	and	r24, r24
     50a:	09 f4       	brne	.+2      	; 0x50e <account_checks+0x84>
     50c:	86 c0       	rjmp	.+268    	; 0x61a <account_checks+0x190>
					
					approved_flag = 1 ;
					
				}else{
					
					LCD_GoTo(1,3);
     50e:	63 e0       	ldi	r22, 0x03	; 3
     510:	81 e0       	ldi	r24, 0x01	; 1
     512:	0e 94 7e 06 	call	0xcfc	; 0xcfc <LCD_GoTo>
					LCD_Write_String("INSUFFICIENT ");
     516:	83 e9       	ldi	r24, 0x93	; 147
     518:	92 e0       	ldi	r25, 0x02	; 2
     51a:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Write_String>
					LCD_GoTo(2,5);
     51e:	65 e0       	ldi	r22, 0x05	; 5
     520:	82 e0       	ldi	r24, 0x02	; 2
     522:	0e 94 7e 06 	call	0xcfc	; 0xcfc <LCD_GoTo>
					LCD_Write_String(" FUND !!");
     526:	81 ea       	ldi	r24, 0xA1	; 161
     528:	92 e0       	ldi	r25, 0x02	; 2
     52a:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Write_String>
					LCD_GoTo(2,15);
     52e:	6f e0       	ldi	r22, 0x0F	; 15
     530:	82 e0       	ldi	r24, 0x02	; 2
     532:	0e 94 7e 06 	call	0xcfc	; 0xcfc <LCD_GoTo>
					LCD_Write_Charecter(0);
     536:	80 e0       	ldi	r24, 0x00	; 0
     538:	0e 94 8c 06 	call	0xd18	; 0xd18 <LCD_Write_Charecter>
					TIMER_0_DELAY_MS(DELAY_VALUE);
     53c:	60 e0       	ldi	r22, 0x00	; 0
     53e:	70 e0       	ldi	r23, 0x00	; 0
     540:	8a e7       	ldi	r24, 0x7A	; 122
     542:	94 e4       	ldi	r25, 0x44	; 68
     544:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <TIMER_0_DELAY_MS>
					Stage_flag = TRANSACTION_ENTRY_STAGE ;
     548:	85 e0       	ldi	r24, 0x05	; 5
     54a:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <Stage_flag>
void account_checks(void){
	
		
	LCD_Create_Charecter(bell,0);
	float transAmount = atof(Balance);
	uint8_t approved_flag = 0 ;
     54e:	80 e0       	ldi	r24, 0x00	; 0
     550:	65 c0       	rjmp	.+202    	; 0x61c <account_checks+0x192>
					Stage_flag = TRANSACTION_ENTRY_STAGE ;
				}// end of balance check
				
			}else{
				
					LCD_GoTo(1,4);
     552:	64 e0       	ldi	r22, 0x04	; 4
     554:	81 e0       	ldi	r24, 0x01	; 1
     556:	0e 94 7e 06 	call	0xcfc	; 0xcfc <LCD_GoTo>
					LCD_Write_String("MAX LIMIT");
     55a:	8a ea       	ldi	r24, 0xAA	; 170
     55c:	92 e0       	ldi	r25, 0x02	; 2
     55e:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Write_String>
					LCD_GoTo(2,1);
     562:	61 e0       	ldi	r22, 0x01	; 1
     564:	82 e0       	ldi	r24, 0x02	; 2
     566:	0e 94 7e 06 	call	0xcfc	; 0xcfc <LCD_GoTo>
					LCD_Write_String(" IS EXCEEDED ");
     56a:	84 eb       	ldi	r24, 0xB4	; 180
     56c:	92 e0       	ldi	r25, 0x02	; 2
     56e:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Write_String>
					LCD_GoTo(2,15);
     572:	6f e0       	ldi	r22, 0x0F	; 15
     574:	82 e0       	ldi	r24, 0x02	; 2
     576:	0e 94 7e 06 	call	0xcfc	; 0xcfc <LCD_GoTo>
					LCD_Write_Charecter(0);
     57a:	80 e0       	ldi	r24, 0x00	; 0
     57c:	0e 94 8c 06 	call	0xd18	; 0xd18 <LCD_Write_Charecter>
					TIMER_0_DELAY_MS(DELAY_VALUE);
     580:	60 e0       	ldi	r22, 0x00	; 0
     582:	70 e0       	ldi	r23, 0x00	; 0
     584:	8a e7       	ldi	r24, 0x7A	; 122
     586:	94 e4       	ldi	r25, 0x44	; 68
     588:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <TIMER_0_DELAY_MS>
					Stage_flag = TRANSACTION_ENTRY_STAGE ;
     58c:	85 e0       	ldi	r24, 0x05	; 5
     58e:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <Stage_flag>
void account_checks(void){
	
		
	LCD_Create_Charecter(bell,0);
	float transAmount = atof(Balance);
	uint8_t approved_flag = 0 ;
     592:	80 e0       	ldi	r24, 0x00	; 0
     594:	43 c0       	rjmp	.+134    	; 0x61c <account_checks+0x192>
					Stage_flag = TRANSACTION_ENTRY_STAGE ;
			}// end of amount check
		
		}else{
			
			buzzer_On();
     596:	0e 94 12 04 	call	0x824	; 0x824 <buzzer_On>
			LCD_GoTo(1,4);
     59a:	64 e0       	ldi	r22, 0x04	; 4
     59c:	81 e0       	ldi	r24, 0x01	; 1
     59e:	0e 94 7e 06 	call	0xcfc	; 0xcfc <LCD_GoTo>
			LCD_Write_String("THIS IS");
     5a2:	82 ec       	ldi	r24, 0xC2	; 194
     5a4:	92 e0       	ldi	r25, 0x02	; 2
     5a6:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Write_String>
			LCD_GoTo(2,1);
     5aa:	61 e0       	ldi	r22, 0x01	; 1
     5ac:	82 e0       	ldi	r24, 0x02	; 2
     5ae:	0e 94 7e 06 	call	0xcfc	; 0xcfc <LCD_GoTo>
			LCD_Write_String("A STOLEN CARD !!");	
     5b2:	8a ec       	ldi	r24, 0xCA	; 202
     5b4:	92 e0       	ldi	r25, 0x02	; 2
     5b6:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Write_String>
			LCD_GoTo(2,15);
     5ba:	6f e0       	ldi	r22, 0x0F	; 15
     5bc:	82 e0       	ldi	r24, 0x02	; 2
     5be:	0e 94 7e 06 	call	0xcfc	; 0xcfc <LCD_GoTo>
			LCD_Write_Charecter(0);		
     5c2:	80 e0       	ldi	r24, 0x00	; 0
     5c4:	0e 94 8c 06 	call	0xd18	; 0xd18 <LCD_Write_Charecter>
			TIMER_0_DELAY_MS(500000);
     5c8:	60 e0       	ldi	r22, 0x00	; 0
     5ca:	74 e2       	ldi	r23, 0x24	; 36
     5cc:	84 ef       	ldi	r24, 0xF4	; 244
     5ce:	98 e4       	ldi	r25, 0x48	; 72
     5d0:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <TIMER_0_DELAY_MS>
void account_checks(void){
	
		
	LCD_Create_Charecter(bell,0);
	float transAmount = atof(Balance);
	uint8_t approved_flag = 0 ;
     5d4:	80 e0       	ldi	r24, 0x00	; 0
     5d6:	22 c0       	rjmp	.+68     	; 0x61c <account_checks+0x192>
		} //  end of blocked check
		
	}
	
	else{
		buzzer_On();
     5d8:	0e 94 12 04 	call	0x824	; 0x824 <buzzer_On>
		LCD_GoTo(1,4);
     5dc:	64 e0       	ldi	r22, 0x04	; 4
     5de:	81 e0       	ldi	r24, 0x01	; 1
     5e0:	0e 94 7e 06 	call	0xcfc	; 0xcfc <LCD_GoTo>
		LCD_Write_String("THIS IS");
     5e4:	82 ec       	ldi	r24, 0xC2	; 194
     5e6:	92 e0       	ldi	r25, 0x02	; 2
     5e8:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Write_String>
		LCD_GoTo(2,1);
     5ec:	61 e0       	ldi	r22, 0x01	; 1
     5ee:	82 e0       	ldi	r24, 0x02	; 2
     5f0:	0e 94 7e 06 	call	0xcfc	; 0xcfc <LCD_GoTo>
		LCD_Write_String("A FRAUD CARD !!");
     5f4:	8b ed       	ldi	r24, 0xDB	; 219
     5f6:	92 e0       	ldi	r25, 0x02	; 2
     5f8:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Write_String>
		LCD_GoTo(2,15);
     5fc:	6f e0       	ldi	r22, 0x0F	; 15
     5fe:	82 e0       	ldi	r24, 0x02	; 2
     600:	0e 94 7e 06 	call	0xcfc	; 0xcfc <LCD_GoTo>
		LCD_Write_Charecter(0);
     604:	80 e0       	ldi	r24, 0x00	; 0
     606:	0e 94 8c 06 	call	0xd18	; 0xd18 <LCD_Write_Charecter>
		TIMER_0_DELAY_MS(DELAY_VALUE);
     60a:	60 e0       	ldi	r22, 0x00	; 0
     60c:	70 e0       	ldi	r23, 0x00	; 0
     60e:	8a e7       	ldi	r24, 0x7A	; 122
     610:	94 e4       	ldi	r25, 0x44	; 68
     612:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <TIMER_0_DELAY_MS>
void account_checks(void){
	
		
	LCD_Create_Charecter(bell,0);
	float transAmount = atof(Balance);
	uint8_t approved_flag = 0 ;
     616:	80 e0       	ldi	r24, 0x00	; 0
     618:	01 c0       	rjmp	.+2      	; 0x61c <account_checks+0x192>
		
			if (transAmount<= dailyMax)
			{
				if(isAmountAvailable(&transAmount) == SERVER_OK){
					
					approved_flag = 1 ;
     61a:	81 e0       	ldi	r24, 0x01	; 1
		TIMER_0_DELAY_MS(DELAY_VALUE);
		
	}
	
	
	if ( approved_flag)
     61c:	88 23       	and	r24, r24
     61e:	09 f4       	brne	.+2      	; 0x622 <account_checks+0x198>
     620:	73 c0       	rjmp	.+230    	; 0x708 <account_checks+0x27e>
	{
		buzzer_Off();
     622:	0e 94 17 04 	call	0x82e	; 0x82e <buzzer_Off>
		p_account->balance -= transAmount ;
     626:	00 91 73 00 	lds	r16, 0x0073	; 0x800073 <p_account>
     62a:	10 91 74 00 	lds	r17, 0x0074	; 0x800074 <p_account+0x1>
     62e:	29 81       	ldd	r18, Y+1	; 0x01
     630:	3a 81       	ldd	r19, Y+2	; 0x02
     632:	4b 81       	ldd	r20, Y+3	; 0x03
     634:	5c 81       	ldd	r21, Y+4	; 0x04
     636:	f8 01       	movw	r30, r16
     638:	60 81       	ld	r22, Z
     63a:	71 81       	ldd	r23, Z+1	; 0x01
     63c:	82 81       	ldd	r24, Z+2	; 0x02
     63e:	93 81       	ldd	r25, Z+3	; 0x03
     640:	0e 94 05 0c 	call	0x180a	; 0x180a <__subsf3>
     644:	f8 01       	movw	r30, r16
     646:	60 83       	st	Z, r22
     648:	71 83       	std	Z+1, r23	; 0x01
     64a:	82 83       	std	Z+2, r24	; 0x02
     64c:	93 83       	std	Z+3, r25	; 0x03
		LCD_Clear();
     64e:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <LCD_Clear>
		LCD_GoTo(1,4);
     652:	64 e0       	ldi	r22, 0x04	; 4
     654:	81 e0       	ldi	r24, 0x01	; 1
     656:	0e 94 7e 06 	call	0xcfc	; 0xcfc <LCD_GoTo>
		LCD_Write_String("APPROVED ");
     65a:	8b ee       	ldi	r24, 0xEB	; 235
     65c:	92 e0       	ldi	r25, 0x02	; 2
     65e:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Write_String>
		LCD_GoTo(2,3);
     662:	63 e0       	ldi	r22, 0x03	; 3
     664:	82 e0       	ldi	r24, 0x02	; 2
     666:	0e 94 7e 06 	call	0xcfc	; 0xcfc <LCD_GoTo>
		LCD_Write_String("TRANSACTION ");
     66a:	85 ef       	ldi	r24, 0xF5	; 245
     66c:	92 e0       	ldi	r25, 0x02	; 2
     66e:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Write_String>
		TIMER_0_DELAY_MS(DELAY_VALUE);
     672:	60 e0       	ldi	r22, 0x00	; 0
     674:	70 e0       	ldi	r23, 0x00	; 0
     676:	8a e7       	ldi	r24, 0x7A	; 122
     678:	94 e4       	ldi	r25, 0x44	; 68
     67a:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <TIMER_0_DELAY_MS>
		
		LCD_Clear();
     67e:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <LCD_Clear>
		LCD_GoTo(1,4);
     682:	64 e0       	ldi	r22, 0x04	; 4
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	0e 94 7e 06 	call	0xcfc	; 0xcfc <LCD_GoTo>
		LCD_Write_String("REMAINING");
     68a:	82 e0       	ldi	r24, 0x02	; 2
     68c:	93 e0       	ldi	r25, 0x03	; 3
     68e:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Write_String>
		LCD_GoTo(2,0);
     692:	60 e0       	ldi	r22, 0x00	; 0
     694:	82 e0       	ldi	r24, 0x02	; 2
     696:	0e 94 7e 06 	call	0xcfc	; 0xcfc <LCD_GoTo>
		LCD_Write_String("BALANCE :");
     69a:	8c e0       	ldi	r24, 0x0C	; 12
     69c:	93 e0       	ldi	r25, 0x03	; 3
     69e:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Write_String>
		LCD_Write_Number(p_account->balance);
     6a2:	e0 91 73 00 	lds	r30, 0x0073	; 0x800073 <p_account>
     6a6:	f0 91 74 00 	lds	r31, 0x0074	; 0x800074 <p_account+0x1>
     6aa:	60 81       	ld	r22, Z
     6ac:	71 81       	ldd	r23, Z+1	; 0x01
     6ae:	82 81       	ldd	r24, Z+2	; 0x02
     6b0:	93 81       	ldd	r25, Z+3	; 0x03
     6b2:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__fixunssfsi>
     6b6:	0e 94 28 06 	call	0xc50	; 0xc50 <LCD_Write_Number>
		LCD_Write_String(".00");
     6ba:	8f e8       	ldi	r24, 0x8F	; 143
     6bc:	92 e0       	ldi	r25, 0x02	; 2
     6be:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Write_String>
		TIMER_0_DELAY_MS(DELAY_VALUE);
     6c2:	60 e0       	ldi	r22, 0x00	; 0
     6c4:	70 e0       	ldi	r23, 0x00	; 0
     6c6:	8a e7       	ldi	r24, 0x7A	; 122
     6c8:	94 e4       	ldi	r25, 0x44	; 68
     6ca:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <TIMER_0_DELAY_MS>
		
		LCD_Clear();
     6ce:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <LCD_Clear>
		LCD_GoTo(1,4);
     6d2:	64 e0       	ldi	r22, 0x04	; 4
     6d4:	81 e0       	ldi	r24, 0x01	; 1
     6d6:	0e 94 7e 06 	call	0xcfc	; 0xcfc <LCD_GoTo>
		LCD_Write_String("EJECTING ");
     6da:	86 e1       	ldi	r24, 0x16	; 22
     6dc:	93 e0       	ldi	r25, 0x03	; 3
     6de:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Write_String>
		LCD_GoTo(2,6);
     6e2:	66 e0       	ldi	r22, 0x06	; 6
     6e4:	82 e0       	ldi	r24, 0x02	; 2
     6e6:	0e 94 7e 06 	call	0xcfc	; 0xcfc <LCD_GoTo>
		LCD_Write_String("CARD ");
     6ea:	80 e2       	ldi	r24, 0x20	; 32
     6ec:	93 e0       	ldi	r25, 0x03	; 3
     6ee:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Write_String>
		TIMER_0_DELAY_MS(DELAY_VALUE);
     6f2:	60 e0       	ldi	r22, 0x00	; 0
     6f4:	70 e0       	ldi	r23, 0x00	; 0
     6f6:	8a e7       	ldi	r24, 0x7A	; 122
     6f8:	94 e4       	ldi	r25, 0x44	; 68
     6fa:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <TIMER_0_DELAY_MS>
		LCD_Clear();
     6fe:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <LCD_Clear>
		Stage_flag = WELCOME_STAGE ;
     702:	81 e0       	ldi	r24, 0x01	; 1
     704:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <Stage_flag>

	}
	

}
     708:	0f 90       	pop	r0
     70a:	0f 90       	pop	r0
     70c:	0f 90       	pop	r0
     70e:	0f 90       	pop	r0
     710:	df 91       	pop	r29
     712:	cf 91       	pop	r28
     714:	1f 91       	pop	r17
     716:	0f 91       	pop	r16
     718:	08 95       	ret

0000071a <app_Start>:
	
void app_Start(void){
	
	

	if (Stage_flag == WELCOME_STAGE)
     71a:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <Stage_flag>
     71e:	81 30       	cpi	r24, 0x01	; 1
     720:	19 f4       	brne	.+6      	; 0x728 <app_Start+0xe>
	{
		welcome();
     722:	0e 94 a0 00 	call	0x140	; 0x140 <welcome>
     726:	08 95       	ret
	}
	else if (Stage_flag == INSERTION_STAGE)
     728:	82 30       	cpi	r24, 0x02	; 2
     72a:	19 f4       	brne	.+6      	; 0x732 <app_Start+0x18>
	{
		insertion();
     72c:	0e 94 ae 00 	call	0x15c	; 0x15c <insertion>
     730:	08 95       	ret
	}
	else if (Stage_flag == PIN_ENTRY_STAGE)
     732:	83 30       	cpi	r24, 0x03	; 3
     734:	19 f4       	brne	.+6      	; 0x73c <app_Start+0x22>
	{
		PIN_Entery();
     736:	0e 94 b7 00 	call	0x16e	; 0x16e <PIN_Entery>
     73a:	08 95       	ret
	}
	else if (Stage_flag == PIN_CHECK_STAGE){
     73c:	84 30       	cpi	r24, 0x04	; 4
     73e:	19 f4       	brne	.+6      	; 0x746 <app_Start+0x2c>
		
		PIN_Check();
     740:	0e 94 56 01 	call	0x2ac	; 0x2ac <PIN_Check>
     744:	08 95       	ret
		
	}else if (Stage_flag == TRANSACTION_ENTRY_STAGE){
     746:	85 30       	cpi	r24, 0x05	; 5
     748:	19 f4       	brne	.+6      	; 0x750 <app_Start+0x36>
		
		transaction_Entry();
     74a:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <transaction_Entry>
     74e:	08 95       	ret

	}else if (Stage_flag == ACCOUNT_CHECK_STAGE){
     750:	86 30       	cpi	r24, 0x06	; 6
     752:	11 f4       	brne	.+4      	; 0x758 <app_Start+0x3e>
	
		account_checks();
     754:	0e 94 45 02 	call	0x48a	; 0x48a <account_checks>
     758:	08 95       	ret

0000075a <isValidAccount>:

/******************************************* isValidAccount **********************************************/
//calling database and card data

EN_serverError_t isValidAccount(uint8_t *pan )
{
     75a:	dc 01       	movw	r26, r24

    uint8_t exist_flag = 0 ;
    EN_serverError_t server_status ;

    for(uint8_t account_num= 0 ; account_num< 10 ; account_num++) // num of accounts
     75c:	80 e0       	ldi	r24, 0x00	; 0
//calling database and card data

EN_serverError_t isValidAccount(uint8_t *pan )
{

    uint8_t exist_flag = 0 ;
     75e:	20 e0       	ldi	r18, 0x00	; 0
    EN_serverError_t server_status ;

    for(uint8_t account_num= 0 ; account_num< 10 ; account_num++) // num of accounts
     760:	21 c0       	rjmp	.+66     	; 0x7a4 <isValidAccount+0x4a>
    {
        for(uint8_t counter = 0 ; counter < 16 ; counter++)
        {
            if( pan[counter] == (p_account)->primaryAccountNumber[counter] )
     762:	29 2f       	mov	r18, r25
     764:	30 e0       	ldi	r19, 0x00	; 0
     766:	fd 01       	movw	r30, r26
     768:	e2 0f       	add	r30, r18
     76a:	f3 1f       	adc	r31, r19
     76c:	60 81       	ld	r22, Z
     76e:	40 91 73 00 	lds	r20, 0x0073	; 0x800073 <p_account>
     772:	50 91 74 00 	lds	r21, 0x0074	; 0x800074 <p_account+0x1>
     776:	fa 01       	movw	r30, r20
     778:	e2 0f       	add	r30, r18
     77a:	f3 1f       	adc	r31, r19
     77c:	25 81       	ldd	r18, Z+5	; 0x05
     77e:	62 13       	cpse	r22, r18
     780:	03 c0       	rjmp	.+6      	; 0x788 <isValidAccount+0x2e>
    uint8_t exist_flag = 0 ;
    EN_serverError_t server_status ;

    for(uint8_t account_num= 0 ; account_num< 10 ; account_num++) // num of accounts
    {
        for(uint8_t counter = 0 ; counter < 16 ; counter++)
     782:	9f 5f       	subi	r25, 0xFF	; 255
        {
            if( pan[counter] == (p_account)->primaryAccountNumber[counter] )
            {
                exist_flag =1 ;
     784:	21 e0       	ldi	r18, 0x01	; 1
     786:	09 c0       	rjmp	.+18     	; 0x79a <isValidAccount+0x40>
				
            }
            else
            {
                p_account++;
     788:	4a 5e       	subi	r20, 0xEA	; 234
     78a:	5f 4f       	sbci	r21, 0xFF	; 255
     78c:	50 93 74 00 	sts	0x0074, r21	; 0x800074 <p_account+0x1>
     790:	40 93 73 00 	sts	0x0073, r20	; 0x800073 <p_account>
                exist_flag =0;
     794:	20 e0       	ldi	r18, 0x00	; 0
                break ;
     796:	03 c0       	rjmp	.+6      	; 0x79e <isValidAccount+0x44>
     798:	90 e0       	ldi	r25, 0x00	; 0
    uint8_t exist_flag = 0 ;
    EN_serverError_t server_status ;

    for(uint8_t account_num= 0 ; account_num< 10 ; account_num++) // num of accounts
    {
        for(uint8_t counter = 0 ; counter < 16 ; counter++)
     79a:	90 31       	cpi	r25, 0x10	; 16
     79c:	10 f3       	brcs	.-60     	; 0x762 <isValidAccount+0x8>
                exist_flag =0;
                break ;
            }
        }
		
		if (exist_flag)
     79e:	21 11       	cpse	r18, r1
     7a0:	03 c0       	rjmp	.+6      	; 0x7a8 <isValidAccount+0x4e>
{

    uint8_t exist_flag = 0 ;
    EN_serverError_t server_status ;

    for(uint8_t account_num= 0 ; account_num< 10 ; account_num++) // num of accounts
     7a2:	8f 5f       	subi	r24, 0xFF	; 255
     7a4:	8a 30       	cpi	r24, 0x0A	; 10
     7a6:	c0 f3       	brcs	.-16     	; 0x798 <isValidAccount+0x3e>
		}
		
		
    }

    if(exist_flag)
     7a8:	21 11       	cpse	r18, r1
     7aa:	06 c0       	rjmp	.+12     	; 0x7b8 <isValidAccount+0x5e>
        server_status = SERVER_OK ;
    }
    else
    {
        server_status =ACCOUNT_NOT_FOUND  ;
        p_account = NULL ;
     7ac:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <p_account+0x1>
     7b0:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <p_account>
    {
        server_status = SERVER_OK ;
    }
    else
    {
        server_status =ACCOUNT_NOT_FOUND  ;
     7b4:	83 e0       	ldi	r24, 0x03	; 3
     7b6:	08 95       	ret
		
    }

    if(exist_flag)
    {
        server_status = SERVER_OK ;
     7b8:	80 e0       	ldi	r24, 0x00	; 0




    return server_status ;
}
     7ba:	08 95       	ret

000007bc <isBlockedAccount>:


EN_serverError_t isBlockedAccount()
{

    if(_isValidAccount== SERVER_OK)
     7bc:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <_isValidAccount>
     7c0:	81 11       	cpse	r24, r1
     7c2:	08 c0       	rjmp	.+16     	; 0x7d4 <isBlockedAccount+0x18>
    {
        if (p_account->state==BLOCKED)
     7c4:	e0 91 73 00 	lds	r30, 0x0073	; 0x800073 <p_account>
     7c8:	f0 91 74 00 	lds	r31, 0x0074	; 0x800074 <p_account+0x1>
     7cc:	94 81       	ldd	r25, Z+4	; 0x04
     7ce:	91 30       	cpi	r25, 0x01	; 1
     7d0:	19 f4       	brne	.+6      	; 0x7d8 <isBlockedAccount+0x1c>
     7d2:	01 c0       	rjmp	.+2      	; 0x7d6 <isBlockedAccount+0x1a>

        }

    }

}
     7d4:	08 95       	ret
    {
        if (p_account->state==BLOCKED)
        {


            return BLOCKED_ACCOUNT ;
     7d6:	85 e0       	ldi	r24, 0x05	; 5

        }

    }

}
     7d8:	08 95       	ret

000007da <isAmountAvailable>:


/******************************************* isAmountAvailable **********************************************/
// calling terminal data and database
EN_serverError_t isAmountAvailable(float *termData)
{
     7da:	cf 93       	push	r28

    if(_isValidAccount==SERVER_OK && _isBlockedAccount == SERVER_OK)
     7dc:	20 91 4e 03 	lds	r18, 0x034E	; 0x80034e <_isValidAccount>
     7e0:	21 11       	cpse	r18, r1
     7e2:	16 c0       	rjmp	.+44     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
     7e4:	c0 91 4c 03 	lds	r28, 0x034C	; 0x80034c <_isBlockedAccount>
     7e8:	c1 11       	cpse	r28, r1
     7ea:	12 c0       	rjmp	.+36     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
     7ec:	dc 01       	movw	r26, r24
    {
        if ((p_account->balance)<(*termData))
     7ee:	e0 91 73 00 	lds	r30, 0x0073	; 0x800073 <p_account>
     7f2:	f0 91 74 00 	lds	r31, 0x0074	; 0x800074 <p_account+0x1>
     7f6:	60 81       	ld	r22, Z
     7f8:	71 81       	ldd	r23, Z+1	; 0x01
     7fa:	82 81       	ldd	r24, Z+2	; 0x02
     7fc:	93 81       	ldd	r25, Z+3	; 0x03
     7fe:	2d 91       	ld	r18, X+
     800:	3d 91       	ld	r19, X+
     802:	4d 91       	ld	r20, X+
     804:	5c 91       	ld	r21, X
     806:	0e 94 89 0c 	call	0x1912	; 0x1912 <__cmpsf2>
     80a:	88 23       	and	r24, r24
     80c:	14 f0       	brlt	.+4      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
     80e:	02 c0       	rjmp	.+4      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
        {
            return SERVER_OK;
        }

    }
}
     810:	02 c0       	rjmp	.+4      	; 0x816 <__DATA_REGION_LENGTH__+0x16>

    if(_isValidAccount==SERVER_OK && _isBlockedAccount == SERVER_OK)
    {
        if ((p_account->balance)<(*termData))
        {
            return LOW_BALANCE;
     812:	c4 e0       	ldi	r28, 0x04	; 4
     814:	8c 2f       	mov	r24, r28
        {
            return SERVER_OK;
        }

    }
}
     816:	cf 91       	pop	r28
     818:	08 95       	ret

0000081a <buzzer_init>:
/* Description:
Function used to initialize the buzzer connected pin as output
*********************************************************************************************************************************************/
void buzzer_init(void)
{
	DIO_INITPIN(pinb3,OUTPUT);
     81a:	60 e0       	ldi	r22, 0x00	; 0
     81c:	8b e0       	ldi	r24, 0x0B	; 11
     81e:	0e 94 af 06 	call	0xd5e	; 0xd5e <DIO_INITPIN>
     822:	08 95       	ret

00000824 <buzzer_On>:
/* Description:
Function used to put high voltage in buzzer pin
*******************************************************************************************************************************************/
void buzzer_On(void)
{
	DIO_WRITEPIN(pinb3,HIGH)	;
     824:	61 e0       	ldi	r22, 0x01	; 1
     826:	8b e0       	ldi	r24, 0x0B	; 11
     828:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_WRITEPIN>
     82c:	08 95       	ret

0000082e <buzzer_Off>:
/* Description:
Function used to put low voltage in buzzer pin
********************************************************************************************************************************************/
void buzzer_Off(void)
{
	DIO_WRITEPIN(pinb3,LOW)	;
     82e:	60 e0       	ldi	r22, 0x00	; 0
     830:	8b e0       	ldi	r24, 0x0B	; 11
     832:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_WRITEPIN>
     836:	08 95       	ret

00000838 <KEYPAD_init>:
/* Description:
- Function used to initialize the rows pins of keypad as output and set them high and initialize the columns pins of keypad as  input pullup
- FIRST_ROW_PIN , LAST_ROW_PIN ,FIRST_COL_PIN , LAST_COL_PIN are used to define the keypad dimensions and can be changed in configurations
************************************************************************************************************************************************/

void KEYPAD_init(void){
     838:	cf 93       	push	r28
	
	for (uint8_t row_pins = FIRST_ROW_PIN ; row_pins <= LAST_ROW_PIN ; row_pins++)
     83a:	c2 e1       	ldi	r28, 0x12	; 18
     83c:	09 c0       	rjmp	.+18     	; 0x850 <KEYPAD_init+0x18>
	{
		DIO_INITPIN(row_pins,OUTPUT);
     83e:	60 e0       	ldi	r22, 0x00	; 0
     840:	8c 2f       	mov	r24, r28
     842:	0e 94 af 06 	call	0xd5e	; 0xd5e <DIO_INITPIN>
		DIO_WRITEPIN(row_pins,HIGH);
     846:	61 e0       	ldi	r22, 0x01	; 1
     848:	8c 2f       	mov	r24, r28
     84a:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_WRITEPIN>
- FIRST_ROW_PIN , LAST_ROW_PIN ,FIRST_COL_PIN , LAST_COL_PIN are used to define the keypad dimensions and can be changed in configurations
************************************************************************************************************************************************/

void KEYPAD_init(void){
	
	for (uint8_t row_pins = FIRST_ROW_PIN ; row_pins <= LAST_ROW_PIN ; row_pins++)
     84e:	cf 5f       	subi	r28, 0xFF	; 255
     850:	c5 31       	cpi	r28, 0x15	; 21
     852:	a8 f3       	brcs	.-22     	; 0x83e <KEYPAD_init+0x6>
     854:	c5 e1       	ldi	r28, 0x15	; 21
     856:	05 c0       	rjmp	.+10     	; 0x862 <__stack+0x3>
		DIO_WRITEPIN(row_pins,HIGH);
	}
	
	for (uint8_t col_pins = FIRST_COL_PIN ; col_pins <= LAST_COL_PIN ; col_pins++)
	{
		DIO_INITPIN(col_pins,INPLUP);
     858:	62 e0       	ldi	r22, 0x02	; 2
     85a:	8c 2f       	mov	r24, r28
     85c:	0e 94 af 06 	call	0xd5e	; 0xd5e <DIO_INITPIN>
	{
		DIO_INITPIN(row_pins,OUTPUT);
		DIO_WRITEPIN(row_pins,HIGH);
	}
	
	for (uint8_t col_pins = FIRST_COL_PIN ; col_pins <= LAST_COL_PIN ; col_pins++)
     860:	cf 5f       	subi	r28, 0xFF	; 255
     862:	c8 31       	cpi	r28, 0x18	; 24
     864:	c8 f3       	brcs	.-14     	; 0x858 <KEYPAD_init+0x20>
		

	}
	
	
}
     866:	cf 91       	pop	r28
     868:	08 95       	ret

0000086a <KEYPAD_getKey>:
/* Description:
- Function used to return the data of the pressed key
- data can be changed in configurations
*************************************************************************************************************************************************/

uint8_t KEYPAD_getKey(){
     86a:	ff 92       	push	r15
     86c:	0f 93       	push	r16
     86e:	1f 93       	push	r17
     870:	cf 93       	push	r28
     872:	df 93       	push	r29
     874:	1f 92       	push	r1
     876:	cd b7       	in	r28, 0x3d	; 61
     878:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t a_col_state =1 ;
     87a:	81 e0       	ldi	r24, 0x01	; 1
     87c:	89 83       	std	Y+1, r24	; 0x01
	uint8_t  a_keychar ;
	
	//loop for rows
	for (uint8_t a_rows = FIRST_ROW_PIN ; a_rows <= LAST_ROW_PIN ; a_rows ++)
     87e:	02 e1       	ldi	r16, 0x12	; 18
     880:	b1 c0       	rjmp	.+354    	; 0x9e4 <KEYPAD_getKey+0x17a>
	{
		
		DIO_WRITEPIN(a_rows,LOW);
     882:	60 e0       	ldi	r22, 0x00	; 0
     884:	80 2f       	mov	r24, r16
     886:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_WRITEPIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     88a:	87 e8       	ldi	r24, 0x87	; 135
     88c:	93 e1       	ldi	r25, 0x13	; 19
     88e:	01 97       	sbiw	r24, 0x01	; 1
     890:	f1 f7       	brne	.-4      	; 0x88e <KEYPAD_getKey+0x24>
     892:	00 c0       	rjmp	.+0      	; 0x894 <KEYPAD_getKey+0x2a>
     894:	00 00       	nop
		_delay_ms(20);
		
		//loop  for columns
		for(uint8_t a_cols = FIRST_COL_PIN ; a_cols <= LAST_COL_PIN ; a_cols++){
     896:	15 e1       	ldi	r17, 0x15	; 21
     898:	9d c0       	rjmp	.+314    	; 0x9d4 <KEYPAD_getKey+0x16a>
			DIO_READPIN(a_cols,&a_col_state);
     89a:	be 01       	movw	r22, r28
     89c:	6f 5f       	subi	r22, 0xFF	; 255
     89e:	7f 4f       	sbci	r23, 0xFF	; 255
     8a0:	81 2f       	mov	r24, r17
     8a2:	0e 94 4e 08 	call	0x109c	; 0x109c <DIO_READPIN>
	
			while(a_col_state == 0){
     8a6:	91 c0       	rjmp	.+290    	; 0x9ca <KEYPAD_getKey+0x160>
				DIO_READPIN(a_cols,&a_col_state);
     8a8:	be 01       	movw	r22, r28
     8aa:	6f 5f       	subi	r22, 0xFF	; 255
     8ac:	7f 4f       	sbci	r23, 0xFF	; 255
     8ae:	81 2f       	mov	r24, r17
     8b0:	0e 94 4e 08 	call	0x109c	; 0x109c <DIO_READPIN>
				
				//check the pressed row0
				switch(a_rows){
     8b4:	03 31       	cpi	r16, 0x13	; 19
     8b6:	29 f1       	breq	.+74     	; 0x902 <KEYPAD_getKey+0x98>
     8b8:	18 f4       	brcc	.+6      	; 0x8c0 <KEYPAD_getKey+0x56>
     8ba:	02 31       	cpi	r16, 0x12	; 18
     8bc:	39 f0       	breq	.+14     	; 0x8cc <KEYPAD_getKey+0x62>
     8be:	70 c0       	rjmp	.+224    	; 0x9a0 <KEYPAD_getKey+0x136>
     8c0:	04 31       	cpi	r16, 0x14	; 20
     8c2:	d1 f1       	breq	.+116    	; 0x938 <KEYPAD_getKey+0xce>
     8c4:	05 31       	cpi	r16, 0x15	; 21
     8c6:	09 f4       	brne	.+2      	; 0x8ca <KEYPAD_getKey+0x60>
     8c8:	51 c0       	rjmp	.+162    	; 0x96c <KEYPAD_getKey+0x102>
     8ca:	6a c0       	rjmp	.+212    	; 0x9a0 <KEYPAD_getKey+0x136>
				
					case ROW_0 :
						
						//check the pressed column
						switch(a_cols){
     8cc:	16 31       	cpi	r17, 0x16	; 22
     8ce:	51 f0       	breq	.+20     	; 0x8e4 <KEYPAD_getKey+0x7a>
     8d0:	20 f4       	brcc	.+8      	; 0x8da <KEYPAD_getKey+0x70>
     8d2:	15 31       	cpi	r17, 0x15	; 21
     8d4:	09 f4       	brne	.+2      	; 0x8d8 <KEYPAD_getKey+0x6e>
     8d6:	66 c0       	rjmp	.+204    	; 0x9a4 <KEYPAD_getKey+0x13a>
     8d8:	78 c0       	rjmp	.+240    	; 0x9ca <KEYPAD_getKey+0x160>
     8da:	17 31       	cpi	r17, 0x17	; 23
     8dc:	41 f0       	breq	.+16     	; 0x8ee <KEYPAD_getKey+0x84>
     8de:	18 31       	cpi	r17, 0x18	; 24
     8e0:	59 f0       	breq	.+22     	; 0x8f8 <KEYPAD_getKey+0x8e>
     8e2:	73 c0       	rjmp	.+230    	; 0x9ca <KEYPAD_getKey+0x160>
							case COL_0 :
							a_keychar = KEYPAD_ROW_0_COLUMN_0 ;
							break;
							
							case COL_1 :
							a_keychar = KEYPAD_ROW_0_COLUMN_1;
     8e4:	0f 2e       	mov	r0, r31
     8e6:	f8 e3       	ldi	r31, 0x38	; 56
     8e8:	ff 2e       	mov	r15, r31
     8ea:	f0 2d       	mov	r31, r0
							break;
     8ec:	6e c0       	rjmp	.+220    	; 0x9ca <KEYPAD_getKey+0x160>
							
							case COL_2 :
							a_keychar = KEYPAD_ROW_0_COLUMN_2;
     8ee:	0f 2e       	mov	r0, r31
     8f0:	f9 e3       	ldi	r31, 0x39	; 57
     8f2:	ff 2e       	mov	r15, r31
     8f4:	f0 2d       	mov	r31, r0
							break;
     8f6:	69 c0       	rjmp	.+210    	; 0x9ca <KEYPAD_getKey+0x160>
							
							case COL_3 :
							a_keychar = KEYPAD_ROW_0_COLUMN_3;
     8f8:	0f 2e       	mov	r0, r31
     8fa:	ff e2       	ldi	r31, 0x2F	; 47
     8fc:	ff 2e       	mov	r15, r31
     8fe:	f0 2d       	mov	r31, r0
							break;
     900:	64 c0       	rjmp	.+200    	; 0x9ca <KEYPAD_getKey+0x160>
						
						
						
				  case ROW_1 :
					//check the pressed column
					switch(a_cols){
     902:	16 31       	cpi	r17, 0x16	; 22
     904:	51 f0       	breq	.+20     	; 0x91a <KEYPAD_getKey+0xb0>
     906:	20 f4       	brcc	.+8      	; 0x910 <KEYPAD_getKey+0xa6>
     908:	15 31       	cpi	r17, 0x15	; 21
     90a:	09 f4       	brne	.+2      	; 0x90e <KEYPAD_getKey+0xa4>
     90c:	50 c0       	rjmp	.+160    	; 0x9ae <KEYPAD_getKey+0x144>
     90e:	5d c0       	rjmp	.+186    	; 0x9ca <KEYPAD_getKey+0x160>
     910:	17 31       	cpi	r17, 0x17	; 23
     912:	41 f0       	breq	.+16     	; 0x924 <KEYPAD_getKey+0xba>
     914:	18 31       	cpi	r17, 0x18	; 24
     916:	59 f0       	breq	.+22     	; 0x92e <KEYPAD_getKey+0xc4>
     918:	58 c0       	rjmp	.+176    	; 0x9ca <KEYPAD_getKey+0x160>
							case COL_0 :
							a_keychar= KEYPAD_ROW_1_COLUMN_0 ;
							break;
							
							case COL_1 :
							a_keychar = KEYPAD_ROW_1_COLUMN_1;
     91a:	0f 2e       	mov	r0, r31
     91c:	f5 e3       	ldi	r31, 0x35	; 53
     91e:	ff 2e       	mov	r15, r31
     920:	f0 2d       	mov	r31, r0
							break;
     922:	53 c0       	rjmp	.+166    	; 0x9ca <KEYPAD_getKey+0x160>
							
							case COL_2 :
							a_keychar= KEYPAD_ROW_1_COLUMN_2;
     924:	0f 2e       	mov	r0, r31
     926:	f6 e3       	ldi	r31, 0x36	; 54
     928:	ff 2e       	mov	r15, r31
     92a:	f0 2d       	mov	r31, r0
							break;
     92c:	4e c0       	rjmp	.+156    	; 0x9ca <KEYPAD_getKey+0x160>
							
							case COL_3 :
							a_keychar = KEYPAD_ROW_1_COLUMN_3;
     92e:	0f 2e       	mov	r0, r31
     930:	fa e2       	ldi	r31, 0x2A	; 42
     932:	ff 2e       	mov	r15, r31
     934:	f0 2d       	mov	r31, r0
							break;
     936:	49 c0       	rjmp	.+146    	; 0x9ca <KEYPAD_getKey+0x160>
						
						
				  case ROW_2 :
						
					//check the pressed column
					switch(a_cols){
     938:	16 31       	cpi	r17, 0x16	; 22
     93a:	49 f0       	breq	.+18     	; 0x94e <KEYPAD_getKey+0xe4>
     93c:	18 f4       	brcc	.+6      	; 0x944 <KEYPAD_getKey+0xda>
     93e:	15 31       	cpi	r17, 0x15	; 21
     940:	d9 f1       	breq	.+118    	; 0x9b8 <KEYPAD_getKey+0x14e>
     942:	43 c0       	rjmp	.+134    	; 0x9ca <KEYPAD_getKey+0x160>
     944:	17 31       	cpi	r17, 0x17	; 23
     946:	41 f0       	breq	.+16     	; 0x958 <KEYPAD_getKey+0xee>
     948:	18 31       	cpi	r17, 0x18	; 24
     94a:	59 f0       	breq	.+22     	; 0x962 <KEYPAD_getKey+0xf8>
     94c:	3e c0       	rjmp	.+124    	; 0x9ca <KEYPAD_getKey+0x160>
							case COL_0 :
							a_keychar= KEYPAD_ROW_2_COLUMN_0 ;
							break;
							
							case COL_1 :
							a_keychar = KEYPAD_ROW_2_COLUMN_1;
     94e:	0f 2e       	mov	r0, r31
     950:	f2 e3       	ldi	r31, 0x32	; 50
     952:	ff 2e       	mov	r15, r31
     954:	f0 2d       	mov	r31, r0
							break;
     956:	39 c0       	rjmp	.+114    	; 0x9ca <KEYPAD_getKey+0x160>
							
							case COL_2 :
							a_keychar= KEYPAD_ROW_2_COLUMN_2;
     958:	0f 2e       	mov	r0, r31
     95a:	f3 e3       	ldi	r31, 0x33	; 51
     95c:	ff 2e       	mov	r15, r31
     95e:	f0 2d       	mov	r31, r0
							break;
     960:	34 c0       	rjmp	.+104    	; 0x9ca <KEYPAD_getKey+0x160>
							
							case COL_3 :
							a_keychar = KEYPAD_ROW_2_COLUMN_3;
     962:	0f 2e       	mov	r0, r31
     964:	fd e2       	ldi	r31, 0x2D	; 45
     966:	ff 2e       	mov	r15, r31
     968:	f0 2d       	mov	r31, r0
							break;
     96a:	2f c0       	rjmp	.+94     	; 0x9ca <KEYPAD_getKey+0x160>
						
						
				  case ROW_3 :
						
					//check the pressed column
				   switch(a_cols){
     96c:	16 31       	cpi	r17, 0x16	; 22
     96e:	49 f0       	breq	.+18     	; 0x982 <KEYPAD_getKey+0x118>
     970:	18 f4       	brcc	.+6      	; 0x978 <KEYPAD_getKey+0x10e>
     972:	15 31       	cpi	r17, 0x15	; 21
     974:	31 f1       	breq	.+76     	; 0x9c2 <KEYPAD_getKey+0x158>
     976:	29 c0       	rjmp	.+82     	; 0x9ca <KEYPAD_getKey+0x160>
     978:	17 31       	cpi	r17, 0x17	; 23
     97a:	41 f0       	breq	.+16     	; 0x98c <KEYPAD_getKey+0x122>
     97c:	18 31       	cpi	r17, 0x18	; 24
     97e:	59 f0       	breq	.+22     	; 0x996 <KEYPAD_getKey+0x12c>
     980:	24 c0       	rjmp	.+72     	; 0x9ca <KEYPAD_getKey+0x160>
							case COL_0 :
							a_keychar= KEYPAD_ROW_3_COLUMN_0 ;
							break;
							
							case COL_1 :
							a_keychar = KEYPAD_ROW_3_COLUMN_1;
     982:	0f 2e       	mov	r0, r31
     984:	f0 e3       	ldi	r31, 0x30	; 48
     986:	ff 2e       	mov	r15, r31
     988:	f0 2d       	mov	r31, r0
							break;
     98a:	1f c0       	rjmp	.+62     	; 0x9ca <KEYPAD_getKey+0x160>
							
							case COL_2 :
							a_keychar= KEYPAD_ROW_3_COLUMN_2;
     98c:	0f 2e       	mov	r0, r31
     98e:	fd e3       	ldi	r31, 0x3D	; 61
     990:	ff 2e       	mov	r15, r31
     992:	f0 2d       	mov	r31, r0
							break;
     994:	1a c0       	rjmp	.+52     	; 0x9ca <KEYPAD_getKey+0x160>
							
							case COL_3 :
							a_keychar = KEYPAD_ROW_3_COLUMN_3;
     996:	0f 2e       	mov	r0, r31
     998:	fb e2       	ldi	r31, 0x2B	; 43
     99a:	ff 2e       	mov	r15, r31
     99c:	f0 2d       	mov	r31, r0
							break;
     99e:	15 c0       	rjmp	.+42     	; 0x9ca <KEYPAD_getKey+0x160>
						
						

			// no press			
			default: 
			a_keychar = 0;
     9a0:	f1 2c       	mov	r15, r1
     9a2:	13 c0       	rjmp	.+38     	; 0x9ca <KEYPAD_getKey+0x160>
						
						//check the pressed column
						switch(a_cols){
							
							case COL_0 :
							a_keychar = KEYPAD_ROW_0_COLUMN_0 ;
     9a4:	0f 2e       	mov	r0, r31
     9a6:	f7 e3       	ldi	r31, 0x37	; 55
     9a8:	ff 2e       	mov	r15, r31
     9aa:	f0 2d       	mov	r31, r0
     9ac:	0e c0       	rjmp	.+28     	; 0x9ca <KEYPAD_getKey+0x160>
				  case ROW_1 :
					//check the pressed column
					switch(a_cols){
							
							case COL_0 :
							a_keychar= KEYPAD_ROW_1_COLUMN_0 ;
     9ae:	0f 2e       	mov	r0, r31
     9b0:	f4 e3       	ldi	r31, 0x34	; 52
     9b2:	ff 2e       	mov	r15, r31
     9b4:	f0 2d       	mov	r31, r0
     9b6:	09 c0       	rjmp	.+18     	; 0x9ca <KEYPAD_getKey+0x160>
						
					//check the pressed column
					switch(a_cols){
							
							case COL_0 :
							a_keychar= KEYPAD_ROW_2_COLUMN_0 ;
     9b8:	0f 2e       	mov	r0, r31
     9ba:	f1 e3       	ldi	r31, 0x31	; 49
     9bc:	ff 2e       	mov	r15, r31
     9be:	f0 2d       	mov	r31, r0
     9c0:	04 c0       	rjmp	.+8      	; 0x9ca <KEYPAD_getKey+0x160>
						
					//check the pressed column
				   switch(a_cols){
							
							case COL_0 :
							a_keychar= KEYPAD_ROW_3_COLUMN_0 ;
     9c2:	0f 2e       	mov	r0, r31
     9c4:	f1 e4       	ldi	r31, 0x41	; 65
     9c6:	ff 2e       	mov	r15, r31
     9c8:	f0 2d       	mov	r31, r0
		
		//loop  for columns
		for(uint8_t a_cols = FIRST_COL_PIN ; a_cols <= LAST_COL_PIN ; a_cols++){
			DIO_READPIN(a_cols,&a_col_state);
	
			while(a_col_state == 0){
     9ca:	89 81       	ldd	r24, Y+1	; 0x01
     9cc:	88 23       	and	r24, r24
     9ce:	09 f4       	brne	.+2      	; 0x9d2 <KEYPAD_getKey+0x168>
     9d0:	6b cf       	rjmp	.-298    	; 0x8a8 <KEYPAD_getKey+0x3e>
		
		DIO_WRITEPIN(a_rows,LOW);
		_delay_ms(20);
		
		//loop  for columns
		for(uint8_t a_cols = FIRST_COL_PIN ; a_cols <= LAST_COL_PIN ; a_cols++){
     9d2:	1f 5f       	subi	r17, 0xFF	; 255
     9d4:	18 31       	cpi	r17, 0x18	; 24
     9d6:	08 f4       	brcc	.+2      	; 0x9da <KEYPAD_getKey+0x170>
     9d8:	60 cf       	rjmp	.-320    	; 0x89a <KEYPAD_getKey+0x30>
				}
			
		}
		
		
		DIO_WRITEPIN(a_rows,HIGH);
     9da:	61 e0       	ldi	r22, 0x01	; 1
     9dc:	80 2f       	mov	r24, r16
     9de:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_WRITEPIN>
	
	uint8_t a_col_state =1 ;
	uint8_t  a_keychar ;
	
	//loop for rows
	for (uint8_t a_rows = FIRST_ROW_PIN ; a_rows <= LAST_ROW_PIN ; a_rows ++)
     9e2:	0f 5f       	subi	r16, 0xFF	; 255
     9e4:	05 31       	cpi	r16, 0x15	; 21
     9e6:	08 f4       	brcc	.+2      	; 0x9ea <KEYPAD_getKey+0x180>
     9e8:	4c cf       	rjmp	.-360    	; 0x882 <KEYPAD_getKey+0x18>
		DIO_WRITEPIN(a_rows,HIGH);
		
	}
	
	return a_keychar ;
     9ea:	8f 2d       	mov	r24, r15
     9ec:	0f 90       	pop	r0
     9ee:	df 91       	pop	r29
     9f0:	cf 91       	pop	r28
     9f2:	1f 91       	pop	r17
     9f4:	0f 91       	pop	r16
     9f6:	ff 90       	pop	r15
     9f8:	08 95       	ret

000009fa <LCD_WRITE_COMMAND>:
/*************************************************************************************************
                                     4_bit_mode
*****************************************************************************************************/

void LCD_WRITE_COMMAND(uint8_t a_COMMAND)
{
     9fa:	cf 93       	push	r28
     9fc:	c8 2f       	mov	r28, r24
	DIO_WRITEPIN(RS,LOW);
     9fe:	60 e0       	ldi	r22, 0x00	; 0
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_WRITEPIN>
	DIO_WRITEPIN(RW,LOW);
     a06:	60 e0       	ldi	r22, 0x00	; 0
     a08:	82 e0       	ldi	r24, 0x02	; 2
     a0a:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_WRITEPIN>
	/**for the 4 most significant bits**/
	DIO_WRITEPIN(D4,read_bit(a_COMMAND,4));
     a0e:	c4 fb       	bst	r28, 4
     a10:	66 27       	eor	r22, r22
     a12:	60 f9       	bld	r22, 0
     a14:	84 e0       	ldi	r24, 0x04	; 4
     a16:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_WRITEPIN>
	DIO_WRITEPIN(D5,read_bit(a_COMMAND,5));
     a1a:	c5 fb       	bst	r28, 5
     a1c:	66 27       	eor	r22, r22
     a1e:	60 f9       	bld	r22, 0
     a20:	85 e0       	ldi	r24, 0x05	; 5
     a22:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_WRITEPIN>
	DIO_WRITEPIN(D6,read_bit(a_COMMAND,6));
     a26:	c6 fb       	bst	r28, 6
     a28:	66 27       	eor	r22, r22
     a2a:	60 f9       	bld	r22, 0
     a2c:	86 e0       	ldi	r24, 0x06	; 6
     a2e:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_WRITEPIN>
	DIO_WRITEPIN(D7,read_bit(a_COMMAND,7));
     a32:	6c 2f       	mov	r22, r28
     a34:	66 1f       	adc	r22, r22
     a36:	66 27       	eor	r22, r22
     a38:	66 1f       	adc	r22, r22
     a3a:	87 e0       	ldi	r24, 0x07	; 7
     a3c:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_WRITEPIN>
	DIO_WRITEPIN(EN,HIGH);
     a40:	61 e0       	ldi	r22, 0x01	; 1
     a42:	83 e0       	ldi	r24, 0x03	; 3
     a44:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_WRITEPIN>
     a48:	89 ef       	ldi	r24, 0xF9	; 249
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	01 97       	sbiw	r24, 0x01	; 1
     a4e:	f1 f7       	brne	.-4      	; 0xa4c <LCD_WRITE_COMMAND+0x52>
     a50:	00 c0       	rjmp	.+0      	; 0xa52 <LCD_WRITE_COMMAND+0x58>
     a52:	00 00       	nop
	_delay_ms(1);
	DIO_WRITEPIN(EN,LOW);
     a54:	60 e0       	ldi	r22, 0x00	; 0
     a56:	83 e0       	ldi	r24, 0x03	; 3
     a58:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_WRITEPIN>
     a5c:	89 ef       	ldi	r24, 0xF9	; 249
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	01 97       	sbiw	r24, 0x01	; 1
     a62:	f1 f7       	brne	.-4      	; 0xa60 <LCD_WRITE_COMMAND+0x66>
     a64:	00 c0       	rjmp	.+0      	; 0xa66 <LCD_WRITE_COMMAND+0x6c>
     a66:	00 00       	nop
	_delay_ms(1);
	/**for the 4 least significant bits**/
	DIO_WRITEPIN(D4,read_bit(a_COMMAND,0));
     a68:	6c 2f       	mov	r22, r28
     a6a:	61 70       	andi	r22, 0x01	; 1
     a6c:	84 e0       	ldi	r24, 0x04	; 4
     a6e:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_WRITEPIN>
	DIO_WRITEPIN(D5,read_bit(a_COMMAND,1));
     a72:	c1 fb       	bst	r28, 1
     a74:	66 27       	eor	r22, r22
     a76:	60 f9       	bld	r22, 0
     a78:	85 e0       	ldi	r24, 0x05	; 5
     a7a:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_WRITEPIN>
	DIO_WRITEPIN(D6,read_bit(a_COMMAND,2));
     a7e:	c2 fb       	bst	r28, 2
     a80:	66 27       	eor	r22, r22
     a82:	60 f9       	bld	r22, 0
     a84:	86 e0       	ldi	r24, 0x06	; 6
     a86:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_WRITEPIN>
	DIO_WRITEPIN(D7,read_bit(a_COMMAND,3));
     a8a:	c3 fb       	bst	r28, 3
     a8c:	66 27       	eor	r22, r22
     a8e:	60 f9       	bld	r22, 0
     a90:	87 e0       	ldi	r24, 0x07	; 7
     a92:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_WRITEPIN>
	DIO_WRITEPIN(EN,HIGH);
     a96:	61 e0       	ldi	r22, 0x01	; 1
     a98:	83 e0       	ldi	r24, 0x03	; 3
     a9a:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_WRITEPIN>
     a9e:	89 ef       	ldi	r24, 0xF9	; 249
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	01 97       	sbiw	r24, 0x01	; 1
     aa4:	f1 f7       	brne	.-4      	; 0xaa2 <LCD_WRITE_COMMAND+0xa8>
     aa6:	00 c0       	rjmp	.+0      	; 0xaa8 <LCD_WRITE_COMMAND+0xae>
     aa8:	00 00       	nop
	_delay_ms(1);
	DIO_WRITEPIN(EN,LOW);
     aaa:	60 e0       	ldi	r22, 0x00	; 0
     aac:	83 e0       	ldi	r24, 0x03	; 3
     aae:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_WRITEPIN>
     ab2:	89 ef       	ldi	r24, 0xF9	; 249
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	01 97       	sbiw	r24, 0x01	; 1
     ab8:	f1 f7       	brne	.-4      	; 0xab6 <LCD_WRITE_COMMAND+0xbc>
     aba:	00 c0       	rjmp	.+0      	; 0xabc <LCD_WRITE_COMMAND+0xc2>
     abc:	00 00       	nop
	_delay_ms(1);
}
     abe:	cf 91       	pop	r28
     ac0:	08 95       	ret

00000ac2 <LCD_WRITE_DATA>:

/*************************************************************************************************************************/

void LCD_WRITE_DATA(uint8_t a_DATA)
{
     ac2:	cf 93       	push	r28
     ac4:	c8 2f       	mov	r28, r24
	DIO_WRITEPIN(RS,HIGH);
     ac6:	61 e0       	ldi	r22, 0x01	; 1
     ac8:	81 e0       	ldi	r24, 0x01	; 1
     aca:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_WRITEPIN>
	DIO_WRITEPIN(RW,LOW);
     ace:	60 e0       	ldi	r22, 0x00	; 0
     ad0:	82 e0       	ldi	r24, 0x02	; 2
     ad2:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_WRITEPIN>
	/**for the 4 most significant bits**/
	DIO_WRITEPIN(D4,read_bit(a_DATA,4));
     ad6:	c4 fb       	bst	r28, 4
     ad8:	66 27       	eor	r22, r22
     ada:	60 f9       	bld	r22, 0
     adc:	84 e0       	ldi	r24, 0x04	; 4
     ade:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_WRITEPIN>
	DIO_WRITEPIN(D5,read_bit(a_DATA,5));
     ae2:	c5 fb       	bst	r28, 5
     ae4:	66 27       	eor	r22, r22
     ae6:	60 f9       	bld	r22, 0
     ae8:	85 e0       	ldi	r24, 0x05	; 5
     aea:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_WRITEPIN>
	DIO_WRITEPIN(D6,read_bit(a_DATA,6));
     aee:	c6 fb       	bst	r28, 6
     af0:	66 27       	eor	r22, r22
     af2:	60 f9       	bld	r22, 0
     af4:	86 e0       	ldi	r24, 0x06	; 6
     af6:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_WRITEPIN>
	DIO_WRITEPIN(D7,read_bit(a_DATA,7));
     afa:	6c 2f       	mov	r22, r28
     afc:	66 1f       	adc	r22, r22
     afe:	66 27       	eor	r22, r22
     b00:	66 1f       	adc	r22, r22
     b02:	87 e0       	ldi	r24, 0x07	; 7
     b04:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_WRITEPIN>
	DIO_WRITEPIN(EN,HIGH);
     b08:	61 e0       	ldi	r22, 0x01	; 1
     b0a:	83 e0       	ldi	r24, 0x03	; 3
     b0c:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_WRITEPIN>
     b10:	89 ef       	ldi	r24, 0xF9	; 249
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	01 97       	sbiw	r24, 0x01	; 1
     b16:	f1 f7       	brne	.-4      	; 0xb14 <LCD_WRITE_DATA+0x52>
     b18:	00 c0       	rjmp	.+0      	; 0xb1a <LCD_WRITE_DATA+0x58>
     b1a:	00 00       	nop
	_delay_ms(1);
	DIO_WRITEPIN(EN,LOW);
     b1c:	60 e0       	ldi	r22, 0x00	; 0
     b1e:	83 e0       	ldi	r24, 0x03	; 3
     b20:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_WRITEPIN>
     b24:	89 ef       	ldi	r24, 0xF9	; 249
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	01 97       	sbiw	r24, 0x01	; 1
     b2a:	f1 f7       	brne	.-4      	; 0xb28 <LCD_WRITE_DATA+0x66>
     b2c:	00 c0       	rjmp	.+0      	; 0xb2e <LCD_WRITE_DATA+0x6c>
     b2e:	00 00       	nop
	_delay_ms(1);
	/**for the 4 least significant bits**/
	DIO_WRITEPIN(D4,read_bit(a_DATA,0));
     b30:	6c 2f       	mov	r22, r28
     b32:	61 70       	andi	r22, 0x01	; 1
     b34:	84 e0       	ldi	r24, 0x04	; 4
     b36:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_WRITEPIN>
	DIO_WRITEPIN(D5,read_bit(a_DATA,1));
     b3a:	c1 fb       	bst	r28, 1
     b3c:	66 27       	eor	r22, r22
     b3e:	60 f9       	bld	r22, 0
     b40:	85 e0       	ldi	r24, 0x05	; 5
     b42:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_WRITEPIN>
	DIO_WRITEPIN(D6,read_bit(a_DATA,2));
     b46:	c2 fb       	bst	r28, 2
     b48:	66 27       	eor	r22, r22
     b4a:	60 f9       	bld	r22, 0
     b4c:	86 e0       	ldi	r24, 0x06	; 6
     b4e:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_WRITEPIN>
	DIO_WRITEPIN(D7,read_bit(a_DATA,3));
     b52:	c3 fb       	bst	r28, 3
     b54:	66 27       	eor	r22, r22
     b56:	60 f9       	bld	r22, 0
     b58:	87 e0       	ldi	r24, 0x07	; 7
     b5a:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_WRITEPIN>
	DIO_WRITEPIN(EN,HIGH);
     b5e:	61 e0       	ldi	r22, 0x01	; 1
     b60:	83 e0       	ldi	r24, 0x03	; 3
     b62:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_WRITEPIN>
     b66:	89 ef       	ldi	r24, 0xF9	; 249
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	01 97       	sbiw	r24, 0x01	; 1
     b6c:	f1 f7       	brne	.-4      	; 0xb6a <LCD_WRITE_DATA+0xa8>
     b6e:	00 c0       	rjmp	.+0      	; 0xb70 <LCD_WRITE_DATA+0xae>
     b70:	00 00       	nop
	_delay_ms(1);
	DIO_WRITEPIN(EN,LOW);
     b72:	60 e0       	ldi	r22, 0x00	; 0
     b74:	83 e0       	ldi	r24, 0x03	; 3
     b76:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_WRITEPIN>
     b7a:	89 ef       	ldi	r24, 0xF9	; 249
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	01 97       	sbiw	r24, 0x01	; 1
     b80:	f1 f7       	brne	.-4      	; 0xb7e <LCD_WRITE_DATA+0xbc>
     b82:	00 c0       	rjmp	.+0      	; 0xb84 <LCD_WRITE_DATA+0xc2>
     b84:	00 00       	nop
	_delay_ms(1);
}
     b86:	cf 91       	pop	r28
     b88:	08 95       	ret

00000b8a <LCD_INIT>:
/*************************************************************************************************************************/

void LCD_INIT(void)
{
	
	DIO_INITPIN(pina1,OUTPUT);
     b8a:	60 e0       	ldi	r22, 0x00	; 0
     b8c:	81 e0       	ldi	r24, 0x01	; 1
     b8e:	0e 94 af 06 	call	0xd5e	; 0xd5e <DIO_INITPIN>
	DIO_INITPIN(pina2,OUTPUT);
     b92:	60 e0       	ldi	r22, 0x00	; 0
     b94:	82 e0       	ldi	r24, 0x02	; 2
     b96:	0e 94 af 06 	call	0xd5e	; 0xd5e <DIO_INITPIN>
	DIO_INITPIN(pina3,OUTPUT);
     b9a:	60 e0       	ldi	r22, 0x00	; 0
     b9c:	83 e0       	ldi	r24, 0x03	; 3
     b9e:	0e 94 af 06 	call	0xd5e	; 0xd5e <DIO_INITPIN>
	DIO_INITPIN(pina4,OUTPUT);
     ba2:	60 e0       	ldi	r22, 0x00	; 0
     ba4:	84 e0       	ldi	r24, 0x04	; 4
     ba6:	0e 94 af 06 	call	0xd5e	; 0xd5e <DIO_INITPIN>
	DIO_INITPIN(pina5,OUTPUT);
     baa:	60 e0       	ldi	r22, 0x00	; 0
     bac:	85 e0       	ldi	r24, 0x05	; 5
     bae:	0e 94 af 06 	call	0xd5e	; 0xd5e <DIO_INITPIN>
	DIO_INITPIN(pina6,OUTPUT);
     bb2:	60 e0       	ldi	r22, 0x00	; 0
     bb4:	86 e0       	ldi	r24, 0x06	; 6
     bb6:	0e 94 af 06 	call	0xd5e	; 0xd5e <DIO_INITPIN>
	DIO_INITPIN(pina7,OUTPUT);
     bba:	60 e0       	ldi	r22, 0x00	; 0
     bbc:	87 e0       	ldi	r24, 0x07	; 7
     bbe:	0e 94 af 06 	call	0xd5e	; 0xd5e <DIO_INITPIN>
     bc2:	83 ed       	ldi	r24, 0xD3	; 211
     bc4:	90 e3       	ldi	r25, 0x30	; 48
     bc6:	01 97       	sbiw	r24, 0x01	; 1
     bc8:	f1 f7       	brne	.-4      	; 0xbc6 <LCD_INIT+0x3c>
     bca:	00 c0       	rjmp	.+0      	; 0xbcc <LCD_INIT+0x42>
     bcc:	00 00       	nop
	
	
	_delay_ms(50);
	LCD_WRITE_COMMAND(0x02);
     bce:	82 e0       	ldi	r24, 0x02	; 2
     bd0:	0e 94 fd 04 	call	0x9fa	; 0x9fa <LCD_WRITE_COMMAND>
     bd4:	89 ef       	ldi	r24, 0xF9	; 249
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	01 97       	sbiw	r24, 0x01	; 1
     bda:	f1 f7       	brne	.-4      	; 0xbd8 <LCD_INIT+0x4e>
     bdc:	00 c0       	rjmp	.+0      	; 0xbde <LCD_INIT+0x54>
     bde:	00 00       	nop
	_delay_ms(1);
	LCD_WRITE_COMMAND(0X28);                     /* THIS IS FOR FUNCTION SET IN THE DATA SHEET  4BIT MODE, 2LINE, 5*7*/
     be0:	88 e2       	ldi	r24, 0x28	; 40
     be2:	0e 94 fd 04 	call	0x9fa	; 0x9fa <LCD_WRITE_COMMAND>
     be6:	89 ef       	ldi	r24, 0xF9	; 249
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	01 97       	sbiw	r24, 0x01	; 1
     bec:	f1 f7       	brne	.-4      	; 0xbea <LCD_INIT+0x60>
     bee:	00 c0       	rjmp	.+0      	; 0xbf0 <LCD_INIT+0x66>
     bf0:	00 00       	nop
	_delay_ms(1);
	LCD_WRITE_COMMAND(0x0c);                     /*SCREEN ON, CURSOR OFF*/
     bf2:	8c e0       	ldi	r24, 0x0C	; 12
     bf4:	0e 94 fd 04 	call	0x9fa	; 0x9fa <LCD_WRITE_COMMAND>
     bf8:	89 ef       	ldi	r24, 0xF9	; 249
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	01 97       	sbiw	r24, 0x01	; 1
     bfe:	f1 f7       	brne	.-4      	; 0xbfc <LCD_INIT+0x72>
     c00:	00 c0       	rjmp	.+0      	; 0xc02 <LCD_INIT+0x78>
     c02:	00 00       	nop
	_delay_ms(1);
	LCD_WRITE_COMMAND(0X01);                      /*CLEAR SCREEN*/
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	0e 94 fd 04 	call	0x9fa	; 0x9fa <LCD_WRITE_COMMAND>
     c0a:	83 ef       	ldi	r24, 0xF3	; 243
     c0c:	91 e0       	ldi	r25, 0x01	; 1
     c0e:	01 97       	sbiw	r24, 0x01	; 1
     c10:	f1 f7       	brne	.-4      	; 0xc0e <LCD_INIT+0x84>
     c12:	00 c0       	rjmp	.+0      	; 0xc14 <LCD_INIT+0x8a>
     c14:	00 00       	nop
	_delay_ms(2);
	LCD_WRITE_COMMAND(0X06);
     c16:	86 e0       	ldi	r24, 0x06	; 6
     c18:	0e 94 fd 04 	call	0x9fa	; 0x9fa <LCD_WRITE_COMMAND>
     c1c:	89 ef       	ldi	r24, 0xF9	; 249
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	01 97       	sbiw	r24, 0x01	; 1
     c22:	f1 f7       	brne	.-4      	; 0xc20 <LCD_INIT+0x96>
     c24:	00 c0       	rjmp	.+0      	; 0xc26 <LCD_INIT+0x9c>
     c26:	00 00       	nop
     c28:	08 95       	ret

00000c2a <LCD_Write_String>:
********************************************************************************************************/
/**DESCRIPTION:-
  This Function Takes a Full String and Displays It
  **/
void LCD_Write_String(uint8_t*a_String)
{
     c2a:	0f 93       	push	r16
     c2c:	1f 93       	push	r17
     c2e:	cf 93       	push	r28
     c30:	8c 01       	movw	r16, r24
	uint8_t L_Index_i=0;
     c32:	c0 e0       	ldi	r28, 0x00	; 0
	while(a_String[L_Index_i])
     c34:	03 c0       	rjmp	.+6      	; 0xc3c <LCD_Write_String+0x12>
	{
		LCD_WRITE_DATA(a_String[L_Index_i]);
     c36:	0e 94 61 05 	call	0xac2	; 0xac2 <LCD_WRITE_DATA>
		L_Index_i++;
     c3a:	cf 5f       	subi	r28, 0xFF	; 255
  This Function Takes a Full String and Displays It
  **/
void LCD_Write_String(uint8_t*a_String)
{
	uint8_t L_Index_i=0;
	while(a_String[L_Index_i])
     c3c:	f8 01       	movw	r30, r16
     c3e:	ec 0f       	add	r30, r28
     c40:	f1 1d       	adc	r31, r1
     c42:	80 81       	ld	r24, Z
     c44:	81 11       	cpse	r24, r1
     c46:	f7 cf       	rjmp	.-18     	; 0xc36 <LCD_Write_String+0xc>
	{
		LCD_WRITE_DATA(a_String[L_Index_i]);
		L_Index_i++;
	}
}
     c48:	cf 91       	pop	r28
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	08 95       	ret

00000c50 <LCD_Write_Number>:
/********************************************************************************************/
/**DESCRIPTION:-
  This Function Takes a Number and Displays IT
  **/
void LCD_Write_Number(uint32_t a_number)
{
     c50:	cf 92       	push	r12
     c52:	df 92       	push	r13
     c54:	ef 92       	push	r14
     c56:	ff 92       	push	r15
     c58:	1f 93       	push	r17
     c5a:	cf 93       	push	r28
     c5c:	df 93       	push	r29
     c5e:	cd b7       	in	r28, 0x3d	; 61
     c60:	de b7       	in	r29, 0x3e	; 62
     c62:	60 97       	sbiw	r28, 0x10	; 16
     c64:	0f b6       	in	r0, 0x3f	; 63
     c66:	f8 94       	cli
     c68:	de bf       	out	0x3e, r29	; 62
     c6a:	0f be       	out	0x3f, r0	; 63
     c6c:	cd bf       	out	0x3d, r28	; 61
     c6e:	6b 01       	movw	r12, r22
     c70:	7c 01       	movw	r14, r24
	uint8_t L_Remainder=0,L_Arr[16],L_Index_i=0,L_Index_j;
	if (a_number==0)
     c72:	67 2b       	or	r22, r23
     c74:	68 2b       	or	r22, r24
     c76:	69 2b       	or	r22, r25
     c78:	19 f4       	brne	.+6      	; 0xc80 <LCD_Write_Number+0x30>
	{
		LCD_WRITE_DATA('0');
     c7a:	80 e3       	ldi	r24, 0x30	; 48
     c7c:	0e 94 61 05 	call	0xac2	; 0xac2 <LCD_WRITE_DATA>
/********************************************************************************************/
/**DESCRIPTION:-
  This Function Takes a Number and Displays IT
  **/
void LCD_Write_Number(uint32_t a_number)
{
     c80:	10 e0       	ldi	r17, 0x00	; 0
     c82:	15 c0       	rjmp	.+42     	; 0xcae <LCD_Write_Number+0x5e>
	{
		LCD_WRITE_DATA('0');
	}
	while(a_number>0)
	{
	L_Remainder=a_number%10;
     c84:	c7 01       	movw	r24, r14
     c86:	b6 01       	movw	r22, r12
     c88:	2a e0       	ldi	r18, 0x0A	; 10
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	40 e0       	ldi	r20, 0x00	; 0
     c8e:	50 e0       	ldi	r21, 0x00	; 0
     c90:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <__udivmodsi4>
	L_Arr[L_Index_i]=L_Remainder+'0';    /*tp display the number it self, when we add the zero asci it shits the number to it's asci*/
     c94:	e1 e0       	ldi	r30, 0x01	; 1
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	ec 0f       	add	r30, r28
     c9a:	fd 1f       	adc	r31, r29
     c9c:	e1 0f       	add	r30, r17
     c9e:	f1 1d       	adc	r31, r1
     ca0:	60 5d       	subi	r22, 0xD0	; 208
     ca2:	60 83       	st	Z, r22
	L_Index_i++;
     ca4:	1f 5f       	subi	r17, 0xFF	; 255
	a_number/=10;
     ca6:	c2 2e       	mov	r12, r18
     ca8:	d3 2e       	mov	r13, r19
     caa:	e4 2e       	mov	r14, r20
     cac:	f5 2e       	mov	r15, r21
	uint8_t L_Remainder=0,L_Arr[16],L_Index_i=0,L_Index_j;
	if (a_number==0)
	{
		LCD_WRITE_DATA('0');
	}
	while(a_number>0)
     cae:	c1 14       	cp	r12, r1
     cb0:	d1 04       	cpc	r13, r1
     cb2:	e1 04       	cpc	r14, r1
     cb4:	f1 04       	cpc	r15, r1
     cb6:	31 f7       	brne	.-52     	; 0xc84 <LCD_Write_Number+0x34>
     cb8:	0d c0       	rjmp	.+26     	; 0xcd4 <LCD_Write_Number+0x84>
	a_number/=10;
	}
	
	for (L_Index_j=L_Index_i;L_Index_j>0;L_Index_j--)    /*to display the array of number */
	{
		LCD_WRITE_DATA(L_Arr[L_Index_j-1]);
     cba:	e1 2f       	mov	r30, r17
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	31 97       	sbiw	r30, 0x01	; 1
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	8c 0f       	add	r24, r28
     cc6:	9d 1f       	adc	r25, r29
     cc8:	e8 0f       	add	r30, r24
     cca:	f9 1f       	adc	r31, r25
     ccc:	80 81       	ld	r24, Z
     cce:	0e 94 61 05 	call	0xac2	; 0xac2 <LCD_WRITE_DATA>
	L_Arr[L_Index_i]=L_Remainder+'0';    /*tp display the number it self, when we add the zero asci it shits the number to it's asci*/
	L_Index_i++;
	a_number/=10;
	}
	
	for (L_Index_j=L_Index_i;L_Index_j>0;L_Index_j--)    /*to display the array of number */
     cd2:	11 50       	subi	r17, 0x01	; 1
     cd4:	11 11       	cpse	r17, r1
     cd6:	f1 cf       	rjmp	.-30     	; 0xcba <LCD_Write_Number+0x6a>
	{
		LCD_WRITE_DATA(L_Arr[L_Index_j-1]);
	}
}
     cd8:	60 96       	adiw	r28, 0x10	; 16
     cda:	0f b6       	in	r0, 0x3f	; 63
     cdc:	f8 94       	cli
     cde:	de bf       	out	0x3e, r29	; 62
     ce0:	0f be       	out	0x3f, r0	; 63
     ce2:	cd bf       	out	0x3d, r28	; 61
     ce4:	df 91       	pop	r29
     ce6:	cf 91       	pop	r28
     ce8:	1f 91       	pop	r17
     cea:	ff 90       	pop	r15
     cec:	ef 90       	pop	r14
     cee:	df 90       	pop	r13
     cf0:	cf 90       	pop	r12
     cf2:	08 95       	ret

00000cf4 <LCD_Clear>:
/**DESCRIPTION:-
  This Function Clears The LCD
  **/
void LCD_Clear(void)
{
	LCD_WRITE_COMMAND(0x01);
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	0e 94 fd 04 	call	0x9fa	; 0x9fa <LCD_WRITE_COMMAND>
     cfa:	08 95       	ret

00000cfc <LCD_GoTo>:
  This Function Takes a Specific Line and a Cell On The LCD and Displays the Data In That Location
  **/
void LCD_GoTo(uint8_t a_line,uint8_t a_cell)
{
//0x80 this is from data sheet to write an address on the DDRAM"screen"*/
	if (a_line==1)
     cfc:	81 30       	cpi	r24, 0x01	; 1
     cfe:	29 f4       	brne	.+10     	; 0xd0a <LCD_GoTo+0xe>
	{
		LCD_WRITE_COMMAND(0x80+a_cell);    /*0x80 means we ant to write an address and a_cell is the address we want*/
     d00:	80 e8       	ldi	r24, 0x80	; 128
     d02:	86 0f       	add	r24, r22
     d04:	0e 94 fd 04 	call	0x9fa	; 0x9fa <LCD_WRITE_COMMAND>
     d08:	08 95       	ret
	}
	else if (a_line==2)
     d0a:	82 30       	cpi	r24, 0x02	; 2
     d0c:	21 f4       	brne	.+8      	; 0xd16 <LCD_GoTo+0x1a>
	{
		LCD_WRITE_COMMAND(0x80+0x40+a_cell);  /*0x40 to start from cell 0 at line 2 from the data sheet*/	
     d0e:	80 ec       	ldi	r24, 0xC0	; 192
     d10:	86 0f       	add	r24, r22
     d12:	0e 94 fd 04 	call	0x9fa	; 0x9fa <LCD_WRITE_COMMAND>
     d16:	08 95       	ret

00000d18 <LCD_Write_Charecter>:
/**DESCRIPTION:-
  This Function Is Used To Display Any Character And It also used To Display the Shapes Saved In The CGRAM
  **/
void LCD_Write_Charecter(uint8_t a_char)
{
	LCD_WRITE_DATA(a_char);
     d18:	0e 94 61 05 	call	0xac2	; 0xac2 <LCD_WRITE_DATA>
     d1c:	08 95       	ret

00000d1e <LCD_Create_Charecter>:
/*****************************************************************************************/
/**DESCRIPTION
   This Function Is Used To Store New Charecter in The CGRAM Of The LCD
   **/
void LCD_Create_Charecter(uint8_t*a_Pattern,uint8_t a_Adress)
{
     d1e:	0f 93       	push	r16
     d20:	1f 93       	push	r17
     d22:	cf 93       	push	r28
     d24:	8c 01       	movw	r16, r24
	uint8_t Index_I;
	LCD_WRITE_COMMAND(0x40+a_Adress*8);   //we multiply it by 8 to make it block addressable //
     d26:	86 2f       	mov	r24, r22
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	08 96       	adiw	r24, 0x08	; 8
     d2c:	88 0f       	add	r24, r24
     d2e:	88 0f       	add	r24, r24
     d30:	88 0f       	add	r24, r24
     d32:	0e 94 fd 04 	call	0x9fa	; 0x9fa <LCD_WRITE_COMMAND>
	
	for (Index_I=0;Index_I<8;Index_I++)
     d36:	c0 e0       	ldi	r28, 0x00	; 0
     d38:	07 c0       	rjmp	.+14     	; 0xd48 <LCD_Create_Charecter+0x2a>
	{
		LCD_WRITE_DATA(a_Pattern[Index_I]);
     d3a:	f8 01       	movw	r30, r16
     d3c:	ec 0f       	add	r30, r28
     d3e:	f1 1d       	adc	r31, r1
     d40:	80 81       	ld	r24, Z
     d42:	0e 94 61 05 	call	0xac2	; 0xac2 <LCD_WRITE_DATA>
void LCD_Create_Charecter(uint8_t*a_Pattern,uint8_t a_Adress)
{
	uint8_t Index_I;
	LCD_WRITE_COMMAND(0x40+a_Adress*8);   //we multiply it by 8 to make it block addressable //
	
	for (Index_I=0;Index_I<8;Index_I++)
     d46:	cf 5f       	subi	r28, 0xFF	; 255
     d48:	c8 30       	cpi	r28, 0x08	; 8
     d4a:	b8 f3       	brcs	.-18     	; 0xd3a <LCD_Create_Charecter+0x1c>
	{
		LCD_WRITE_DATA(a_Pattern[Index_I]);
	}
	
}
     d4c:	cf 91       	pop	r28
     d4e:	1f 91       	pop	r17
     d50:	0f 91       	pop	r16
     d52:	08 95       	ret

00000d54 <main>:

#include "APP/APP.h"

int main(void)
{
 app_Init();
     d54:	0e 94 79 00 	call	0xf2	; 0xf2 <app_Init>
   while (1)
   {
	
		
	app_Start();
     d58:	0e 94 8d 03 	call	0x71a	; 0x71a <app_Start>
     d5c:	fd cf       	rjmp	.-6      	; 0xd58 <main+0x4>

00000d5e <DIO_INITPIN>:
   */
DIO_ERROR_TYPE DIO_INITPIN(DIO_PIN_TYPE PIN,DIO_PINSTATUS_TYPE STATUS)
{
	DIO_PIN_TYPE PIN_NUM;
	DIO_PORT_TYPE PORT;
	PORT=PIN/8;                                  //to determine which port i'm using
     d5e:	98 2f       	mov	r25, r24
     d60:	96 95       	lsr	r25
     d62:	96 95       	lsr	r25
     d64:	96 95       	lsr	r25
	PIN_NUM=PIN%8;                               //to determine which pin in the port i'm using 
     d66:	87 70       	andi	r24, 0x07	; 7
	DIO_ERROR_TYPE error=VALID_DIO;
	if(PORT>4)
     d68:	95 30       	cpi	r25, 0x05	; 5
     d6a:	08 f0       	brcs	.+2      	; 0xd6e <DIO_INITPIN+0x10>
     d6c:	f8 c0       	rjmp	.+496    	; 0xf5e <DIO_INITPIN+0x200>
	{
		return INVALID_PIN_NUMBER;
	}
	else
	 {
	switch(STATUS)
     d6e:	61 30       	cpi	r22, 0x01	; 1
     d70:	31 f0       	breq	.+12     	; 0xd7e <DIO_INITPIN+0x20>
     d72:	08 f4       	brcc	.+2      	; 0xd76 <DIO_INITPIN+0x18>
     d74:	a4 c0       	rjmp	.+328    	; 0xebe <DIO_INITPIN+0x160>
     d76:	62 30       	cpi	r22, 0x02	; 2
     d78:	09 f4       	brne	.+2      	; 0xd7c <DIO_INITPIN+0x1e>
     d7a:	51 c0       	rjmp	.+162    	; 0xe1e <DIO_INITPIN+0xc0>
     d7c:	ef c0       	rjmp	.+478    	; 0xf5c <DIO_INITPIN+0x1fe>
	{
		case INFREE:
		switch(PORT)
     d7e:	91 30       	cpi	r25, 0x01	; 1
     d80:	c1 f0       	breq	.+48     	; 0xdb2 <DIO_INITPIN+0x54>
     d82:	28 f0       	brcs	.+10     	; 0xd8e <DIO_INITPIN+0x30>
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	39 f1       	breq	.+78     	; 0xdd6 <DIO_INITPIN+0x78>
     d88:	93 30       	cpi	r25, 0x03	; 3
     d8a:	b9 f1       	breq	.+110    	; 0xdfa <DIO_INITPIN+0x9c>
     d8c:	e7 c0       	rjmp	.+462    	; 0xf5c <DIO_INITPIN+0x1fe>
		{
			case PA:
			clear_bit(DDRA,PIN_NUM);
     d8e:	4a b3       	in	r20, 0x1a	; 26
     d90:	21 e0       	ldi	r18, 0x01	; 1
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	b9 01       	movw	r22, r18
     d96:	02 c0       	rjmp	.+4      	; 0xd9c <DIO_INITPIN+0x3e>
     d98:	66 0f       	add	r22, r22
     d9a:	77 1f       	adc	r23, r23
     d9c:	8a 95       	dec	r24
     d9e:	e2 f7       	brpl	.-8      	; 0xd98 <DIO_INITPIN+0x3a>
     da0:	cb 01       	movw	r24, r22
     da2:	80 95       	com	r24
     da4:	94 2f       	mov	r25, r20
     da6:	98 23       	and	r25, r24
     da8:	9a bb       	out	0x1a, r25	; 26
			clear_bit(PORTA,PIN_NUM);       /*to make sure that the port register  is cleared in case of reuse*/
     daa:	9b b3       	in	r25, 0x1b	; 27
     dac:	89 23       	and	r24, r25
     dae:	8b bb       	out	0x1b, r24	; 27
			break;
     db0:	d5 c0       	rjmp	.+426    	; 0xf5c <DIO_INITPIN+0x1fe>
			case PB:
			clear_bit(DDRB,PIN_NUM);
     db2:	47 b3       	in	r20, 0x17	; 23
     db4:	21 e0       	ldi	r18, 0x01	; 1
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	b9 01       	movw	r22, r18
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <DIO_INITPIN+0x62>
     dbc:	66 0f       	add	r22, r22
     dbe:	77 1f       	adc	r23, r23
     dc0:	8a 95       	dec	r24
     dc2:	e2 f7       	brpl	.-8      	; 0xdbc <DIO_INITPIN+0x5e>
     dc4:	cb 01       	movw	r24, r22
     dc6:	80 95       	com	r24
     dc8:	94 2f       	mov	r25, r20
     dca:	98 23       	and	r25, r24
     dcc:	97 bb       	out	0x17, r25	; 23
			clear_bit(PORTB,PIN_NUM);
     dce:	98 b3       	in	r25, 0x18	; 24
     dd0:	89 23       	and	r24, r25
     dd2:	88 bb       	out	0x18, r24	; 24
			break;
     dd4:	c3 c0       	rjmp	.+390    	; 0xf5c <DIO_INITPIN+0x1fe>

			case PC:
			clear_bit(DDRC,PIN_NUM);
     dd6:	44 b3       	in	r20, 0x14	; 20
     dd8:	21 e0       	ldi	r18, 0x01	; 1
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	b9 01       	movw	r22, r18
     dde:	02 c0       	rjmp	.+4      	; 0xde4 <DIO_INITPIN+0x86>
     de0:	66 0f       	add	r22, r22
     de2:	77 1f       	adc	r23, r23
     de4:	8a 95       	dec	r24
     de6:	e2 f7       	brpl	.-8      	; 0xde0 <DIO_INITPIN+0x82>
     de8:	cb 01       	movw	r24, r22
     dea:	80 95       	com	r24
     dec:	94 2f       	mov	r25, r20
     dee:	98 23       	and	r25, r24
     df0:	94 bb       	out	0x14, r25	; 20
			clear_bit(PORTC,PIN_NUM);
     df2:	95 b3       	in	r25, 0x15	; 21
     df4:	89 23       	and	r24, r25
     df6:	85 bb       	out	0x15, r24	; 21
			break;
     df8:	b1 c0       	rjmp	.+354    	; 0xf5c <DIO_INITPIN+0x1fe>

			case PD:
			clear_bit(DDRD,PIN_NUM);
     dfa:	41 b3       	in	r20, 0x11	; 17
     dfc:	21 e0       	ldi	r18, 0x01	; 1
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	b9 01       	movw	r22, r18
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <DIO_INITPIN+0xaa>
     e04:	66 0f       	add	r22, r22
     e06:	77 1f       	adc	r23, r23
     e08:	8a 95       	dec	r24
     e0a:	e2 f7       	brpl	.-8      	; 0xe04 <DIO_INITPIN+0xa6>
     e0c:	cb 01       	movw	r24, r22
     e0e:	80 95       	com	r24
     e10:	94 2f       	mov	r25, r20
     e12:	98 23       	and	r25, r24
     e14:	91 bb       	out	0x11, r25	; 17
			clear_bit(PORTD,PIN_NUM);
     e16:	92 b3       	in	r25, 0x12	; 18
     e18:	89 23       	and	r24, r25
     e1a:	82 bb       	out	0x12, r24	; 18
			break;
     e1c:	9f c0       	rjmp	.+318    	; 0xf5c <DIO_INITPIN+0x1fe>
		}
		break;
		
		case INPLUP:
		switch(PORT)
     e1e:	91 30       	cpi	r25, 0x01	; 1
     e20:	c1 f0       	breq	.+48     	; 0xe52 <DIO_INITPIN+0xf4>
     e22:	28 f0       	brcs	.+10     	; 0xe2e <DIO_INITPIN+0xd0>
     e24:	92 30       	cpi	r25, 0x02	; 2
     e26:	39 f1       	breq	.+78     	; 0xe76 <DIO_INITPIN+0x118>
     e28:	93 30       	cpi	r25, 0x03	; 3
     e2a:	b9 f1       	breq	.+110    	; 0xe9a <DIO_INITPIN+0x13c>
     e2c:	97 c0       	rjmp	.+302    	; 0xf5c <DIO_INITPIN+0x1fe>
		{
			case PA:
			clear_bit(DDRA,PIN_NUM);
     e2e:	4a b3       	in	r20, 0x1a	; 26
     e30:	21 e0       	ldi	r18, 0x01	; 1
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	b9 01       	movw	r22, r18
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <DIO_INITPIN+0xde>
     e38:	66 0f       	add	r22, r22
     e3a:	77 1f       	adc	r23, r23
     e3c:	8a 95       	dec	r24
     e3e:	e2 f7       	brpl	.-8      	; 0xe38 <DIO_INITPIN+0xda>
     e40:	cb 01       	movw	r24, r22
     e42:	96 2f       	mov	r25, r22
     e44:	90 95       	com	r25
     e46:	94 23       	and	r25, r20
     e48:	9a bb       	out	0x1a, r25	; 26
			set_bit(PORTA,PIN_NUM);
     e4a:	9b b3       	in	r25, 0x1b	; 27
     e4c:	89 2b       	or	r24, r25
     e4e:	8b bb       	out	0x1b, r24	; 27
			break;
     e50:	85 c0       	rjmp	.+266    	; 0xf5c <DIO_INITPIN+0x1fe>
			
			case PB:
			clear_bit(DDRB,PIN_NUM);
     e52:	47 b3       	in	r20, 0x17	; 23
     e54:	21 e0       	ldi	r18, 0x01	; 1
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	b9 01       	movw	r22, r18
     e5a:	02 c0       	rjmp	.+4      	; 0xe60 <DIO_INITPIN+0x102>
     e5c:	66 0f       	add	r22, r22
     e5e:	77 1f       	adc	r23, r23
     e60:	8a 95       	dec	r24
     e62:	e2 f7       	brpl	.-8      	; 0xe5c <DIO_INITPIN+0xfe>
     e64:	cb 01       	movw	r24, r22
     e66:	96 2f       	mov	r25, r22
     e68:	90 95       	com	r25
     e6a:	94 23       	and	r25, r20
     e6c:	97 bb       	out	0x17, r25	; 23
			set_bit(PORTB,PIN_NUM);
     e6e:	98 b3       	in	r25, 0x18	; 24
     e70:	89 2b       	or	r24, r25
     e72:	88 bb       	out	0x18, r24	; 24
			break;
     e74:	73 c0       	rjmp	.+230    	; 0xf5c <DIO_INITPIN+0x1fe>

			case PC:
			clear_bit(DDRC,PIN_NUM);
     e76:	44 b3       	in	r20, 0x14	; 20
     e78:	21 e0       	ldi	r18, 0x01	; 1
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	b9 01       	movw	r22, r18
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <DIO_INITPIN+0x126>
     e80:	66 0f       	add	r22, r22
     e82:	77 1f       	adc	r23, r23
     e84:	8a 95       	dec	r24
     e86:	e2 f7       	brpl	.-8      	; 0xe80 <DIO_INITPIN+0x122>
     e88:	cb 01       	movw	r24, r22
     e8a:	96 2f       	mov	r25, r22
     e8c:	90 95       	com	r25
     e8e:	94 23       	and	r25, r20
     e90:	94 bb       	out	0x14, r25	; 20
			set_bit(PORTC,PIN_NUM);
     e92:	95 b3       	in	r25, 0x15	; 21
     e94:	89 2b       	or	r24, r25
     e96:	85 bb       	out	0x15, r24	; 21
			break;
     e98:	61 c0       	rjmp	.+194    	; 0xf5c <DIO_INITPIN+0x1fe>

			case PD:
			clear_bit(DDRD,PIN_NUM);
     e9a:	41 b3       	in	r20, 0x11	; 17
     e9c:	21 e0       	ldi	r18, 0x01	; 1
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	b9 01       	movw	r22, r18
     ea2:	02 c0       	rjmp	.+4      	; 0xea8 <DIO_INITPIN+0x14a>
     ea4:	66 0f       	add	r22, r22
     ea6:	77 1f       	adc	r23, r23
     ea8:	8a 95       	dec	r24
     eaa:	e2 f7       	brpl	.-8      	; 0xea4 <DIO_INITPIN+0x146>
     eac:	cb 01       	movw	r24, r22
     eae:	96 2f       	mov	r25, r22
     eb0:	90 95       	com	r25
     eb2:	94 23       	and	r25, r20
     eb4:	91 bb       	out	0x11, r25	; 17
			set_bit(PORTD,PIN_NUM);
     eb6:	92 b3       	in	r25, 0x12	; 18
     eb8:	89 2b       	or	r24, r25
     eba:	82 bb       	out	0x12, r24	; 18
			break;
     ebc:	4f c0       	rjmp	.+158    	; 0xf5c <DIO_INITPIN+0x1fe>
		}
		break;
		return VALID_DIO;
		
		case OUTPUT:
		switch(PORT)
     ebe:	91 30       	cpi	r25, 0x01	; 1
     ec0:	c1 f0       	breq	.+48     	; 0xef2 <DIO_INITPIN+0x194>
     ec2:	28 f0       	brcs	.+10     	; 0xece <DIO_INITPIN+0x170>
     ec4:	92 30       	cpi	r25, 0x02	; 2
     ec6:	39 f1       	breq	.+78     	; 0xf16 <DIO_INITPIN+0x1b8>
     ec8:	93 30       	cpi	r25, 0x03	; 3
     eca:	b9 f1       	breq	.+110    	; 0xf3a <DIO_INITPIN+0x1dc>
     ecc:	47 c0       	rjmp	.+142    	; 0xf5c <DIO_INITPIN+0x1fe>
		{
			case PA:
			clear_bit(PORTA,PIN_NUM);
     ece:	4b b3       	in	r20, 0x1b	; 27
     ed0:	21 e0       	ldi	r18, 0x01	; 1
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	b9 01       	movw	r22, r18
     ed6:	02 c0       	rjmp	.+4      	; 0xedc <DIO_INITPIN+0x17e>
     ed8:	66 0f       	add	r22, r22
     eda:	77 1f       	adc	r23, r23
     edc:	8a 95       	dec	r24
     ede:	e2 f7       	brpl	.-8      	; 0xed8 <DIO_INITPIN+0x17a>
     ee0:	cb 01       	movw	r24, r22
     ee2:	96 2f       	mov	r25, r22
     ee4:	90 95       	com	r25
     ee6:	94 23       	and	r25, r20
     ee8:	9b bb       	out	0x1b, r25	; 27
			set_bit(DDRA,PIN_NUM);
     eea:	9a b3       	in	r25, 0x1a	; 26
     eec:	89 2b       	or	r24, r25
     eee:	8a bb       	out	0x1a, r24	; 26
			break;
     ef0:	35 c0       	rjmp	.+106    	; 0xf5c <DIO_INITPIN+0x1fe>
			
			case PB:
			clear_bit(PORTB,PIN_NUM);
     ef2:	48 b3       	in	r20, 0x18	; 24
     ef4:	21 e0       	ldi	r18, 0x01	; 1
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	b9 01       	movw	r22, r18
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <DIO_INITPIN+0x1a2>
     efc:	66 0f       	add	r22, r22
     efe:	77 1f       	adc	r23, r23
     f00:	8a 95       	dec	r24
     f02:	e2 f7       	brpl	.-8      	; 0xefc <DIO_INITPIN+0x19e>
     f04:	cb 01       	movw	r24, r22
     f06:	96 2f       	mov	r25, r22
     f08:	90 95       	com	r25
     f0a:	94 23       	and	r25, r20
     f0c:	98 bb       	out	0x18, r25	; 24
			set_bit(DDRB,PIN_NUM);
     f0e:	97 b3       	in	r25, 0x17	; 23
     f10:	89 2b       	or	r24, r25
     f12:	87 bb       	out	0x17, r24	; 23
			break;
     f14:	23 c0       	rjmp	.+70     	; 0xf5c <DIO_INITPIN+0x1fe>

			case PC:
			clear_bit(PORTC,PIN_NUM);
     f16:	45 b3       	in	r20, 0x15	; 21
     f18:	21 e0       	ldi	r18, 0x01	; 1
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	b9 01       	movw	r22, r18
     f1e:	02 c0       	rjmp	.+4      	; 0xf24 <DIO_INITPIN+0x1c6>
     f20:	66 0f       	add	r22, r22
     f22:	77 1f       	adc	r23, r23
     f24:	8a 95       	dec	r24
     f26:	e2 f7       	brpl	.-8      	; 0xf20 <DIO_INITPIN+0x1c2>
     f28:	cb 01       	movw	r24, r22
     f2a:	96 2f       	mov	r25, r22
     f2c:	90 95       	com	r25
     f2e:	94 23       	and	r25, r20
     f30:	95 bb       	out	0x15, r25	; 21
			set_bit(DDRC,PIN_NUM);
     f32:	94 b3       	in	r25, 0x14	; 20
     f34:	89 2b       	or	r24, r25
     f36:	84 bb       	out	0x14, r24	; 20
			break;
     f38:	11 c0       	rjmp	.+34     	; 0xf5c <DIO_INITPIN+0x1fe>

			case PD:
			clear_bit(PORTD,PIN_NUM);
     f3a:	42 b3       	in	r20, 0x12	; 18
     f3c:	21 e0       	ldi	r18, 0x01	; 1
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	b9 01       	movw	r22, r18
     f42:	02 c0       	rjmp	.+4      	; 0xf48 <DIO_INITPIN+0x1ea>
     f44:	66 0f       	add	r22, r22
     f46:	77 1f       	adc	r23, r23
     f48:	8a 95       	dec	r24
     f4a:	e2 f7       	brpl	.-8      	; 0xf44 <DIO_INITPIN+0x1e6>
     f4c:	cb 01       	movw	r24, r22
     f4e:	96 2f       	mov	r25, r22
     f50:	90 95       	com	r25
     f52:	94 23       	and	r25, r20
     f54:	92 bb       	out	0x12, r25	; 18
			set_bit(DDRD,PIN_NUM);
     f56:	91 b3       	in	r25, 0x11	; 17
     f58:	89 2b       	or	r24, r25
     f5a:	81 bb       	out	0x11, r24	; 17
		break;
		return VALID_DIO;

	}
		}
}
     f5c:	08 95       	ret
     f5e:	82 e0       	ldi	r24, 0x02	; 2
     f60:	08 95       	ret

00000f62 <DIO_WRITEPIN>:
DIO_ERROR_TYPE DIO_WRITEPIN(DIO_PIN_TYPE PIN,DIO_VOLTAGE_TYPE VOLTAGE)
{
	
	DIO_PIN_TYPE PIN_NUM;
	DIO_PORT_TYPE PORT;
	PORT=PIN/8;
     f62:	98 2f       	mov	r25, r24
     f64:	96 95       	lsr	r25
     f66:	96 95       	lsr	r25
     f68:	96 95       	lsr	r25
	PIN_NUM=PIN%8;
     f6a:	87 70       	andi	r24, 0x07	; 7
	if(PORT>4)
     f6c:	95 30       	cpi	r25, 0x05	; 5
     f6e:	08 f0       	brcs	.+2      	; 0xf72 <DIO_WRITEPIN+0x10>
     f70:	8d c0       	rjmp	.+282    	; 0x108c <DIO_WRITEPIN+0x12a>
	}
	else if(PIN_NUM>32)
	{
		return INVALID_PIN_NUMBER;
	}
	else if(VOLTAGE>2)
     f72:	63 30       	cpi	r22, 0x03	; 3
     f74:	08 f0       	brcs	.+2      	; 0xf78 <DIO_WRITEPIN+0x16>
     f76:	8c c0       	rjmp	.+280    	; 0x1090 <DIO_WRITEPIN+0x12e>
		return INVALID_VOLTAGE;
	}
	else 
	{
	
	if(VOLTAGE==HIGH)
     f78:	61 30       	cpi	r22, 0x01	; 1
     f7a:	09 f0       	breq	.+2      	; 0xf7e <DIO_WRITEPIN+0x1c>
     f7c:	40 c0       	rjmp	.+128    	; 0xffe <DIO_WRITEPIN+0x9c>
	{
		switch(PORT)
     f7e:	91 30       	cpi	r25, 0x01	; 1
     f80:	a1 f0       	breq	.+40     	; 0xfaa <DIO_WRITEPIN+0x48>
     f82:	28 f0       	brcs	.+10     	; 0xf8e <DIO_WRITEPIN+0x2c>
     f84:	92 30       	cpi	r25, 0x02	; 2
     f86:	f9 f0       	breq	.+62     	; 0xfc6 <DIO_WRITEPIN+0x64>
     f88:	93 30       	cpi	r25, 0x03	; 3
     f8a:	59 f1       	breq	.+86     	; 0xfe2 <DIO_WRITEPIN+0x80>
     f8c:	83 c0       	rjmp	.+262    	; 0x1094 <DIO_WRITEPIN+0x132>
		{
			case PA:
			set_bit(PORTA,PIN_NUM);
     f8e:	4b b3       	in	r20, 0x1b	; 27
     f90:	21 e0       	ldi	r18, 0x01	; 1
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	b9 01       	movw	r22, r18
     f96:	02 c0       	rjmp	.+4      	; 0xf9c <DIO_WRITEPIN+0x3a>
     f98:	66 0f       	add	r22, r22
     f9a:	77 1f       	adc	r23, r23
     f9c:	8a 95       	dec	r24
     f9e:	e2 f7       	brpl	.-8      	; 0xf98 <DIO_WRITEPIN+0x36>
     fa0:	cb 01       	movw	r24, r22
     fa2:	84 2b       	or	r24, r20
     fa4:	8b bb       	out	0x1b, r24	; 27
			case PD:
			set_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
     fa6:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(PORT)
		{
			case PA:
			set_bit(PORTA,PIN_NUM);
			break;
     fa8:	08 95       	ret
			case PB:
			set_bit(PORTB,PIN_NUM);
     faa:	48 b3       	in	r20, 0x18	; 24
     fac:	21 e0       	ldi	r18, 0x01	; 1
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	b9 01       	movw	r22, r18
     fb2:	02 c0       	rjmp	.+4      	; 0xfb8 <DIO_WRITEPIN+0x56>
     fb4:	66 0f       	add	r22, r22
     fb6:	77 1f       	adc	r23, r23
     fb8:	8a 95       	dec	r24
     fba:	e2 f7       	brpl	.-8      	; 0xfb4 <DIO_WRITEPIN+0x52>
     fbc:	cb 01       	movw	r24, r22
     fbe:	84 2b       	or	r24, r20
     fc0:	88 bb       	out	0x18, r24	; 24
			case PD:
			set_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
     fc2:	80 e0       	ldi	r24, 0x00	; 0
			case PA:
			set_bit(PORTA,PIN_NUM);
			break;
			case PB:
			set_bit(PORTB,PIN_NUM);
			break;
     fc4:	08 95       	ret
			case PC:
			set_bit(PORTC,PIN_NUM);
     fc6:	45 b3       	in	r20, 0x15	; 21
     fc8:	21 e0       	ldi	r18, 0x01	; 1
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	b9 01       	movw	r22, r18
     fce:	02 c0       	rjmp	.+4      	; 0xfd4 <DIO_WRITEPIN+0x72>
     fd0:	66 0f       	add	r22, r22
     fd2:	77 1f       	adc	r23, r23
     fd4:	8a 95       	dec	r24
     fd6:	e2 f7       	brpl	.-8      	; 0xfd0 <DIO_WRITEPIN+0x6e>
     fd8:	cb 01       	movw	r24, r22
     fda:	84 2b       	or	r24, r20
     fdc:	85 bb       	out	0x15, r24	; 21
			case PD:
			set_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
     fde:	80 e0       	ldi	r24, 0x00	; 0
			case PB:
			set_bit(PORTB,PIN_NUM);
			break;
			case PC:
			set_bit(PORTC,PIN_NUM);
			break;
     fe0:	08 95       	ret
			case PD:
			set_bit(PORTD,PIN_NUM);
     fe2:	42 b3       	in	r20, 0x12	; 18
     fe4:	21 e0       	ldi	r18, 0x01	; 1
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	b9 01       	movw	r22, r18
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <DIO_WRITEPIN+0x8e>
     fec:	66 0f       	add	r22, r22
     fee:	77 1f       	adc	r23, r23
     ff0:	8a 95       	dec	r24
     ff2:	e2 f7       	brpl	.-8      	; 0xfec <DIO_WRITEPIN+0x8a>
     ff4:	cb 01       	movw	r24, r22
     ff6:	84 2b       	or	r24, r20
     ff8:	82 bb       	out	0x12, r24	; 18
			break;

		}
		return VALID_DIO;
     ffa:	80 e0       	ldi	r24, 0x00	; 0
			case PC:
			set_bit(PORTC,PIN_NUM);
			break;
			case PD:
			set_bit(PORTD,PIN_NUM);
			break;
     ffc:	08 95       	ret
		}
		return VALID_DIO;
	}


	else if(VOLTAGE==LOW)
     ffe:	61 11       	cpse	r22, r1
    1000:	44 c0       	rjmp	.+136    	; 0x108a <DIO_WRITEPIN+0x128>
	{
		switch(PORT)
    1002:	91 30       	cpi	r25, 0x01	; 1
    1004:	a9 f0       	breq	.+42     	; 0x1030 <DIO_WRITEPIN+0xce>
    1006:	28 f0       	brcs	.+10     	; 0x1012 <DIO_WRITEPIN+0xb0>
    1008:	92 30       	cpi	r25, 0x02	; 2
    100a:	09 f1       	breq	.+66     	; 0x104e <DIO_WRITEPIN+0xec>
    100c:	93 30       	cpi	r25, 0x03	; 3
    100e:	71 f1       	breq	.+92     	; 0x106c <DIO_WRITEPIN+0x10a>
    1010:	43 c0       	rjmp	.+134    	; 0x1098 <DIO_WRITEPIN+0x136>
		{
			case PA:
			clear_bit(PORTA,PIN_NUM);
    1012:	4b b3       	in	r20, 0x1b	; 27
    1014:	21 e0       	ldi	r18, 0x01	; 1
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	b9 01       	movw	r22, r18
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <DIO_WRITEPIN+0xbe>
    101c:	66 0f       	add	r22, r22
    101e:	77 1f       	adc	r23, r23
    1020:	8a 95       	dec	r24
    1022:	e2 f7       	brpl	.-8      	; 0x101c <DIO_WRITEPIN+0xba>
    1024:	cb 01       	movw	r24, r22
    1026:	80 95       	com	r24
    1028:	84 23       	and	r24, r20
    102a:	8b bb       	out	0x1b, r24	; 27
			case PD:
			clear_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
    102c:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(PORT)
		{
			case PA:
			clear_bit(PORTA,PIN_NUM);
			break;
    102e:	08 95       	ret
			case PB:
			clear_bit(PORTB,PIN_NUM);
    1030:	48 b3       	in	r20, 0x18	; 24
    1032:	21 e0       	ldi	r18, 0x01	; 1
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	b9 01       	movw	r22, r18
    1038:	02 c0       	rjmp	.+4      	; 0x103e <DIO_WRITEPIN+0xdc>
    103a:	66 0f       	add	r22, r22
    103c:	77 1f       	adc	r23, r23
    103e:	8a 95       	dec	r24
    1040:	e2 f7       	brpl	.-8      	; 0x103a <DIO_WRITEPIN+0xd8>
    1042:	cb 01       	movw	r24, r22
    1044:	80 95       	com	r24
    1046:	84 23       	and	r24, r20
    1048:	88 bb       	out	0x18, r24	; 24
			case PD:
			clear_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
    104a:	80 e0       	ldi	r24, 0x00	; 0
			case PA:
			clear_bit(PORTA,PIN_NUM);
			break;
			case PB:
			clear_bit(PORTB,PIN_NUM);
			break;
    104c:	08 95       	ret
			case PC:
			clear_bit(PORTC,PIN_NUM);
    104e:	45 b3       	in	r20, 0x15	; 21
    1050:	21 e0       	ldi	r18, 0x01	; 1
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	b9 01       	movw	r22, r18
    1056:	02 c0       	rjmp	.+4      	; 0x105c <DIO_WRITEPIN+0xfa>
    1058:	66 0f       	add	r22, r22
    105a:	77 1f       	adc	r23, r23
    105c:	8a 95       	dec	r24
    105e:	e2 f7       	brpl	.-8      	; 0x1058 <DIO_WRITEPIN+0xf6>
    1060:	cb 01       	movw	r24, r22
    1062:	80 95       	com	r24
    1064:	84 23       	and	r24, r20
    1066:	85 bb       	out	0x15, r24	; 21
			case PD:
			clear_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
    1068:	80 e0       	ldi	r24, 0x00	; 0
			case PB:
			clear_bit(PORTB,PIN_NUM);
			break;
			case PC:
			clear_bit(PORTC,PIN_NUM);
			break;
    106a:	08 95       	ret
			case PD:
			clear_bit(PORTD,PIN_NUM);
    106c:	42 b3       	in	r20, 0x12	; 18
    106e:	21 e0       	ldi	r18, 0x01	; 1
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	b9 01       	movw	r22, r18
    1074:	02 c0       	rjmp	.+4      	; 0x107a <DIO_WRITEPIN+0x118>
    1076:	66 0f       	add	r22, r22
    1078:	77 1f       	adc	r23, r23
    107a:	8a 95       	dec	r24
    107c:	e2 f7       	brpl	.-8      	; 0x1076 <DIO_WRITEPIN+0x114>
    107e:	cb 01       	movw	r24, r22
    1080:	80 95       	com	r24
    1082:	84 23       	and	r24, r20
    1084:	82 bb       	out	0x12, r24	; 18
			break;

		}
		return VALID_DIO;
    1086:	80 e0       	ldi	r24, 0x00	; 0
			case PC:
			clear_bit(PORTC,PIN_NUM);
			break;
			case PD:
			clear_bit(PORTD,PIN_NUM);
			break;
    1088:	08 95       	ret

		}
		return VALID_DIO;
	}
}
}
    108a:	08 95       	ret
	DIO_PORT_TYPE PORT;
	PORT=PIN/8;
	PIN_NUM=PIN%8;
	if(PORT>4)
	{
		return INVALID_PORT;
    108c:	82 e0       	ldi	r24, 0x02	; 2
    108e:	08 95       	ret
	{
		return INVALID_PIN_NUMBER;
	}
	else if(VOLTAGE>2)
	{
		return INVALID_VOLTAGE;
    1090:	83 e0       	ldi	r24, 0x03	; 3
    1092:	08 95       	ret
			case PD:
			set_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
    1094:	80 e0       	ldi	r24, 0x00	; 0
    1096:	08 95       	ret
			case PD:
			clear_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
    1098:	80 e0       	ldi	r24, 0x00	; 0
	}
}
}
    109a:	08 95       	ret

0000109c <DIO_READPIN>:
*/
DIO_ERROR_TYPE DIO_READPIN(DIO_PIN_TYPE PIN,DIO_VOLTAGE_TYPE* VOLT)
{
	DIO_PIN_TYPE PIN_NUM;
	DIO_PORT_TYPE PORT;
	PORT=PIN/8;
    109c:	98 2f       	mov	r25, r24
    109e:	96 95       	lsr	r25
    10a0:	96 95       	lsr	r25
    10a2:	96 95       	lsr	r25
	PIN_NUM=PIN%8;
    10a4:	87 70       	andi	r24, 0x07	; 7
	if(PORT>4)
    10a6:	95 30       	cpi	r25, 0x05	; 5
    10a8:	08 f0       	brcs	.+2      	; 0x10ac <DIO_READPIN+0x10>
    10aa:	40 c0       	rjmp	.+128    	; 0x112c <DIO_READPIN+0x90>
		return INVALID_PIN_NUMBER;
	}
	else
	{
	
	switch(PORT)
    10ac:	91 30       	cpi	r25, 0x01	; 1
    10ae:	a1 f0       	breq	.+40     	; 0x10d8 <DIO_READPIN+0x3c>
    10b0:	28 f0       	brcs	.+10     	; 0x10bc <DIO_READPIN+0x20>
    10b2:	92 30       	cpi	r25, 0x02	; 2
    10b4:	f9 f0       	breq	.+62     	; 0x10f4 <DIO_READPIN+0x58>
    10b6:	93 30       	cpi	r25, 0x03	; 3
    10b8:	59 f1       	breq	.+86     	; 0x1110 <DIO_READPIN+0x74>
    10ba:	3a c0       	rjmp	.+116    	; 0x1130 <DIO_READPIN+0x94>
	{
		case PA:
		*VOLT=read_bit(PINA,PIN_NUM);
    10bc:	29 b3       	in	r18, 0x19	; 25
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	a9 01       	movw	r20, r18
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <DIO_READPIN+0x2c>
    10c4:	55 95       	asr	r21
    10c6:	47 95       	ror	r20
    10c8:	8a 95       	dec	r24
    10ca:	e2 f7       	brpl	.-8      	; 0x10c4 <DIO_READPIN+0x28>
    10cc:	ca 01       	movw	r24, r20
    10ce:	81 70       	andi	r24, 0x01	; 1
    10d0:	fb 01       	movw	r30, r22
    10d2:	80 83       	st	Z, r24
		break;
		case PD:
		*VOLT=read_bit(PIND,PIN_NUM);
		break;
	}
	return VALID_DIO;
    10d4:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(PORT)
	{
		case PA:
		*VOLT=read_bit(PINA,PIN_NUM);
		break;
    10d6:	08 95       	ret
		case PB:
		*VOLT=read_bit(PINB,PIN_NUM);
    10d8:	26 b3       	in	r18, 0x16	; 22
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	a9 01       	movw	r20, r18
    10de:	02 c0       	rjmp	.+4      	; 0x10e4 <DIO_READPIN+0x48>
    10e0:	55 95       	asr	r21
    10e2:	47 95       	ror	r20
    10e4:	8a 95       	dec	r24
    10e6:	e2 f7       	brpl	.-8      	; 0x10e0 <DIO_READPIN+0x44>
    10e8:	ca 01       	movw	r24, r20
    10ea:	81 70       	andi	r24, 0x01	; 1
    10ec:	fb 01       	movw	r30, r22
    10ee:	80 83       	st	Z, r24
		break;
		case PD:
		*VOLT=read_bit(PIND,PIN_NUM);
		break;
	}
	return VALID_DIO;
    10f0:	80 e0       	ldi	r24, 0x00	; 0
		case PA:
		*VOLT=read_bit(PINA,PIN_NUM);
		break;
		case PB:
		*VOLT=read_bit(PINB,PIN_NUM);
		break;
    10f2:	08 95       	ret
		case PC:
		*VOLT=read_bit(PINC,PIN_NUM);
    10f4:	23 b3       	in	r18, 0x13	; 19
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	a9 01       	movw	r20, r18
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <DIO_READPIN+0x64>
    10fc:	55 95       	asr	r21
    10fe:	47 95       	ror	r20
    1100:	8a 95       	dec	r24
    1102:	e2 f7       	brpl	.-8      	; 0x10fc <DIO_READPIN+0x60>
    1104:	ca 01       	movw	r24, r20
    1106:	81 70       	andi	r24, 0x01	; 1
    1108:	fb 01       	movw	r30, r22
    110a:	80 83       	st	Z, r24
		break;
		case PD:
		*VOLT=read_bit(PIND,PIN_NUM);
		break;
	}
	return VALID_DIO;
    110c:	80 e0       	ldi	r24, 0x00	; 0
		case PB:
		*VOLT=read_bit(PINB,PIN_NUM);
		break;
		case PC:
		*VOLT=read_bit(PINC,PIN_NUM);
		break;
    110e:	08 95       	ret
		case PD:
		*VOLT=read_bit(PIND,PIN_NUM);
    1110:	20 b3       	in	r18, 0x10	; 16
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	a9 01       	movw	r20, r18
    1116:	02 c0       	rjmp	.+4      	; 0x111c <DIO_READPIN+0x80>
    1118:	55 95       	asr	r21
    111a:	47 95       	ror	r20
    111c:	8a 95       	dec	r24
    111e:	e2 f7       	brpl	.-8      	; 0x1118 <DIO_READPIN+0x7c>
    1120:	ca 01       	movw	r24, r20
    1122:	81 70       	andi	r24, 0x01	; 1
    1124:	fb 01       	movw	r30, r22
    1126:	80 83       	st	Z, r24
		break;
	}
	return VALID_DIO;
    1128:	80 e0       	ldi	r24, 0x00	; 0
		case PC:
		*VOLT=read_bit(PINC,PIN_NUM);
		break;
		case PD:
		*VOLT=read_bit(PIND,PIN_NUM);
		break;
    112a:	08 95       	ret
	DIO_PORT_TYPE PORT;
	PORT=PIN/8;
	PIN_NUM=PIN%8;
	if(PORT>4)
	{
		return INVALID_PORT;
    112c:	82 e0       	ldi	r24, 0x02	; 2
    112e:	08 95       	ret
		break;
		case PD:
		*VOLT=read_bit(PIND,PIN_NUM);
		break;
	}
	return VALID_DIO;
    1130:	80 e0       	ldi	r24, 0x00	; 0
}
}
    1132:	08 95       	ret

00001134 <EXI_Enable>:
/**DESCRIPTION:-
it enables one of the external interrupt
*/
EN_int__error_t EXI_Enable (EN_int_t Interrupt)
{
	switch (Interrupt)
    1134:	81 30       	cpi	r24, 0x01	; 1
    1136:	41 f0       	breq	.+16     	; 0x1148 <EXI_Enable+0x14>
    1138:	18 f0       	brcs	.+6      	; 0x1140 <EXI_Enable+0xc>
    113a:	82 30       	cpi	r24, 0x02	; 2
    113c:	49 f0       	breq	.+18     	; 0x1150 <EXI_Enable+0x1c>
    113e:	08 95       	ret
	{
		case EXT_INT_0:
		set_bit(GICR,INT0);
    1140:	8b b7       	in	r24, 0x3b	; 59
    1142:	80 64       	ori	r24, 0x40	; 64
    1144:	8b bf       	out	0x3b, r24	; 59
		break;
    1146:	08 95       	ret
		case EXT_INT_1:
		set_bit(GICR,INT1);
    1148:	8b b7       	in	r24, 0x3b	; 59
    114a:	80 68       	ori	r24, 0x80	; 128
    114c:	8b bf       	out	0x3b, r24	; 59
		break;
    114e:	08 95       	ret
		case EXT_INT_2:
		set_bit(GICR,INT2);
    1150:	8b b7       	in	r24, 0x3b	; 59
    1152:	80 62       	ori	r24, 0x20	; 32
    1154:	8b bf       	out	0x3b, r24	; 59
		break;
	}
}
    1156:	08 95       	ret

00001158 <EXI_Disable>:
it disables one of the external interrupt
*/

EN_int__error_t EXI_Disable (EN_int_t Interrupt)
{
	switch (Interrupt)
    1158:	81 30       	cpi	r24, 0x01	; 1
    115a:	41 f0       	breq	.+16     	; 0x116c <EXI_Disable+0x14>
    115c:	18 f0       	brcs	.+6      	; 0x1164 <EXI_Disable+0xc>
    115e:	82 30       	cpi	r24, 0x02	; 2
    1160:	49 f0       	breq	.+18     	; 0x1174 <EXI_Disable+0x1c>
    1162:	08 95       	ret
	{
		case EXT_INT_0:
		clear_bit(GICR,INT0);
    1164:	8b b7       	in	r24, 0x3b	; 59
    1166:	8f 7b       	andi	r24, 0xBF	; 191
    1168:	8b bf       	out	0x3b, r24	; 59
		break;
    116a:	08 95       	ret
		case EXT_INT_1:
		clear_bit(GICR,INT1);
    116c:	8b b7       	in	r24, 0x3b	; 59
    116e:	8f 77       	andi	r24, 0x7F	; 127
    1170:	8b bf       	out	0x3b, r24	; 59
		break;
    1172:	08 95       	ret
		case EXT_INT_2:
		clear_bit(GICR,INT2);
    1174:	8b b7       	in	r24, 0x3b	; 59
    1176:	8f 7d       	andi	r24, 0xDF	; 223
    1178:	8b bf       	out	0x3b, r24	; 59
		break;
	}
}
    117a:	08 95       	ret

0000117c <EXI_Trigger>:
*/

EN_int__error_t EXI_Trigger(EN_int_t Interrupt,EN_trig trigger)
{
	
	switch(Interrupt)
    117c:	81 30       	cpi	r24, 0x01	; 1
    117e:	49 f1       	breq	.+82     	; 0x11d2 <EXI_Trigger+0x56>
    1180:	20 f0       	brcs	.+8      	; 0x118a <EXI_Trigger+0xe>
    1182:	82 30       	cpi	r24, 0x02	; 2
    1184:	09 f4       	brne	.+2      	; 0x1188 <EXI_Trigger+0xc>
    1186:	49 c0       	rjmp	.+146    	; 0x121a <EXI_Trigger+0x9e>
    1188:	08 95       	ret
	{
		case EXT_INT_0:
		switch(trigger)
    118a:	61 30       	cpi	r22, 0x01	; 1
    118c:	69 f0       	breq	.+26     	; 0x11a8 <EXI_Trigger+0x2c>
    118e:	28 f0       	brcs	.+10     	; 0x119a <EXI_Trigger+0x1e>
    1190:	62 30       	cpi	r22, 0x02	; 2
    1192:	89 f0       	breq	.+34     	; 0x11b6 <EXI_Trigger+0x3a>
    1194:	63 30       	cpi	r22, 0x03	; 3
    1196:	b1 f0       	breq	.+44     	; 0x11c4 <EXI_Trigger+0x48>
    1198:	08 95       	ret
		{
			case LOW_LEVEL:
			clear_bit(MCUCR,ISC00);
    119a:	85 b7       	in	r24, 0x35	; 53
    119c:	8e 7f       	andi	r24, 0xFE	; 254
    119e:	85 bf       	out	0x35, r24	; 53
			clear_bit(MCUCR,ISC01);
    11a0:	85 b7       	in	r24, 0x35	; 53
    11a2:	8d 7f       	andi	r24, 0xFD	; 253
    11a4:	85 bf       	out	0x35, r24	; 53
			break;
    11a6:	08 95       	ret
			case ANY_LOGIC_CHANGE:
			set_bit(MCUCR,ISC00);
    11a8:	85 b7       	in	r24, 0x35	; 53
    11aa:	81 60       	ori	r24, 0x01	; 1
    11ac:	85 bf       	out	0x35, r24	; 53
			clear_bit(MCUCR,ISC01);
    11ae:	85 b7       	in	r24, 0x35	; 53
    11b0:	8d 7f       	andi	r24, 0xFD	; 253
    11b2:	85 bf       	out	0x35, r24	; 53
			break;
    11b4:	08 95       	ret
			case FALLING_EDGE:
			clear_bit(MCUCR,ISC00);
    11b6:	85 b7       	in	r24, 0x35	; 53
    11b8:	8e 7f       	andi	r24, 0xFE	; 254
    11ba:	85 bf       	out	0x35, r24	; 53
			set_bit(MCUCR,ISC01);
    11bc:	85 b7       	in	r24, 0x35	; 53
    11be:	82 60       	ori	r24, 0x02	; 2
    11c0:	85 bf       	out	0x35, r24	; 53
			break;
    11c2:	08 95       	ret
			case RISING_EDGE:
			set_bit(MCUCR,ISC00);
    11c4:	85 b7       	in	r24, 0x35	; 53
    11c6:	81 60       	ori	r24, 0x01	; 1
    11c8:	85 bf       	out	0x35, r24	; 53
			set_bit(MCUCR,ISC01);
    11ca:	85 b7       	in	r24, 0x35	; 53
    11cc:	82 60       	ori	r24, 0x02	; 2
    11ce:	85 bf       	out	0x35, r24	; 53
			break;
    11d0:	08 95       	ret
		}
		break;
		case EXT_INT_1:
		switch(trigger)
    11d2:	61 30       	cpi	r22, 0x01	; 1
    11d4:	69 f0       	breq	.+26     	; 0x11f0 <EXI_Trigger+0x74>
    11d6:	28 f0       	brcs	.+10     	; 0x11e2 <EXI_Trigger+0x66>
    11d8:	62 30       	cpi	r22, 0x02	; 2
    11da:	89 f0       	breq	.+34     	; 0x11fe <EXI_Trigger+0x82>
    11dc:	63 30       	cpi	r22, 0x03	; 3
    11de:	b1 f0       	breq	.+44     	; 0x120c <EXI_Trigger+0x90>
    11e0:	08 95       	ret
		{
			case LOW_LEVEL:
			clear_bit(MCUCR,ISC10);
    11e2:	85 b7       	in	r24, 0x35	; 53
    11e4:	8b 7f       	andi	r24, 0xFB	; 251
    11e6:	85 bf       	out	0x35, r24	; 53
			clear_bit(MCUCR,ISC11); break;
    11e8:	85 b7       	in	r24, 0x35	; 53
    11ea:	87 7f       	andi	r24, 0xF7	; 247
    11ec:	85 bf       	out	0x35, r24	; 53
    11ee:	08 95       	ret
			case ANY_LOGIC_CHANGE:
			set_bit(MCUCR,ISC10);
    11f0:	85 b7       	in	r24, 0x35	; 53
    11f2:	84 60       	ori	r24, 0x04	; 4
    11f4:	85 bf       	out	0x35, r24	; 53
			clear_bit(MCUCR,ISC11); break;
    11f6:	85 b7       	in	r24, 0x35	; 53
    11f8:	87 7f       	andi	r24, 0xF7	; 247
    11fa:	85 bf       	out	0x35, r24	; 53
    11fc:	08 95       	ret
			case FALLING_EDGE:
			clear_bit(MCUCR,ISC10);
    11fe:	85 b7       	in	r24, 0x35	; 53
    1200:	8b 7f       	andi	r24, 0xFB	; 251
    1202:	85 bf       	out	0x35, r24	; 53
			set_bit(MCUCR,ISC11); break;
    1204:	85 b7       	in	r24, 0x35	; 53
    1206:	88 60       	ori	r24, 0x08	; 8
    1208:	85 bf       	out	0x35, r24	; 53
    120a:	08 95       	ret
			case RISING_EDGE:
			set_bit(MCUCR,ISC10);
    120c:	85 b7       	in	r24, 0x35	; 53
    120e:	84 60       	ori	r24, 0x04	; 4
    1210:	85 bf       	out	0x35, r24	; 53
			set_bit(MCUCR,ISC11); break;
    1212:	85 b7       	in	r24, 0x35	; 53
    1214:	88 60       	ori	r24, 0x08	; 8
    1216:	85 bf       	out	0x35, r24	; 53
    1218:	08 95       	ret
		}
		break;
		case EXT_INT_2:
		switch(trigger)
    121a:	62 30       	cpi	r22, 0x02	; 2
    121c:	19 f0       	breq	.+6      	; 0x1224 <EXI_Trigger+0xa8>
    121e:	63 30       	cpi	r22, 0x03	; 3
    1220:	29 f0       	breq	.+10     	; 0x122c <EXI_Trigger+0xb0>
    1222:	08 95       	ret
		{
			case FALLING_EDGE:
			clear_bit(MCUCSR,ISC2);
    1224:	84 b7       	in	r24, 0x34	; 52
    1226:	8f 7b       	andi	r24, 0xBF	; 191
    1228:	84 bf       	out	0x34, r24	; 52
			break;
    122a:	08 95       	ret
			case RISING_EDGE:
			set_bit(MCUCSR,ISC2);
    122c:	84 b7       	in	r24, 0x34	; 52
    122e:	80 64       	ori	r24, 0x40	; 64
    1230:	84 bf       	out	0x34, r24	; 52
			break;
		}
		break;
	}
}
    1232:	08 95       	ret

00001234 <EXI_SetCallBack>:
*/


void EXI_SetCallBack(EN_int_t Interrupt,void(*ptrf)(void))
{
	switch (Interrupt)
    1234:	88 23       	and	r24, r24
    1236:	19 f0       	breq	.+6      	; 0x123e <EXI_SetCallBack+0xa>
    1238:	82 30       	cpi	r24, 0x02	; 2
    123a:	51 f4       	brne	.+20     	; 0x1250 <EXI_SetCallBack+0x1c>
    123c:	05 c0       	rjmp	.+10     	; 0x1248 <EXI_SetCallBack+0x14>
	{
		case EXT_INT_0:
		ptrf_INT_0 =ptrf;
    123e:	70 93 41 03 	sts	0x0341, r23	; 0x800341 <ptrf_INT_0+0x1>
    1242:	60 93 40 03 	sts	0x0340, r22	; 0x800340 <ptrf_INT_0>
		break;
    1246:	08 95       	ret
		case EXT_INT_1:
		ptrf_INT_1 =ptrf;
		break;
		case EXT_INT_2:
		ptrf_INT_2 =ptrf;
    1248:	70 93 3f 03 	sts	0x033F, r23	; 0x80033f <ptrf_INT_2+0x1>
    124c:	60 93 3e 03 	sts	0x033E, r22	; 0x80033e <ptrf_INT_2>
    1250:	08 95       	ret

00001252 <__vector_1>:
}
/*******************************************************ISR INT_0********************************************************/


ISR (INT0_vect)
{
    1252:	1f 92       	push	r1
    1254:	0f 92       	push	r0
    1256:	0f b6       	in	r0, 0x3f	; 63
    1258:	0f 92       	push	r0
    125a:	11 24       	eor	r1, r1
    125c:	2f 93       	push	r18
    125e:	3f 93       	push	r19
    1260:	4f 93       	push	r20
    1262:	5f 93       	push	r21
    1264:	6f 93       	push	r22
    1266:	7f 93       	push	r23
    1268:	8f 93       	push	r24
    126a:	9f 93       	push	r25
    126c:	af 93       	push	r26
    126e:	bf 93       	push	r27
    1270:	ef 93       	push	r30
    1272:	ff 93       	push	r31
	
	if (ptrf_INT_0 != NULL)
    1274:	e0 91 40 03 	lds	r30, 0x0340	; 0x800340 <ptrf_INT_0>
    1278:	f0 91 41 03 	lds	r31, 0x0341	; 0x800341 <ptrf_INT_0+0x1>
    127c:	30 97       	sbiw	r30, 0x00	; 0
    127e:	09 f0       	breq	.+2      	; 0x1282 <__vector_1+0x30>
	{
		ptrf_INT_0();
    1280:	09 95       	icall
		

	}
}
    1282:	ff 91       	pop	r31
    1284:	ef 91       	pop	r30
    1286:	bf 91       	pop	r27
    1288:	af 91       	pop	r26
    128a:	9f 91       	pop	r25
    128c:	8f 91       	pop	r24
    128e:	7f 91       	pop	r23
    1290:	6f 91       	pop	r22
    1292:	5f 91       	pop	r21
    1294:	4f 91       	pop	r20
    1296:	3f 91       	pop	r19
    1298:	2f 91       	pop	r18
    129a:	0f 90       	pop	r0
    129c:	0f be       	out	0x3f, r0	; 63
    129e:	0f 90       	pop	r0
    12a0:	1f 90       	pop	r1
    12a2:	18 95       	reti

000012a4 <__vector_2>:

ISR (INT1_vect)
{
    12a4:	1f 92       	push	r1
    12a6:	0f 92       	push	r0
    12a8:	0f b6       	in	r0, 0x3f	; 63
    12aa:	0f 92       	push	r0
    12ac:	11 24       	eor	r1, r1
    12ae:	8f 93       	push	r24
	if (ptrf_INT_1 != NULL)
	{
		//ptrf_INT_1();
		
	}
	car_flag = 1 ;
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <car_flag>
}
    12b6:	8f 91       	pop	r24
    12b8:	0f 90       	pop	r0
    12ba:	0f be       	out	0x3f, r0	; 63
    12bc:	0f 90       	pop	r0
    12be:	1f 90       	pop	r1
    12c0:	18 95       	reti

000012c2 <__vector_3>:

ISR (INT2_vect)
{
    12c2:	1f 92       	push	r1
    12c4:	0f 92       	push	r0
    12c6:	0f b6       	in	r0, 0x3f	; 63
    12c8:	0f 92       	push	r0
    12ca:	11 24       	eor	r1, r1
    12cc:	2f 93       	push	r18
    12ce:	3f 93       	push	r19
    12d0:	4f 93       	push	r20
    12d2:	5f 93       	push	r21
    12d4:	6f 93       	push	r22
    12d6:	7f 93       	push	r23
    12d8:	8f 93       	push	r24
    12da:	9f 93       	push	r25
    12dc:	af 93       	push	r26
    12de:	bf 93       	push	r27
    12e0:	ef 93       	push	r30
    12e2:	ff 93       	push	r31
	if (ptrf_INT_2 != NULL)
    12e4:	e0 91 3e 03 	lds	r30, 0x033E	; 0x80033e <ptrf_INT_2>
    12e8:	f0 91 3f 03 	lds	r31, 0x033F	; 0x80033f <ptrf_INT_2+0x1>
    12ec:	30 97       	sbiw	r30, 0x00	; 0
    12ee:	09 f0       	breq	.+2      	; 0x12f2 <__vector_3+0x30>
	{
		ptrf_INT_2();
    12f0:	09 95       	icall
	}
    12f2:	ff 91       	pop	r31
    12f4:	ef 91       	pop	r30
    12f6:	bf 91       	pop	r27
    12f8:	af 91       	pop	r26
    12fa:	9f 91       	pop	r25
    12fc:	8f 91       	pop	r24
    12fe:	7f 91       	pop	r23
    1300:	6f 91       	pop	r22
    1302:	5f 91       	pop	r21
    1304:	4f 91       	pop	r20
    1306:	3f 91       	pop	r19
    1308:	2f 91       	pop	r18
    130a:	0f 90       	pop	r0
    130c:	0f be       	out	0x3f, r0	; 63
    130e:	0f 90       	pop	r0
    1310:	1f 90       	pop	r1
    1312:	18 95       	reti

00001314 <SPI_SlaveInit>:
{
	SPDR=data;
	while(!read_bit(SPSR,SPIF));
	return  SPDR;
	
}
    1314:	cf 93       	push	r28
    1316:	c8 2f       	mov	r28, r24
    1318:	62 e0       	ldi	r22, 0x02	; 2
    131a:	8d e0       	ldi	r24, 0x0D	; 13
    131c:	0e 94 af 06 	call	0xd5e	; 0xd5e <DIO_INITPIN>
    1320:	62 e0       	ldi	r22, 0x02	; 2
    1322:	8f e0       	ldi	r24, 0x0F	; 15
    1324:	0e 94 af 06 	call	0xd5e	; 0xd5e <DIO_INITPIN>
    1328:	62 e0       	ldi	r22, 0x02	; 2
    132a:	8c e0       	ldi	r24, 0x0C	; 12
    132c:	0e 94 af 06 	call	0xd5e	; 0xd5e <DIO_INITPIN>
    1330:	60 e0       	ldi	r22, 0x00	; 0
    1332:	8e e0       	ldi	r24, 0x0E	; 14
    1334:	0e 94 af 06 	call	0xd5e	; 0xd5e <DIO_INITPIN>
    1338:	61 e0       	ldi	r22, 0x01	; 1
    133a:	8c e0       	ldi	r24, 0x0C	; 12
    133c:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_WRITEPIN>
    1340:	8d b1       	in	r24, 0x0d	; 13
    1342:	80 64       	ori	r24, 0x40	; 64
    1344:	8d b9       	out	0x0d, r24	; 13
    1346:	8c 2f       	mov	r24, r28
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	87 30       	cpi	r24, 0x07	; 7
    134c:	91 05       	cpc	r25, r1
    134e:	08 f0       	brcs	.+2      	; 0x1352 <SPI_SlaveInit+0x3e>
    1350:	4a c0       	rjmp	.+148    	; 0x13e6 <SPI_SlaveInit+0xd2>
    1352:	fc 01       	movw	r30, r24
    1354:	e6 5d       	subi	r30, 0xD6	; 214
    1356:	ff 4f       	sbci	r31, 0xFF	; 255
    1358:	0c 94 b6 0e 	jmp	0x1d6c	; 0x1d6c <__tablejump2__>
    135c:	8d b1       	in	r24, 0x0d	; 13
    135e:	8e 7f       	andi	r24, 0xFE	; 254
    1360:	8d b9       	out	0x0d, r24	; 13
    1362:	8d b1       	in	r24, 0x0d	; 13
    1364:	8d 7f       	andi	r24, 0xFD	; 253
    1366:	8d b9       	out	0x0d, r24	; 13
    1368:	8e b1       	in	r24, 0x0e	; 14
    136a:	81 60       	ori	r24, 0x01	; 1
    136c:	8e b9       	out	0x0e, r24	; 14
    136e:	3b c0       	rjmp	.+118    	; 0x13e6 <SPI_SlaveInit+0xd2>
    1370:	8d b1       	in	r24, 0x0d	; 13
    1372:	8e 7f       	andi	r24, 0xFE	; 254
    1374:	8d b9       	out	0x0d, r24	; 13
    1376:	8d b1       	in	r24, 0x0d	; 13
    1378:	8d 7f       	andi	r24, 0xFD	; 253
    137a:	8d b9       	out	0x0d, r24	; 13
    137c:	8e b1       	in	r24, 0x0e	; 14
    137e:	8e 7f       	andi	r24, 0xFE	; 254
    1380:	8e b9       	out	0x0e, r24	; 14
    1382:	31 c0       	rjmp	.+98     	; 0x13e6 <SPI_SlaveInit+0xd2>
    1384:	8d b1       	in	r24, 0x0d	; 13
    1386:	81 60       	ori	r24, 0x01	; 1
    1388:	8d b9       	out	0x0d, r24	; 13
    138a:	8d b1       	in	r24, 0x0d	; 13
    138c:	8d 7f       	andi	r24, 0xFD	; 253
    138e:	8d b9       	out	0x0d, r24	; 13
    1390:	8e b1       	in	r24, 0x0e	; 14
    1392:	81 60       	ori	r24, 0x01	; 1
    1394:	8e b9       	out	0x0e, r24	; 14
    1396:	27 c0       	rjmp	.+78     	; 0x13e6 <SPI_SlaveInit+0xd2>
    1398:	8d b1       	in	r24, 0x0d	; 13
    139a:	81 60       	ori	r24, 0x01	; 1
    139c:	8d b9       	out	0x0d, r24	; 13
    139e:	8d b1       	in	r24, 0x0d	; 13
    13a0:	8d 7f       	andi	r24, 0xFD	; 253
    13a2:	8d b9       	out	0x0d, r24	; 13
    13a4:	8e b1       	in	r24, 0x0e	; 14
    13a6:	8e 7f       	andi	r24, 0xFE	; 254
    13a8:	8e b9       	out	0x0e, r24	; 14
    13aa:	1d c0       	rjmp	.+58     	; 0x13e6 <SPI_SlaveInit+0xd2>
    13ac:	8d b1       	in	r24, 0x0d	; 13
    13ae:	8e 7f       	andi	r24, 0xFE	; 254
    13b0:	8d b9       	out	0x0d, r24	; 13
    13b2:	8d b1       	in	r24, 0x0d	; 13
    13b4:	82 60       	ori	r24, 0x02	; 2
    13b6:	8d b9       	out	0x0d, r24	; 13
    13b8:	8e b1       	in	r24, 0x0e	; 14
    13ba:	81 60       	ori	r24, 0x01	; 1
    13bc:	8e b9       	out	0x0e, r24	; 14
    13be:	13 c0       	rjmp	.+38     	; 0x13e6 <SPI_SlaveInit+0xd2>
    13c0:	8d b1       	in	r24, 0x0d	; 13
    13c2:	8e 7f       	andi	r24, 0xFE	; 254
    13c4:	8d b9       	out	0x0d, r24	; 13
    13c6:	8d b1       	in	r24, 0x0d	; 13
    13c8:	82 60       	ori	r24, 0x02	; 2
    13ca:	8d b9       	out	0x0d, r24	; 13
    13cc:	8e b1       	in	r24, 0x0e	; 14
    13ce:	8e 7f       	andi	r24, 0xFE	; 254
    13d0:	8e b9       	out	0x0e, r24	; 14
    13d2:	09 c0       	rjmp	.+18     	; 0x13e6 <SPI_SlaveInit+0xd2>
    13d4:	8d b1       	in	r24, 0x0d	; 13
    13d6:	81 60       	ori	r24, 0x01	; 1
    13d8:	8d b9       	out	0x0d, r24	; 13
    13da:	8d b1       	in	r24, 0x0d	; 13
    13dc:	82 60       	ori	r24, 0x02	; 2
    13de:	8d b9       	out	0x0d, r24	; 13
    13e0:	8e b1       	in	r24, 0x0e	; 14
    13e2:	8e 7f       	andi	r24, 0xFE	; 254
    13e4:	8e b9       	out	0x0e, r24	; 14
    13e6:	cf 91       	pop	r28
    13e8:	08 95       	ret

000013ea <SPI_RecievePeriodicChecking>:



uint8_t SPI_RecievePeriodicChecking(uint8_t * pdata)
{
    13ea:	fc 01       	movw	r30, r24
	if (read_bit(SPSR,SPIF))
    13ec:	9e b1       	in	r25, 0x0e	; 14
    13ee:	89 2f       	mov	r24, r25
    13f0:	88 1f       	adc	r24, r24
    13f2:	88 27       	eor	r24, r24
    13f4:	88 1f       	adc	r24, r24
    13f6:	19 f0       	breq	.+6      	; 0x13fe <SPI_RecievePeriodicChecking+0x14>
	{
		*pdata=SPDR;
    13f8:	8f b1       	in	r24, 0x0f	; 15
    13fa:	80 83       	st	Z, r24
		return 1;
    13fc:	81 e0       	ldi	r24, 0x01	; 1
	}
	return 0;
}
    13fe:	08 95       	ret

00001400 <TIMER_0_init>:
	
}



void TIMER2_SetCallBack(void(*ptf)(void)){
    1400:	81 30       	cpi	r24, 0x01	; 1
    1402:	f1 f0       	breq	.+60     	; 0x1440 <TIMER_0_init+0x40>
    1404:	28 f0       	brcs	.+10     	; 0x1410 <TIMER_0_init+0x10>
    1406:	82 30       	cpi	r24, 0x02	; 2
    1408:	99 f0       	breq	.+38     	; 0x1430 <TIMER_0_init+0x30>
    140a:	83 30       	cpi	r24, 0x03	; 3
    140c:	49 f0       	breq	.+18     	; 0x1420 <TIMER_0_init+0x20>
    140e:	20 c0       	rjmp	.+64     	; 0x1450 <TIMER_0_init+0x50>
    1410:	83 b7       	in	r24, 0x33	; 51
    1412:	8f 7b       	andi	r24, 0xBF	; 191
    1414:	83 bf       	out	0x33, r24	; 51
    1416:	83 b7       	in	r24, 0x33	; 51
    1418:	87 7f       	andi	r24, 0xF7	; 247
    141a:	83 bf       	out	0x33, r24	; 51
    141c:	84 e0       	ldi	r24, 0x04	; 4
    141e:	08 95       	ret
    1420:	83 b7       	in	r24, 0x33	; 51
    1422:	80 64       	ori	r24, 0x40	; 64
    1424:	83 bf       	out	0x33, r24	; 51
    1426:	83 b7       	in	r24, 0x33	; 51
    1428:	87 7f       	andi	r24, 0xF7	; 247
    142a:	83 bf       	out	0x33, r24	; 51
    142c:	84 e0       	ldi	r24, 0x04	; 4
    142e:	08 95       	ret
    1430:	83 b7       	in	r24, 0x33	; 51
    1432:	8f 7b       	andi	r24, 0xBF	; 191
    1434:	83 bf       	out	0x33, r24	; 51
    1436:	83 b7       	in	r24, 0x33	; 51
    1438:	88 60       	ori	r24, 0x08	; 8
    143a:	83 bf       	out	0x33, r24	; 51
    143c:	84 e0       	ldi	r24, 0x04	; 4
    143e:	08 95       	ret
    1440:	83 b7       	in	r24, 0x33	; 51
    1442:	80 64       	ori	r24, 0x40	; 64
    1444:	83 bf       	out	0x33, r24	; 51
    1446:	83 b7       	in	r24, 0x33	; 51
    1448:	88 60       	ori	r24, 0x08	; 8
    144a:	83 bf       	out	0x33, r24	; 51
    144c:	84 e0       	ldi	r24, 0x04	; 4
    144e:	08 95       	ret
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	08 95       	ret

00001454 <TIMER_0_start>:
    1454:	82 30       	cpi	r24, 0x02	; 2
    1456:	09 f1       	breq	.+66     	; 0x149a <TIMER_0_start+0x46>
    1458:	28 f4       	brcc	.+10     	; 0x1464 <TIMER_0_start+0x10>
    145a:	88 23       	and	r24, r24
    145c:	41 f0       	breq	.+16     	; 0x146e <TIMER_0_start+0x1a>
    145e:	81 30       	cpi	r24, 0x01	; 1
    1460:	89 f0       	breq	.+34     	; 0x1484 <TIMER_0_start+0x30>
    1462:	3c c0       	rjmp	.+120    	; 0x14dc <TIMER_0_start+0x88>
    1464:	85 30       	cpi	r24, 0x05	; 5
    1466:	21 f1       	breq	.+72     	; 0x14b0 <TIMER_0_start+0x5c>
    1468:	86 30       	cpi	r24, 0x06	; 6
    146a:	69 f1       	breq	.+90     	; 0x14c6 <TIMER_0_start+0x72>
    146c:	37 c0       	rjmp	.+110    	; 0x14dc <TIMER_0_start+0x88>
    146e:	83 b7       	in	r24, 0x33	; 51
    1470:	81 60       	ori	r24, 0x01	; 1
    1472:	83 bf       	out	0x33, r24	; 51
    1474:	83 b7       	in	r24, 0x33	; 51
    1476:	8d 7f       	andi	r24, 0xFD	; 253
    1478:	83 bf       	out	0x33, r24	; 51
    147a:	83 b7       	in	r24, 0x33	; 51
    147c:	8b 7f       	andi	r24, 0xFB	; 251
    147e:	83 bf       	out	0x33, r24	; 51
    1480:	84 e0       	ldi	r24, 0x04	; 4
    1482:	08 95       	ret
    1484:	83 b7       	in	r24, 0x33	; 51
    1486:	82 60       	ori	r24, 0x02	; 2
    1488:	83 bf       	out	0x33, r24	; 51
    148a:	83 b7       	in	r24, 0x33	; 51
    148c:	8e 7f       	andi	r24, 0xFE	; 254
    148e:	83 bf       	out	0x33, r24	; 51
    1490:	83 b7       	in	r24, 0x33	; 51
    1492:	8b 7f       	andi	r24, 0xFB	; 251
    1494:	83 bf       	out	0x33, r24	; 51
    1496:	84 e0       	ldi	r24, 0x04	; 4
    1498:	08 95       	ret
    149a:	83 b7       	in	r24, 0x33	; 51
    149c:	81 60       	ori	r24, 0x01	; 1
    149e:	83 bf       	out	0x33, r24	; 51
    14a0:	83 b7       	in	r24, 0x33	; 51
    14a2:	82 60       	ori	r24, 0x02	; 2
    14a4:	83 bf       	out	0x33, r24	; 51
    14a6:	83 b7       	in	r24, 0x33	; 51
    14a8:	8b 7f       	andi	r24, 0xFB	; 251
    14aa:	83 bf       	out	0x33, r24	; 51
    14ac:	84 e0       	ldi	r24, 0x04	; 4
    14ae:	08 95       	ret
    14b0:	83 b7       	in	r24, 0x33	; 51
    14b2:	84 60       	ori	r24, 0x04	; 4
    14b4:	83 bf       	out	0x33, r24	; 51
    14b6:	83 b7       	in	r24, 0x33	; 51
    14b8:	8d 7f       	andi	r24, 0xFD	; 253
    14ba:	83 bf       	out	0x33, r24	; 51
    14bc:	83 b7       	in	r24, 0x33	; 51
    14be:	8e 7f       	andi	r24, 0xFE	; 254
    14c0:	83 bf       	out	0x33, r24	; 51
    14c2:	84 e0       	ldi	r24, 0x04	; 4
    14c4:	08 95       	ret
    14c6:	83 b7       	in	r24, 0x33	; 51
    14c8:	81 60       	ori	r24, 0x01	; 1
    14ca:	83 bf       	out	0x33, r24	; 51
    14cc:	83 b7       	in	r24, 0x33	; 51
    14ce:	8d 7f       	andi	r24, 0xFD	; 253
    14d0:	83 bf       	out	0x33, r24	; 51
    14d2:	83 b7       	in	r24, 0x33	; 51
    14d4:	84 60       	ori	r24, 0x04	; 4
    14d6:	83 bf       	out	0x33, r24	; 51
    14d8:	84 e0       	ldi	r24, 0x04	; 4
    14da:	08 95       	ret
    14dc:	80 e0       	ldi	r24, 0x00	; 0
    14de:	08 95       	ret

000014e0 <TIMER_0_setIntialValue>:
    14e0:	cf 92       	push	r12
    14e2:	df 92       	push	r13
    14e4:	ef 92       	push	r14
    14e6:	ff 92       	push	r15
    14e8:	6b 01       	movw	r12, r22
    14ea:	7c 01       	movw	r14, r24
    14ec:	20 e0       	ldi	r18, 0x00	; 0
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	40 e8       	ldi	r20, 0x80	; 128
    14f2:	53 e4       	ldi	r21, 0x43	; 67
    14f4:	0e 94 89 0c 	call	0x1912	; 0x1912 <__cmpsf2>
    14f8:	88 23       	and	r24, r24
    14fa:	94 f4       	brge	.+36     	; 0x1520 <TIMER_0_setIntialValue+0x40>
    14fc:	20 e0       	ldi	r18, 0x00	; 0
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	a9 01       	movw	r20, r18
    1502:	c7 01       	movw	r24, r14
    1504:	b6 01       	movw	r22, r12
    1506:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <__gesf2>
    150a:	88 23       	and	r24, r24
    150c:	5c f0       	brlt	.+22     	; 0x1524 <TIMER_0_setIntialValue+0x44>
    150e:	c7 01       	movw	r24, r14
    1510:	b6 01       	movw	r22, r12
    1512:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <ceil>
    1516:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__fixunssfsi>
    151a:	62 bf       	out	0x32, r22	; 50
    151c:	84 e0       	ldi	r24, 0x04	; 4
    151e:	03 c0       	rjmp	.+6      	; 0x1526 <TIMER_0_setIntialValue+0x46>
    1520:	83 e0       	ldi	r24, 0x03	; 3
    1522:	01 c0       	rjmp	.+2      	; 0x1526 <TIMER_0_setIntialValue+0x46>
    1524:	83 e0       	ldi	r24, 0x03	; 3
    1526:	ff 90       	pop	r15
    1528:	ef 90       	pop	r14
    152a:	df 90       	pop	r13
    152c:	cf 90       	pop	r12
    152e:	08 95       	ret

00001530 <TIMER_0_OvfNum>:
    1530:	8f 92       	push	r8
    1532:	9f 92       	push	r9
    1534:	af 92       	push	r10
    1536:	bf 92       	push	r11
    1538:	cf 92       	push	r12
    153a:	df 92       	push	r13
    153c:	ef 92       	push	r14
    153e:	ff 92       	push	r15
    1540:	4b 01       	movw	r8, r22
    1542:	5c 01       	movw	r10, r24
    1544:	20 e0       	ldi	r18, 0x00	; 0
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	a9 01       	movw	r20, r18
    154a:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <__gesf2>
    154e:	18 16       	cp	r1, r24
    1550:	94 f0       	brlt	.+36     	; 0x1576 <TIMER_0_OvfNum+0x46>
    1552:	1e c0       	rjmp	.+60     	; 0x1590 <TIMER_0_OvfNum+0x60>
    1554:	08 b6       	in	r0, 0x38	; 56
    1556:	00 fe       	sbrs	r0, 0
    1558:	fd cf       	rjmp	.-6      	; 0x1554 <TIMER_0_OvfNum+0x24>
    155a:	88 b7       	in	r24, 0x38	; 56
    155c:	81 60       	ori	r24, 0x01	; 1
    155e:	88 bf       	out	0x38, r24	; 56
    1560:	20 e0       	ldi	r18, 0x00	; 0
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	40 e8       	ldi	r20, 0x80	; 128
    1566:	5f e3       	ldi	r21, 0x3F	; 63
    1568:	c7 01       	movw	r24, r14
    156a:	b6 01       	movw	r22, r12
    156c:	0e 94 06 0c 	call	0x180c	; 0x180c <__addsf3>
    1570:	6b 01       	movw	r12, r22
    1572:	7c 01       	movw	r14, r24
    1574:	03 c0       	rjmp	.+6      	; 0x157c <TIMER_0_OvfNum+0x4c>
    1576:	c1 2c       	mov	r12, r1
    1578:	d1 2c       	mov	r13, r1
    157a:	76 01       	movw	r14, r12
    157c:	a5 01       	movw	r20, r10
    157e:	94 01       	movw	r18, r8
    1580:	c7 01       	movw	r24, r14
    1582:	b6 01       	movw	r22, r12
    1584:	0e 94 89 0c 	call	0x1912	; 0x1912 <__cmpsf2>
    1588:	88 23       	and	r24, r24
    158a:	24 f3       	brlt	.-56     	; 0x1554 <TIMER_0_OvfNum+0x24>
    158c:	84 e0       	ldi	r24, 0x04	; 4
    158e:	2a c0       	rjmp	.+84     	; 0x15e4 <TIMER_0_OvfNum+0xb4>
    1590:	20 e0       	ldi	r18, 0x00	; 0
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	a9 01       	movw	r20, r18
    1596:	c5 01       	movw	r24, r10
    1598:	b4 01       	movw	r22, r8
    159a:	0e 94 89 0c 	call	0x1912	; 0x1912 <__cmpsf2>
    159e:	18 16       	cp	r1, r24
    15a0:	9c f4       	brge	.+38     	; 0x15c8 <TIMER_0_OvfNum+0x98>
    15a2:	82 e0       	ldi	r24, 0x02	; 2
    15a4:	1f c0       	rjmp	.+62     	; 0x15e4 <TIMER_0_OvfNum+0xb4>
    15a6:	08 b6       	in	r0, 0x38	; 56
    15a8:	00 fe       	sbrs	r0, 0
    15aa:	fd cf       	rjmp	.-6      	; 0x15a6 <TIMER_0_OvfNum+0x76>
    15ac:	88 b7       	in	r24, 0x38	; 56
    15ae:	81 60       	ori	r24, 0x01	; 1
    15b0:	88 bf       	out	0x38, r24	; 56
    15b2:	20 e0       	ldi	r18, 0x00	; 0
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	40 e8       	ldi	r20, 0x80	; 128
    15b8:	5f e3       	ldi	r21, 0x3F	; 63
    15ba:	c7 01       	movw	r24, r14
    15bc:	b6 01       	movw	r22, r12
    15be:	0e 94 06 0c 	call	0x180c	; 0x180c <__addsf3>
    15c2:	6b 01       	movw	r12, r22
    15c4:	7c 01       	movw	r14, r24
    15c6:	03 c0       	rjmp	.+6      	; 0x15ce <TIMER_0_OvfNum+0x9e>
    15c8:	c1 2c       	mov	r12, r1
    15ca:	d1 2c       	mov	r13, r1
    15cc:	76 01       	movw	r14, r12
    15ce:	20 e0       	ldi	r18, 0x00	; 0
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	40 e8       	ldi	r20, 0x80	; 128
    15d4:	5f e3       	ldi	r21, 0x3F	; 63
    15d6:	c7 01       	movw	r24, r14
    15d8:	b6 01       	movw	r22, r12
    15da:	0e 94 89 0c 	call	0x1912	; 0x1912 <__cmpsf2>
    15de:	88 23       	and	r24, r24
    15e0:	14 f3       	brlt	.-60     	; 0x15a6 <TIMER_0_OvfNum+0x76>
    15e2:	84 e0       	ldi	r24, 0x04	; 4
    15e4:	ff 90       	pop	r15
    15e6:	ef 90       	pop	r14
    15e8:	df 90       	pop	r13
    15ea:	cf 90       	pop	r12
    15ec:	bf 90       	pop	r11
    15ee:	af 90       	pop	r10
    15f0:	9f 90       	pop	r9
    15f2:	8f 90       	pop	r8
    15f4:	08 95       	ret

000015f6 <TIMER_0_DELAY_MS>:
    15f6:	20 e0       	ldi	r18, 0x00	; 0
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	4a e7       	ldi	r20, 0x7A	; 122
    15fc:	54 e4       	ldi	r21, 0x44	; 68
    15fe:	0e 94 8e 0c 	call	0x191c	; 0x191c <__divsf3>
    1602:	2d eb       	ldi	r18, 0xBD	; 189
    1604:	37 e3       	ldi	r19, 0x37	; 55
    1606:	46 e8       	ldi	r20, 0x86	; 134
    1608:	59 e3       	ldi	r21, 0x39	; 57
    160a:	0e 94 8e 0c 	call	0x191c	; 0x191c <__divsf3>
    160e:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <ceil>
    1612:	60 93 46 03 	sts	0x0346, r22	; 0x800346 <g_ovfNum>
    1616:	70 93 47 03 	sts	0x0347, r23	; 0x800347 <g_ovfNum+0x1>
    161a:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <g_ovfNum+0x2>
    161e:	90 93 49 03 	sts	0x0349, r25	; 0x800349 <g_ovfNum+0x3>
    1622:	80 e0       	ldi	r24, 0x00	; 0
    1624:	0e 94 00 0a 	call	0x1400	; 0x1400 <TIMER_0_init>
    1628:	60 e0       	ldi	r22, 0x00	; 0
    162a:	70 e0       	ldi	r23, 0x00	; 0
    162c:	cb 01       	movw	r24, r22
    162e:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <TIMER_0_setIntialValue>
    1632:	80 e0       	ldi	r24, 0x00	; 0
    1634:	0e 94 2a 0a 	call	0x1454	; 0x1454 <TIMER_0_start>
    1638:	60 91 46 03 	lds	r22, 0x0346	; 0x800346 <g_ovfNum>
    163c:	70 91 47 03 	lds	r23, 0x0347	; 0x800347 <g_ovfNum+0x1>
    1640:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <g_ovfNum+0x2>
    1644:	90 91 49 03 	lds	r25, 0x0349	; 0x800349 <g_ovfNum+0x3>
    1648:	0e 94 98 0a 	call	0x1530	; 0x1530 <TIMER_0_OvfNum>
    164c:	08 95       	ret

0000164e <TIMER_2_init>:
    164e:	81 30       	cpi	r24, 0x01	; 1
    1650:	f1 f0       	breq	.+60     	; 0x168e <TIMER_2_init+0x40>
    1652:	28 f0       	brcs	.+10     	; 0x165e <TIMER_2_init+0x10>
    1654:	82 30       	cpi	r24, 0x02	; 2
    1656:	99 f0       	breq	.+38     	; 0x167e <TIMER_2_init+0x30>
    1658:	83 30       	cpi	r24, 0x03	; 3
    165a:	49 f0       	breq	.+18     	; 0x166e <TIMER_2_init+0x20>
    165c:	20 c0       	rjmp	.+64     	; 0x169e <TIMER_2_init+0x50>
    165e:	85 b5       	in	r24, 0x25	; 37
    1660:	8f 7b       	andi	r24, 0xBF	; 191
    1662:	85 bd       	out	0x25, r24	; 37
    1664:	85 b5       	in	r24, 0x25	; 37
    1666:	87 7f       	andi	r24, 0xF7	; 247
    1668:	85 bd       	out	0x25, r24	; 37
    166a:	84 e0       	ldi	r24, 0x04	; 4
    166c:	08 95       	ret
    166e:	85 b5       	in	r24, 0x25	; 37
    1670:	80 64       	ori	r24, 0x40	; 64
    1672:	85 bd       	out	0x25, r24	; 37
    1674:	85 b5       	in	r24, 0x25	; 37
    1676:	87 7f       	andi	r24, 0xF7	; 247
    1678:	85 bd       	out	0x25, r24	; 37
    167a:	84 e0       	ldi	r24, 0x04	; 4
    167c:	08 95       	ret
    167e:	85 b5       	in	r24, 0x25	; 37
    1680:	8f 7b       	andi	r24, 0xBF	; 191
    1682:	85 bd       	out	0x25, r24	; 37
    1684:	85 b5       	in	r24, 0x25	; 37
    1686:	88 60       	ori	r24, 0x08	; 8
    1688:	85 bd       	out	0x25, r24	; 37
    168a:	84 e0       	ldi	r24, 0x04	; 4
    168c:	08 95       	ret
    168e:	85 b5       	in	r24, 0x25	; 37
    1690:	80 64       	ori	r24, 0x40	; 64
    1692:	85 bd       	out	0x25, r24	; 37
    1694:	85 b5       	in	r24, 0x25	; 37
    1696:	88 60       	ori	r24, 0x08	; 8
    1698:	85 bd       	out	0x25, r24	; 37
    169a:	84 e0       	ldi	r24, 0x04	; 4
    169c:	08 95       	ret
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	08 95       	ret

000016a2 <TIMER_2_setIntialValue>:
    16a2:	84 bd       	out	0x24, r24	; 36
    16a4:	84 e0       	ldi	r24, 0x04	; 4
    16a6:	08 95       	ret

000016a8 <TIMER_2_start>:
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	87 30       	cpi	r24, 0x07	; 7
    16ac:	91 05       	cpc	r25, r1
    16ae:	08 f0       	brcs	.+2      	; 0x16b2 <TIMER_2_start+0xa>
    16b0:	52 c0       	rjmp	.+164    	; 0x1756 <TIMER_2_start+0xae>
    16b2:	fc 01       	movw	r30, r24
    16b4:	ef 5c       	subi	r30, 0xCF	; 207
    16b6:	ff 4f       	sbci	r31, 0xFF	; 255
    16b8:	0c 94 b6 0e 	jmp	0x1d6c	; 0x1d6c <__tablejump2__>
    16bc:	85 b5       	in	r24, 0x25	; 37
    16be:	81 60       	ori	r24, 0x01	; 1
    16c0:	85 bd       	out	0x25, r24	; 37
    16c2:	85 b5       	in	r24, 0x25	; 37
    16c4:	8d 7f       	andi	r24, 0xFD	; 253
    16c6:	85 bd       	out	0x25, r24	; 37
    16c8:	85 b5       	in	r24, 0x25	; 37
    16ca:	8b 7f       	andi	r24, 0xFB	; 251
    16cc:	85 bd       	out	0x25, r24	; 37
    16ce:	84 e0       	ldi	r24, 0x04	; 4
    16d0:	08 95       	ret
    16d2:	85 b5       	in	r24, 0x25	; 37
    16d4:	82 60       	ori	r24, 0x02	; 2
    16d6:	85 bd       	out	0x25, r24	; 37
    16d8:	85 b5       	in	r24, 0x25	; 37
    16da:	8e 7f       	andi	r24, 0xFE	; 254
    16dc:	85 bd       	out	0x25, r24	; 37
    16de:	85 b5       	in	r24, 0x25	; 37
    16e0:	8b 7f       	andi	r24, 0xFB	; 251
    16e2:	85 bd       	out	0x25, r24	; 37
    16e4:	84 e0       	ldi	r24, 0x04	; 4
    16e6:	08 95       	ret
    16e8:	85 b5       	in	r24, 0x25	; 37
    16ea:	81 60       	ori	r24, 0x01	; 1
    16ec:	85 bd       	out	0x25, r24	; 37
    16ee:	85 b5       	in	r24, 0x25	; 37
    16f0:	82 60       	ori	r24, 0x02	; 2
    16f2:	85 bd       	out	0x25, r24	; 37
    16f4:	85 b5       	in	r24, 0x25	; 37
    16f6:	8b 7f       	andi	r24, 0xFB	; 251
    16f8:	85 bd       	out	0x25, r24	; 37
    16fa:	84 e0       	ldi	r24, 0x04	; 4
    16fc:	08 95       	ret
    16fe:	85 b5       	in	r24, 0x25	; 37
    1700:	84 60       	ori	r24, 0x04	; 4
    1702:	85 bd       	out	0x25, r24	; 37
    1704:	85 b5       	in	r24, 0x25	; 37
    1706:	8d 7f       	andi	r24, 0xFD	; 253
    1708:	85 bd       	out	0x25, r24	; 37
    170a:	85 b5       	in	r24, 0x25	; 37
    170c:	8e 7f       	andi	r24, 0xFE	; 254
    170e:	85 bd       	out	0x25, r24	; 37
    1710:	84 e0       	ldi	r24, 0x04	; 4
    1712:	08 95       	ret
    1714:	85 b5       	in	r24, 0x25	; 37
    1716:	81 60       	ori	r24, 0x01	; 1
    1718:	85 bd       	out	0x25, r24	; 37
    171a:	85 b5       	in	r24, 0x25	; 37
    171c:	8d 7f       	andi	r24, 0xFD	; 253
    171e:	85 bd       	out	0x25, r24	; 37
    1720:	85 b5       	in	r24, 0x25	; 37
    1722:	84 60       	ori	r24, 0x04	; 4
    1724:	85 bd       	out	0x25, r24	; 37
    1726:	84 e0       	ldi	r24, 0x04	; 4
    1728:	08 95       	ret
    172a:	85 b5       	in	r24, 0x25	; 37
    172c:	84 60       	ori	r24, 0x04	; 4
    172e:	85 bd       	out	0x25, r24	; 37
    1730:	85 b5       	in	r24, 0x25	; 37
    1732:	8e 7f       	andi	r24, 0xFE	; 254
    1734:	85 bd       	out	0x25, r24	; 37
    1736:	85 b5       	in	r24, 0x25	; 37
    1738:	82 60       	ori	r24, 0x02	; 2
    173a:	85 bd       	out	0x25, r24	; 37
    173c:	84 e0       	ldi	r24, 0x04	; 4
    173e:	08 95       	ret
    1740:	85 b5       	in	r24, 0x25	; 37
    1742:	81 60       	ori	r24, 0x01	; 1
    1744:	85 bd       	out	0x25, r24	; 37
    1746:	85 b5       	in	r24, 0x25	; 37
    1748:	82 60       	ori	r24, 0x02	; 2
    174a:	85 bd       	out	0x25, r24	; 37
    174c:	85 b5       	in	r24, 0x25	; 37
    174e:	84 60       	ori	r24, 0x04	; 4
    1750:	85 bd       	out	0x25, r24	; 37
    1752:	84 e0       	ldi	r24, 0x04	; 4
    1754:	08 95       	ret
    1756:	80 e0       	ldi	r24, 0x00	; 0
    1758:	08 95       	ret

0000175a <TIMER_2_INT>:
}



void TIMER_2_INT(){
	sei();
    175a:	78 94       	sei
	set_bit(TIMSK,TOIE2);
    175c:	89 b7       	in	r24, 0x39	; 57
    175e:	80 64       	ori	r24, 0x40	; 64
    1760:	89 bf       	out	0x39, r24	; 57
	TIMER_2_init(NORMAL_MODE);
    1762:	80 e0       	ldi	r24, 0x00	; 0
    1764:	0e 94 27 0b 	call	0x164e	; 0x164e <TIMER_2_init>
	TIMER_2_setIntialValue(0);
    1768:	80 e0       	ldi	r24, 0x00	; 0
    176a:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <TIMER_2_setIntialValue>
	TIMER_2_start(PRECALER_1);
    176e:	80 e0       	ldi	r24, 0x00	; 0
    1770:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <TIMER_2_start>
    1774:	08 95       	ret

00001776 <__vector_5>:
}




ISR(TIMER2_OVF){
    1776:	1f 92       	push	r1
    1778:	0f 92       	push	r0
    177a:	0f b6       	in	r0, 0x3f	; 63
    177c:	0f 92       	push	r0
    177e:	11 24       	eor	r1, r1
    1780:	2f 93       	push	r18
    1782:	8f 93       	push	r24
    1784:	9f 93       	push	r25
    1786:	af 93       	push	r26
    1788:	bf 93       	push	r27

if(state){
    178a:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <state>
    178e:	88 23       	and	r24, r24
    1790:	31 f1       	breq	.+76     	; 0x17de <__vector_5+0x68>
	
		if (ovf < 7813 ){
    1792:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <ovf>
    1796:	90 91 43 03 	lds	r25, 0x0343	; 0x800343 <ovf+0x1>
    179a:	a0 91 44 03 	lds	r26, 0x0344	; 0x800344 <ovf+0x2>
    179e:	b0 91 45 03 	lds	r27, 0x0345	; 0x800345 <ovf+0x3>
    17a2:	85 38       	cpi	r24, 0x85	; 133
    17a4:	2e e1       	ldi	r18, 0x1E	; 30
    17a6:	92 07       	cpc	r25, r18
    17a8:	a1 05       	cpc	r26, r1
    17aa:	b1 05       	cpc	r27, r1
    17ac:	7c f4       	brge	.+30     	; 0x17cc <__vector_5+0x56>
			ovf++;
    17ae:	01 96       	adiw	r24, 0x01	; 1
    17b0:	a1 1d       	adc	r26, r1
    17b2:	b1 1d       	adc	r27, r1
    17b4:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <ovf>
    17b8:	90 93 43 03 	sts	0x0343, r25	; 0x800343 <ovf+0x1>
    17bc:	a0 93 44 03 	sts	0x0344, r26	; 0x800344 <ovf+0x2>
    17c0:	b0 93 45 03 	sts	0x0345, r27	; 0x800345 <ovf+0x3>
			enter_zeroFlag = 2 ;
    17c4:	82 e0       	ldi	r24, 0x02	; 2
    17c6:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <enter_zeroFlag>
    17ca:	15 c0       	rjmp	.+42     	; 0x17f6 <__vector_5+0x80>
		}
		else if ( ovf >= 7813){
    17cc:	85 38       	cpi	r24, 0x85	; 133
    17ce:	9e 41       	sbci	r25, 0x1E	; 30
    17d0:	a1 05       	cpc	r26, r1
    17d2:	b1 05       	cpc	r27, r1
    17d4:	84 f0       	brlt	.+32     	; 0x17f6 <__vector_5+0x80>
			enter_zeroFlag = 1 ;
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <enter_zeroFlag>
    17dc:	0c c0       	rjmp	.+24     	; 0x17f6 <__vector_5+0x80>
			
		}
		
}else{
	enter_zeroFlag = 0 ;
    17de:	10 92 4a 03 	sts	0x034A, r1	; 0x80034a <enter_zeroFlag>
	ovf = 0;
    17e2:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <ovf>
    17e6:	10 92 43 03 	sts	0x0343, r1	; 0x800343 <ovf+0x1>
    17ea:	10 92 44 03 	sts	0x0344, r1	; 0x800344 <ovf+0x2>
    17ee:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <ovf+0x3>
	state = 0 ;
    17f2:	10 92 4b 03 	sts	0x034B, r1	; 0x80034b <state>
}
    17f6:	bf 91       	pop	r27
    17f8:	af 91       	pop	r26
    17fa:	9f 91       	pop	r25
    17fc:	8f 91       	pop	r24
    17fe:	2f 91       	pop	r18
    1800:	0f 90       	pop	r0
    1802:	0f be       	out	0x3f, r0	; 63
    1804:	0f 90       	pop	r0
    1806:	1f 90       	pop	r1
    1808:	18 95       	reti

0000180a <__subsf3>:
    180a:	50 58       	subi	r21, 0x80	; 128

0000180c <__addsf3>:
    180c:	bb 27       	eor	r27, r27
    180e:	aa 27       	eor	r26, r26
    1810:	0e 94 1d 0c 	call	0x183a	; 0x183a <__addsf3x>
    1814:	0c 94 d0 0d 	jmp	0x1ba0	; 0x1ba0 <__fp_round>
    1818:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <__fp_pscA>
    181c:	38 f0       	brcs	.+14     	; 0x182c <__addsf3+0x20>
    181e:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__fp_pscB>
    1822:	20 f0       	brcs	.+8      	; 0x182c <__addsf3+0x20>
    1824:	39 f4       	brne	.+14     	; 0x1834 <__addsf3+0x28>
    1826:	9f 3f       	cpi	r25, 0xFF	; 255
    1828:	19 f4       	brne	.+6      	; 0x1830 <__addsf3+0x24>
    182a:	26 f4       	brtc	.+8      	; 0x1834 <__addsf3+0x28>
    182c:	0c 94 bf 0d 	jmp	0x1b7e	; 0x1b7e <__fp_nan>
    1830:	0e f4       	brtc	.+2      	; 0x1834 <__addsf3+0x28>
    1832:	e0 95       	com	r30
    1834:	e7 fb       	bst	r30, 7
    1836:	0c 94 90 0d 	jmp	0x1b20	; 0x1b20 <__fp_inf>

0000183a <__addsf3x>:
    183a:	e9 2f       	mov	r30, r25
    183c:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <__fp_split3>
    1840:	58 f3       	brcs	.-42     	; 0x1818 <__addsf3+0xc>
    1842:	ba 17       	cp	r27, r26
    1844:	62 07       	cpc	r22, r18
    1846:	73 07       	cpc	r23, r19
    1848:	84 07       	cpc	r24, r20
    184a:	95 07       	cpc	r25, r21
    184c:	20 f0       	brcs	.+8      	; 0x1856 <__addsf3x+0x1c>
    184e:	79 f4       	brne	.+30     	; 0x186e <__addsf3x+0x34>
    1850:	a6 f5       	brtc	.+104    	; 0x18ba <__addsf3x+0x80>
    1852:	0c 94 1b 0e 	jmp	0x1c36	; 0x1c36 <__fp_zero>
    1856:	0e f4       	brtc	.+2      	; 0x185a <__addsf3x+0x20>
    1858:	e0 95       	com	r30
    185a:	0b 2e       	mov	r0, r27
    185c:	ba 2f       	mov	r27, r26
    185e:	a0 2d       	mov	r26, r0
    1860:	0b 01       	movw	r0, r22
    1862:	b9 01       	movw	r22, r18
    1864:	90 01       	movw	r18, r0
    1866:	0c 01       	movw	r0, r24
    1868:	ca 01       	movw	r24, r20
    186a:	a0 01       	movw	r20, r0
    186c:	11 24       	eor	r1, r1
    186e:	ff 27       	eor	r31, r31
    1870:	59 1b       	sub	r21, r25
    1872:	99 f0       	breq	.+38     	; 0x189a <__addsf3x+0x60>
    1874:	59 3f       	cpi	r21, 0xF9	; 249
    1876:	50 f4       	brcc	.+20     	; 0x188c <__addsf3x+0x52>
    1878:	50 3e       	cpi	r21, 0xE0	; 224
    187a:	68 f1       	brcs	.+90     	; 0x18d6 <__addsf3x+0x9c>
    187c:	1a 16       	cp	r1, r26
    187e:	f0 40       	sbci	r31, 0x00	; 0
    1880:	a2 2f       	mov	r26, r18
    1882:	23 2f       	mov	r18, r19
    1884:	34 2f       	mov	r19, r20
    1886:	44 27       	eor	r20, r20
    1888:	58 5f       	subi	r21, 0xF8	; 248
    188a:	f3 cf       	rjmp	.-26     	; 0x1872 <__addsf3x+0x38>
    188c:	46 95       	lsr	r20
    188e:	37 95       	ror	r19
    1890:	27 95       	ror	r18
    1892:	a7 95       	ror	r26
    1894:	f0 40       	sbci	r31, 0x00	; 0
    1896:	53 95       	inc	r21
    1898:	c9 f7       	brne	.-14     	; 0x188c <__addsf3x+0x52>
    189a:	7e f4       	brtc	.+30     	; 0x18ba <__addsf3x+0x80>
    189c:	1f 16       	cp	r1, r31
    189e:	ba 0b       	sbc	r27, r26
    18a0:	62 0b       	sbc	r22, r18
    18a2:	73 0b       	sbc	r23, r19
    18a4:	84 0b       	sbc	r24, r20
    18a6:	ba f0       	brmi	.+46     	; 0x18d6 <__addsf3x+0x9c>
    18a8:	91 50       	subi	r25, 0x01	; 1
    18aa:	a1 f0       	breq	.+40     	; 0x18d4 <__addsf3x+0x9a>
    18ac:	ff 0f       	add	r31, r31
    18ae:	bb 1f       	adc	r27, r27
    18b0:	66 1f       	adc	r22, r22
    18b2:	77 1f       	adc	r23, r23
    18b4:	88 1f       	adc	r24, r24
    18b6:	c2 f7       	brpl	.-16     	; 0x18a8 <__addsf3x+0x6e>
    18b8:	0e c0       	rjmp	.+28     	; 0x18d6 <__addsf3x+0x9c>
    18ba:	ba 0f       	add	r27, r26
    18bc:	62 1f       	adc	r22, r18
    18be:	73 1f       	adc	r23, r19
    18c0:	84 1f       	adc	r24, r20
    18c2:	48 f4       	brcc	.+18     	; 0x18d6 <__addsf3x+0x9c>
    18c4:	87 95       	ror	r24
    18c6:	77 95       	ror	r23
    18c8:	67 95       	ror	r22
    18ca:	b7 95       	ror	r27
    18cc:	f7 95       	ror	r31
    18ce:	9e 3f       	cpi	r25, 0xFE	; 254
    18d0:	08 f0       	brcs	.+2      	; 0x18d4 <__addsf3x+0x9a>
    18d2:	b0 cf       	rjmp	.-160    	; 0x1834 <__addsf3+0x28>
    18d4:	93 95       	inc	r25
    18d6:	88 0f       	add	r24, r24
    18d8:	08 f0       	brcs	.+2      	; 0x18dc <__addsf3x+0xa2>
    18da:	99 27       	eor	r25, r25
    18dc:	ee 0f       	add	r30, r30
    18de:	97 95       	ror	r25
    18e0:	87 95       	ror	r24
    18e2:	08 95       	ret

000018e4 <ceil>:
    18e4:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <__fp_trunc>
    18e8:	90 f0       	brcs	.+36     	; 0x190e <ceil+0x2a>
    18ea:	9f 37       	cpi	r25, 0x7F	; 127
    18ec:	48 f4       	brcc	.+18     	; 0x1900 <ceil+0x1c>
    18ee:	91 11       	cpse	r25, r1
    18f0:	16 f4       	brtc	.+4      	; 0x18f6 <ceil+0x12>
    18f2:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <__fp_szero>
    18f6:	60 e0       	ldi	r22, 0x00	; 0
    18f8:	70 e0       	ldi	r23, 0x00	; 0
    18fa:	80 e8       	ldi	r24, 0x80	; 128
    18fc:	9f e3       	ldi	r25, 0x3F	; 63
    18fe:	08 95       	ret
    1900:	26 f0       	brts	.+8      	; 0x190a <ceil+0x26>
    1902:	1b 16       	cp	r1, r27
    1904:	61 1d       	adc	r22, r1
    1906:	71 1d       	adc	r23, r1
    1908:	81 1d       	adc	r24, r1
    190a:	0c 94 96 0d 	jmp	0x1b2c	; 0x1b2c <__fp_mintl>
    190e:	0c 94 b1 0d 	jmp	0x1b62	; 0x1b62 <__fp_mpack>

00001912 <__cmpsf2>:
    1912:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <__fp_cmp>
    1916:	08 f4       	brcc	.+2      	; 0x191a <__cmpsf2+0x8>
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	08 95       	ret

0000191c <__divsf3>:
    191c:	0e 94 a2 0c 	call	0x1944	; 0x1944 <__divsf3x>
    1920:	0c 94 d0 0d 	jmp	0x1ba0	; 0x1ba0 <__fp_round>
    1924:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__fp_pscB>
    1928:	58 f0       	brcs	.+22     	; 0x1940 <__divsf3+0x24>
    192a:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <__fp_pscA>
    192e:	40 f0       	brcs	.+16     	; 0x1940 <__divsf3+0x24>
    1930:	29 f4       	brne	.+10     	; 0x193c <__divsf3+0x20>
    1932:	5f 3f       	cpi	r21, 0xFF	; 255
    1934:	29 f0       	breq	.+10     	; 0x1940 <__divsf3+0x24>
    1936:	0c 94 90 0d 	jmp	0x1b20	; 0x1b20 <__fp_inf>
    193a:	51 11       	cpse	r21, r1
    193c:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <__fp_szero>
    1940:	0c 94 bf 0d 	jmp	0x1b7e	; 0x1b7e <__fp_nan>

00001944 <__divsf3x>:
    1944:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <__fp_split3>
    1948:	68 f3       	brcs	.-38     	; 0x1924 <__divsf3+0x8>

0000194a <__divsf3_pse>:
    194a:	99 23       	and	r25, r25
    194c:	b1 f3       	breq	.-20     	; 0x193a <__divsf3+0x1e>
    194e:	55 23       	and	r21, r21
    1950:	91 f3       	breq	.-28     	; 0x1936 <__divsf3+0x1a>
    1952:	95 1b       	sub	r25, r21
    1954:	55 0b       	sbc	r21, r21
    1956:	bb 27       	eor	r27, r27
    1958:	aa 27       	eor	r26, r26
    195a:	62 17       	cp	r22, r18
    195c:	73 07       	cpc	r23, r19
    195e:	84 07       	cpc	r24, r20
    1960:	38 f0       	brcs	.+14     	; 0x1970 <__divsf3_pse+0x26>
    1962:	9f 5f       	subi	r25, 0xFF	; 255
    1964:	5f 4f       	sbci	r21, 0xFF	; 255
    1966:	22 0f       	add	r18, r18
    1968:	33 1f       	adc	r19, r19
    196a:	44 1f       	adc	r20, r20
    196c:	aa 1f       	adc	r26, r26
    196e:	a9 f3       	breq	.-22     	; 0x195a <__divsf3_pse+0x10>
    1970:	35 d0       	rcall	.+106    	; 0x19dc <__divsf3_pse+0x92>
    1972:	0e 2e       	mov	r0, r30
    1974:	3a f0       	brmi	.+14     	; 0x1984 <__divsf3_pse+0x3a>
    1976:	e0 e8       	ldi	r30, 0x80	; 128
    1978:	32 d0       	rcall	.+100    	; 0x19de <__divsf3_pse+0x94>
    197a:	91 50       	subi	r25, 0x01	; 1
    197c:	50 40       	sbci	r21, 0x00	; 0
    197e:	e6 95       	lsr	r30
    1980:	00 1c       	adc	r0, r0
    1982:	ca f7       	brpl	.-14     	; 0x1976 <__divsf3_pse+0x2c>
    1984:	2b d0       	rcall	.+86     	; 0x19dc <__divsf3_pse+0x92>
    1986:	fe 2f       	mov	r31, r30
    1988:	29 d0       	rcall	.+82     	; 0x19dc <__divsf3_pse+0x92>
    198a:	66 0f       	add	r22, r22
    198c:	77 1f       	adc	r23, r23
    198e:	88 1f       	adc	r24, r24
    1990:	bb 1f       	adc	r27, r27
    1992:	26 17       	cp	r18, r22
    1994:	37 07       	cpc	r19, r23
    1996:	48 07       	cpc	r20, r24
    1998:	ab 07       	cpc	r26, r27
    199a:	b0 e8       	ldi	r27, 0x80	; 128
    199c:	09 f0       	breq	.+2      	; 0x19a0 <__divsf3_pse+0x56>
    199e:	bb 0b       	sbc	r27, r27
    19a0:	80 2d       	mov	r24, r0
    19a2:	bf 01       	movw	r22, r30
    19a4:	ff 27       	eor	r31, r31
    19a6:	93 58       	subi	r25, 0x83	; 131
    19a8:	5f 4f       	sbci	r21, 0xFF	; 255
    19aa:	3a f0       	brmi	.+14     	; 0x19ba <__divsf3_pse+0x70>
    19ac:	9e 3f       	cpi	r25, 0xFE	; 254
    19ae:	51 05       	cpc	r21, r1
    19b0:	78 f0       	brcs	.+30     	; 0x19d0 <__divsf3_pse+0x86>
    19b2:	0c 94 90 0d 	jmp	0x1b20	; 0x1b20 <__fp_inf>
    19b6:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <__fp_szero>
    19ba:	5f 3f       	cpi	r21, 0xFF	; 255
    19bc:	e4 f3       	brlt	.-8      	; 0x19b6 <__divsf3_pse+0x6c>
    19be:	98 3e       	cpi	r25, 0xE8	; 232
    19c0:	d4 f3       	brlt	.-12     	; 0x19b6 <__divsf3_pse+0x6c>
    19c2:	86 95       	lsr	r24
    19c4:	77 95       	ror	r23
    19c6:	67 95       	ror	r22
    19c8:	b7 95       	ror	r27
    19ca:	f7 95       	ror	r31
    19cc:	9f 5f       	subi	r25, 0xFF	; 255
    19ce:	c9 f7       	brne	.-14     	; 0x19c2 <__divsf3_pse+0x78>
    19d0:	88 0f       	add	r24, r24
    19d2:	91 1d       	adc	r25, r1
    19d4:	96 95       	lsr	r25
    19d6:	87 95       	ror	r24
    19d8:	97 f9       	bld	r25, 7
    19da:	08 95       	ret
    19dc:	e1 e0       	ldi	r30, 0x01	; 1
    19de:	66 0f       	add	r22, r22
    19e0:	77 1f       	adc	r23, r23
    19e2:	88 1f       	adc	r24, r24
    19e4:	bb 1f       	adc	r27, r27
    19e6:	62 17       	cp	r22, r18
    19e8:	73 07       	cpc	r23, r19
    19ea:	84 07       	cpc	r24, r20
    19ec:	ba 07       	cpc	r27, r26
    19ee:	20 f0       	brcs	.+8      	; 0x19f8 <__divsf3_pse+0xae>
    19f0:	62 1b       	sub	r22, r18
    19f2:	73 0b       	sbc	r23, r19
    19f4:	84 0b       	sbc	r24, r20
    19f6:	ba 0b       	sbc	r27, r26
    19f8:	ee 1f       	adc	r30, r30
    19fa:	88 f7       	brcc	.-30     	; 0x19de <__divsf3_pse+0x94>
    19fc:	e0 95       	com	r30
    19fe:	08 95       	ret

00001a00 <__fixunssfsi>:
    1a00:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__fp_splitA>
    1a04:	88 f0       	brcs	.+34     	; 0x1a28 <__fixunssfsi+0x28>
    1a06:	9f 57       	subi	r25, 0x7F	; 127
    1a08:	98 f0       	brcs	.+38     	; 0x1a30 <__fixunssfsi+0x30>
    1a0a:	b9 2f       	mov	r27, r25
    1a0c:	99 27       	eor	r25, r25
    1a0e:	b7 51       	subi	r27, 0x17	; 23
    1a10:	b0 f0       	brcs	.+44     	; 0x1a3e <__fixunssfsi+0x3e>
    1a12:	e1 f0       	breq	.+56     	; 0x1a4c <__fixunssfsi+0x4c>
    1a14:	66 0f       	add	r22, r22
    1a16:	77 1f       	adc	r23, r23
    1a18:	88 1f       	adc	r24, r24
    1a1a:	99 1f       	adc	r25, r25
    1a1c:	1a f0       	brmi	.+6      	; 0x1a24 <__fixunssfsi+0x24>
    1a1e:	ba 95       	dec	r27
    1a20:	c9 f7       	brne	.-14     	; 0x1a14 <__fixunssfsi+0x14>
    1a22:	14 c0       	rjmp	.+40     	; 0x1a4c <__fixunssfsi+0x4c>
    1a24:	b1 30       	cpi	r27, 0x01	; 1
    1a26:	91 f0       	breq	.+36     	; 0x1a4c <__fixunssfsi+0x4c>
    1a28:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <__fp_zero>
    1a2c:	b1 e0       	ldi	r27, 0x01	; 1
    1a2e:	08 95       	ret
    1a30:	0c 94 1b 0e 	jmp	0x1c36	; 0x1c36 <__fp_zero>
    1a34:	67 2f       	mov	r22, r23
    1a36:	78 2f       	mov	r23, r24
    1a38:	88 27       	eor	r24, r24
    1a3a:	b8 5f       	subi	r27, 0xF8	; 248
    1a3c:	39 f0       	breq	.+14     	; 0x1a4c <__fixunssfsi+0x4c>
    1a3e:	b9 3f       	cpi	r27, 0xF9	; 249
    1a40:	cc f3       	brlt	.-14     	; 0x1a34 <__fixunssfsi+0x34>
    1a42:	86 95       	lsr	r24
    1a44:	77 95       	ror	r23
    1a46:	67 95       	ror	r22
    1a48:	b3 95       	inc	r27
    1a4a:	d9 f7       	brne	.-10     	; 0x1a42 <__fixunssfsi+0x42>
    1a4c:	3e f4       	brtc	.+14     	; 0x1a5c <__fixunssfsi+0x5c>
    1a4e:	90 95       	com	r25
    1a50:	80 95       	com	r24
    1a52:	70 95       	com	r23
    1a54:	61 95       	neg	r22
    1a56:	7f 4f       	sbci	r23, 0xFF	; 255
    1a58:	8f 4f       	sbci	r24, 0xFF	; 255
    1a5a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a5c:	08 95       	ret

00001a5e <__floatunsisf>:
    1a5e:	e8 94       	clt
    1a60:	09 c0       	rjmp	.+18     	; 0x1a74 <__floatsisf+0x12>

00001a62 <__floatsisf>:
    1a62:	97 fb       	bst	r25, 7
    1a64:	3e f4       	brtc	.+14     	; 0x1a74 <__floatsisf+0x12>
    1a66:	90 95       	com	r25
    1a68:	80 95       	com	r24
    1a6a:	70 95       	com	r23
    1a6c:	61 95       	neg	r22
    1a6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a70:	8f 4f       	sbci	r24, 0xFF	; 255
    1a72:	9f 4f       	sbci	r25, 0xFF	; 255
    1a74:	99 23       	and	r25, r25
    1a76:	a9 f0       	breq	.+42     	; 0x1aa2 <__floatsisf+0x40>
    1a78:	f9 2f       	mov	r31, r25
    1a7a:	96 e9       	ldi	r25, 0x96	; 150
    1a7c:	bb 27       	eor	r27, r27
    1a7e:	93 95       	inc	r25
    1a80:	f6 95       	lsr	r31
    1a82:	87 95       	ror	r24
    1a84:	77 95       	ror	r23
    1a86:	67 95       	ror	r22
    1a88:	b7 95       	ror	r27
    1a8a:	f1 11       	cpse	r31, r1
    1a8c:	f8 cf       	rjmp	.-16     	; 0x1a7e <__floatsisf+0x1c>
    1a8e:	fa f4       	brpl	.+62     	; 0x1ace <__floatsisf+0x6c>
    1a90:	bb 0f       	add	r27, r27
    1a92:	11 f4       	brne	.+4      	; 0x1a98 <__floatsisf+0x36>
    1a94:	60 ff       	sbrs	r22, 0
    1a96:	1b c0       	rjmp	.+54     	; 0x1ace <__floatsisf+0x6c>
    1a98:	6f 5f       	subi	r22, 0xFF	; 255
    1a9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a9c:	8f 4f       	sbci	r24, 0xFF	; 255
    1a9e:	9f 4f       	sbci	r25, 0xFF	; 255
    1aa0:	16 c0       	rjmp	.+44     	; 0x1ace <__floatsisf+0x6c>
    1aa2:	88 23       	and	r24, r24
    1aa4:	11 f0       	breq	.+4      	; 0x1aaa <__floatsisf+0x48>
    1aa6:	96 e9       	ldi	r25, 0x96	; 150
    1aa8:	11 c0       	rjmp	.+34     	; 0x1acc <__floatsisf+0x6a>
    1aaa:	77 23       	and	r23, r23
    1aac:	21 f0       	breq	.+8      	; 0x1ab6 <__floatsisf+0x54>
    1aae:	9e e8       	ldi	r25, 0x8E	; 142
    1ab0:	87 2f       	mov	r24, r23
    1ab2:	76 2f       	mov	r23, r22
    1ab4:	05 c0       	rjmp	.+10     	; 0x1ac0 <__floatsisf+0x5e>
    1ab6:	66 23       	and	r22, r22
    1ab8:	71 f0       	breq	.+28     	; 0x1ad6 <__floatsisf+0x74>
    1aba:	96 e8       	ldi	r25, 0x86	; 134
    1abc:	86 2f       	mov	r24, r22
    1abe:	70 e0       	ldi	r23, 0x00	; 0
    1ac0:	60 e0       	ldi	r22, 0x00	; 0
    1ac2:	2a f0       	brmi	.+10     	; 0x1ace <__floatsisf+0x6c>
    1ac4:	9a 95       	dec	r25
    1ac6:	66 0f       	add	r22, r22
    1ac8:	77 1f       	adc	r23, r23
    1aca:	88 1f       	adc	r24, r24
    1acc:	da f7       	brpl	.-10     	; 0x1ac4 <__floatsisf+0x62>
    1ace:	88 0f       	add	r24, r24
    1ad0:	96 95       	lsr	r25
    1ad2:	87 95       	ror	r24
    1ad4:	97 f9       	bld	r25, 7
    1ad6:	08 95       	ret

00001ad8 <__fp_cmp>:
    1ad8:	99 0f       	add	r25, r25
    1ada:	00 08       	sbc	r0, r0
    1adc:	55 0f       	add	r21, r21
    1ade:	aa 0b       	sbc	r26, r26
    1ae0:	e0 e8       	ldi	r30, 0x80	; 128
    1ae2:	fe ef       	ldi	r31, 0xFE	; 254
    1ae4:	16 16       	cp	r1, r22
    1ae6:	17 06       	cpc	r1, r23
    1ae8:	e8 07       	cpc	r30, r24
    1aea:	f9 07       	cpc	r31, r25
    1aec:	c0 f0       	brcs	.+48     	; 0x1b1e <__fp_cmp+0x46>
    1aee:	12 16       	cp	r1, r18
    1af0:	13 06       	cpc	r1, r19
    1af2:	e4 07       	cpc	r30, r20
    1af4:	f5 07       	cpc	r31, r21
    1af6:	98 f0       	brcs	.+38     	; 0x1b1e <__fp_cmp+0x46>
    1af8:	62 1b       	sub	r22, r18
    1afa:	73 0b       	sbc	r23, r19
    1afc:	84 0b       	sbc	r24, r20
    1afe:	95 0b       	sbc	r25, r21
    1b00:	39 f4       	brne	.+14     	; 0x1b10 <__fp_cmp+0x38>
    1b02:	0a 26       	eor	r0, r26
    1b04:	61 f0       	breq	.+24     	; 0x1b1e <__fp_cmp+0x46>
    1b06:	23 2b       	or	r18, r19
    1b08:	24 2b       	or	r18, r20
    1b0a:	25 2b       	or	r18, r21
    1b0c:	21 f4       	brne	.+8      	; 0x1b16 <__fp_cmp+0x3e>
    1b0e:	08 95       	ret
    1b10:	0a 26       	eor	r0, r26
    1b12:	09 f4       	brne	.+2      	; 0x1b16 <__fp_cmp+0x3e>
    1b14:	a1 40       	sbci	r26, 0x01	; 1
    1b16:	a6 95       	lsr	r26
    1b18:	8f ef       	ldi	r24, 0xFF	; 255
    1b1a:	81 1d       	adc	r24, r1
    1b1c:	81 1d       	adc	r24, r1
    1b1e:	08 95       	ret

00001b20 <__fp_inf>:
    1b20:	97 f9       	bld	r25, 7
    1b22:	9f 67       	ori	r25, 0x7F	; 127
    1b24:	80 e8       	ldi	r24, 0x80	; 128
    1b26:	70 e0       	ldi	r23, 0x00	; 0
    1b28:	60 e0       	ldi	r22, 0x00	; 0
    1b2a:	08 95       	ret

00001b2c <__fp_mintl>:
    1b2c:	88 23       	and	r24, r24
    1b2e:	71 f4       	brne	.+28     	; 0x1b4c <__fp_mintl+0x20>
    1b30:	77 23       	and	r23, r23
    1b32:	21 f0       	breq	.+8      	; 0x1b3c <__fp_mintl+0x10>
    1b34:	98 50       	subi	r25, 0x08	; 8
    1b36:	87 2b       	or	r24, r23
    1b38:	76 2f       	mov	r23, r22
    1b3a:	07 c0       	rjmp	.+14     	; 0x1b4a <__fp_mintl+0x1e>
    1b3c:	66 23       	and	r22, r22
    1b3e:	11 f4       	brne	.+4      	; 0x1b44 <__fp_mintl+0x18>
    1b40:	99 27       	eor	r25, r25
    1b42:	0d c0       	rjmp	.+26     	; 0x1b5e <__fp_mintl+0x32>
    1b44:	90 51       	subi	r25, 0x10	; 16
    1b46:	86 2b       	or	r24, r22
    1b48:	70 e0       	ldi	r23, 0x00	; 0
    1b4a:	60 e0       	ldi	r22, 0x00	; 0
    1b4c:	2a f0       	brmi	.+10     	; 0x1b58 <__fp_mintl+0x2c>
    1b4e:	9a 95       	dec	r25
    1b50:	66 0f       	add	r22, r22
    1b52:	77 1f       	adc	r23, r23
    1b54:	88 1f       	adc	r24, r24
    1b56:	da f7       	brpl	.-10     	; 0x1b4e <__fp_mintl+0x22>
    1b58:	88 0f       	add	r24, r24
    1b5a:	96 95       	lsr	r25
    1b5c:	87 95       	ror	r24
    1b5e:	97 f9       	bld	r25, 7
    1b60:	08 95       	ret

00001b62 <__fp_mpack>:
    1b62:	9f 3f       	cpi	r25, 0xFF	; 255
    1b64:	31 f0       	breq	.+12     	; 0x1b72 <__fp_mpack_finite+0xc>

00001b66 <__fp_mpack_finite>:
    1b66:	91 50       	subi	r25, 0x01	; 1
    1b68:	20 f4       	brcc	.+8      	; 0x1b72 <__fp_mpack_finite+0xc>
    1b6a:	87 95       	ror	r24
    1b6c:	77 95       	ror	r23
    1b6e:	67 95       	ror	r22
    1b70:	b7 95       	ror	r27
    1b72:	88 0f       	add	r24, r24
    1b74:	91 1d       	adc	r25, r1
    1b76:	96 95       	lsr	r25
    1b78:	87 95       	ror	r24
    1b7a:	97 f9       	bld	r25, 7
    1b7c:	08 95       	ret

00001b7e <__fp_nan>:
    1b7e:	9f ef       	ldi	r25, 0xFF	; 255
    1b80:	80 ec       	ldi	r24, 0xC0	; 192
    1b82:	08 95       	ret

00001b84 <__fp_pscA>:
    1b84:	00 24       	eor	r0, r0
    1b86:	0a 94       	dec	r0
    1b88:	16 16       	cp	r1, r22
    1b8a:	17 06       	cpc	r1, r23
    1b8c:	18 06       	cpc	r1, r24
    1b8e:	09 06       	cpc	r0, r25
    1b90:	08 95       	ret

00001b92 <__fp_pscB>:
    1b92:	00 24       	eor	r0, r0
    1b94:	0a 94       	dec	r0
    1b96:	12 16       	cp	r1, r18
    1b98:	13 06       	cpc	r1, r19
    1b9a:	14 06       	cpc	r1, r20
    1b9c:	05 06       	cpc	r0, r21
    1b9e:	08 95       	ret

00001ba0 <__fp_round>:
    1ba0:	09 2e       	mov	r0, r25
    1ba2:	03 94       	inc	r0
    1ba4:	00 0c       	add	r0, r0
    1ba6:	11 f4       	brne	.+4      	; 0x1bac <__fp_round+0xc>
    1ba8:	88 23       	and	r24, r24
    1baa:	52 f0       	brmi	.+20     	; 0x1bc0 <__fp_round+0x20>
    1bac:	bb 0f       	add	r27, r27
    1bae:	40 f4       	brcc	.+16     	; 0x1bc0 <__fp_round+0x20>
    1bb0:	bf 2b       	or	r27, r31
    1bb2:	11 f4       	brne	.+4      	; 0x1bb8 <__fp_round+0x18>
    1bb4:	60 ff       	sbrs	r22, 0
    1bb6:	04 c0       	rjmp	.+8      	; 0x1bc0 <__fp_round+0x20>
    1bb8:	6f 5f       	subi	r22, 0xFF	; 255
    1bba:	7f 4f       	sbci	r23, 0xFF	; 255
    1bbc:	8f 4f       	sbci	r24, 0xFF	; 255
    1bbe:	9f 4f       	sbci	r25, 0xFF	; 255
    1bc0:	08 95       	ret

00001bc2 <__fp_split3>:
    1bc2:	57 fd       	sbrc	r21, 7
    1bc4:	90 58       	subi	r25, 0x80	; 128
    1bc6:	44 0f       	add	r20, r20
    1bc8:	55 1f       	adc	r21, r21
    1bca:	59 f0       	breq	.+22     	; 0x1be2 <__fp_splitA+0x10>
    1bcc:	5f 3f       	cpi	r21, 0xFF	; 255
    1bce:	71 f0       	breq	.+28     	; 0x1bec <__fp_splitA+0x1a>
    1bd0:	47 95       	ror	r20

00001bd2 <__fp_splitA>:
    1bd2:	88 0f       	add	r24, r24
    1bd4:	97 fb       	bst	r25, 7
    1bd6:	99 1f       	adc	r25, r25
    1bd8:	61 f0       	breq	.+24     	; 0x1bf2 <__fp_splitA+0x20>
    1bda:	9f 3f       	cpi	r25, 0xFF	; 255
    1bdc:	79 f0       	breq	.+30     	; 0x1bfc <__fp_splitA+0x2a>
    1bde:	87 95       	ror	r24
    1be0:	08 95       	ret
    1be2:	12 16       	cp	r1, r18
    1be4:	13 06       	cpc	r1, r19
    1be6:	14 06       	cpc	r1, r20
    1be8:	55 1f       	adc	r21, r21
    1bea:	f2 cf       	rjmp	.-28     	; 0x1bd0 <__fp_split3+0xe>
    1bec:	46 95       	lsr	r20
    1bee:	f1 df       	rcall	.-30     	; 0x1bd2 <__fp_splitA>
    1bf0:	08 c0       	rjmp	.+16     	; 0x1c02 <__fp_splitA+0x30>
    1bf2:	16 16       	cp	r1, r22
    1bf4:	17 06       	cpc	r1, r23
    1bf6:	18 06       	cpc	r1, r24
    1bf8:	99 1f       	adc	r25, r25
    1bfa:	f1 cf       	rjmp	.-30     	; 0x1bde <__fp_splitA+0xc>
    1bfc:	86 95       	lsr	r24
    1bfe:	71 05       	cpc	r23, r1
    1c00:	61 05       	cpc	r22, r1
    1c02:	08 94       	sec
    1c04:	08 95       	ret

00001c06 <__fp_trunc>:
    1c06:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__fp_splitA>
    1c0a:	a0 f0       	brcs	.+40     	; 0x1c34 <__fp_trunc+0x2e>
    1c0c:	be e7       	ldi	r27, 0x7E	; 126
    1c0e:	b9 17       	cp	r27, r25
    1c10:	88 f4       	brcc	.+34     	; 0x1c34 <__fp_trunc+0x2e>
    1c12:	bb 27       	eor	r27, r27
    1c14:	9f 38       	cpi	r25, 0x8F	; 143
    1c16:	60 f4       	brcc	.+24     	; 0x1c30 <__fp_trunc+0x2a>
    1c18:	16 16       	cp	r1, r22
    1c1a:	b1 1d       	adc	r27, r1
    1c1c:	67 2f       	mov	r22, r23
    1c1e:	78 2f       	mov	r23, r24
    1c20:	88 27       	eor	r24, r24
    1c22:	98 5f       	subi	r25, 0xF8	; 248
    1c24:	f7 cf       	rjmp	.-18     	; 0x1c14 <__fp_trunc+0xe>
    1c26:	86 95       	lsr	r24
    1c28:	77 95       	ror	r23
    1c2a:	67 95       	ror	r22
    1c2c:	b1 1d       	adc	r27, r1
    1c2e:	93 95       	inc	r25
    1c30:	96 39       	cpi	r25, 0x96	; 150
    1c32:	c8 f3       	brcs	.-14     	; 0x1c26 <__fp_trunc+0x20>
    1c34:	08 95       	ret

00001c36 <__fp_zero>:
    1c36:	e8 94       	clt

00001c38 <__fp_szero>:
    1c38:	bb 27       	eor	r27, r27
    1c3a:	66 27       	eor	r22, r22
    1c3c:	77 27       	eor	r23, r23
    1c3e:	cb 01       	movw	r24, r22
    1c40:	97 f9       	bld	r25, 7
    1c42:	08 95       	ret

00001c44 <__gesf2>:
    1c44:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <__fp_cmp>
    1c48:	08 f4       	brcc	.+2      	; 0x1c4c <__gesf2+0x8>
    1c4a:	8f ef       	ldi	r24, 0xFF	; 255
    1c4c:	08 95       	ret

00001c4e <__mulsf3>:
    1c4e:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <__mulsf3x>
    1c52:	0c 94 d0 0d 	jmp	0x1ba0	; 0x1ba0 <__fp_round>
    1c56:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <__fp_pscA>
    1c5a:	38 f0       	brcs	.+14     	; 0x1c6a <__mulsf3+0x1c>
    1c5c:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__fp_pscB>
    1c60:	20 f0       	brcs	.+8      	; 0x1c6a <__mulsf3+0x1c>
    1c62:	95 23       	and	r25, r21
    1c64:	11 f0       	breq	.+4      	; 0x1c6a <__mulsf3+0x1c>
    1c66:	0c 94 90 0d 	jmp	0x1b20	; 0x1b20 <__fp_inf>
    1c6a:	0c 94 bf 0d 	jmp	0x1b7e	; 0x1b7e <__fp_nan>
    1c6e:	11 24       	eor	r1, r1
    1c70:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <__fp_szero>

00001c74 <__mulsf3x>:
    1c74:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <__fp_split3>
    1c78:	70 f3       	brcs	.-36     	; 0x1c56 <__mulsf3+0x8>

00001c7a <__mulsf3_pse>:
    1c7a:	95 9f       	mul	r25, r21
    1c7c:	c1 f3       	breq	.-16     	; 0x1c6e <__mulsf3+0x20>
    1c7e:	95 0f       	add	r25, r21
    1c80:	50 e0       	ldi	r21, 0x00	; 0
    1c82:	55 1f       	adc	r21, r21
    1c84:	62 9f       	mul	r22, r18
    1c86:	f0 01       	movw	r30, r0
    1c88:	72 9f       	mul	r23, r18
    1c8a:	bb 27       	eor	r27, r27
    1c8c:	f0 0d       	add	r31, r0
    1c8e:	b1 1d       	adc	r27, r1
    1c90:	63 9f       	mul	r22, r19
    1c92:	aa 27       	eor	r26, r26
    1c94:	f0 0d       	add	r31, r0
    1c96:	b1 1d       	adc	r27, r1
    1c98:	aa 1f       	adc	r26, r26
    1c9a:	64 9f       	mul	r22, r20
    1c9c:	66 27       	eor	r22, r22
    1c9e:	b0 0d       	add	r27, r0
    1ca0:	a1 1d       	adc	r26, r1
    1ca2:	66 1f       	adc	r22, r22
    1ca4:	82 9f       	mul	r24, r18
    1ca6:	22 27       	eor	r18, r18
    1ca8:	b0 0d       	add	r27, r0
    1caa:	a1 1d       	adc	r26, r1
    1cac:	62 1f       	adc	r22, r18
    1cae:	73 9f       	mul	r23, r19
    1cb0:	b0 0d       	add	r27, r0
    1cb2:	a1 1d       	adc	r26, r1
    1cb4:	62 1f       	adc	r22, r18
    1cb6:	83 9f       	mul	r24, r19
    1cb8:	a0 0d       	add	r26, r0
    1cba:	61 1d       	adc	r22, r1
    1cbc:	22 1f       	adc	r18, r18
    1cbe:	74 9f       	mul	r23, r20
    1cc0:	33 27       	eor	r19, r19
    1cc2:	a0 0d       	add	r26, r0
    1cc4:	61 1d       	adc	r22, r1
    1cc6:	23 1f       	adc	r18, r19
    1cc8:	84 9f       	mul	r24, r20
    1cca:	60 0d       	add	r22, r0
    1ccc:	21 1d       	adc	r18, r1
    1cce:	82 2f       	mov	r24, r18
    1cd0:	76 2f       	mov	r23, r22
    1cd2:	6a 2f       	mov	r22, r26
    1cd4:	11 24       	eor	r1, r1
    1cd6:	9f 57       	subi	r25, 0x7F	; 127
    1cd8:	50 40       	sbci	r21, 0x00	; 0
    1cda:	9a f0       	brmi	.+38     	; 0x1d02 <__mulsf3_pse+0x88>
    1cdc:	f1 f0       	breq	.+60     	; 0x1d1a <__mulsf3_pse+0xa0>
    1cde:	88 23       	and	r24, r24
    1ce0:	4a f0       	brmi	.+18     	; 0x1cf4 <__mulsf3_pse+0x7a>
    1ce2:	ee 0f       	add	r30, r30
    1ce4:	ff 1f       	adc	r31, r31
    1ce6:	bb 1f       	adc	r27, r27
    1ce8:	66 1f       	adc	r22, r22
    1cea:	77 1f       	adc	r23, r23
    1cec:	88 1f       	adc	r24, r24
    1cee:	91 50       	subi	r25, 0x01	; 1
    1cf0:	50 40       	sbci	r21, 0x00	; 0
    1cf2:	a9 f7       	brne	.-22     	; 0x1cde <__mulsf3_pse+0x64>
    1cf4:	9e 3f       	cpi	r25, 0xFE	; 254
    1cf6:	51 05       	cpc	r21, r1
    1cf8:	80 f0       	brcs	.+32     	; 0x1d1a <__mulsf3_pse+0xa0>
    1cfa:	0c 94 90 0d 	jmp	0x1b20	; 0x1b20 <__fp_inf>
    1cfe:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <__fp_szero>
    1d02:	5f 3f       	cpi	r21, 0xFF	; 255
    1d04:	e4 f3       	brlt	.-8      	; 0x1cfe <__mulsf3_pse+0x84>
    1d06:	98 3e       	cpi	r25, 0xE8	; 232
    1d08:	d4 f3       	brlt	.-12     	; 0x1cfe <__mulsf3_pse+0x84>
    1d0a:	86 95       	lsr	r24
    1d0c:	77 95       	ror	r23
    1d0e:	67 95       	ror	r22
    1d10:	b7 95       	ror	r27
    1d12:	f7 95       	ror	r31
    1d14:	e7 95       	ror	r30
    1d16:	9f 5f       	subi	r25, 0xFF	; 255
    1d18:	c1 f7       	brne	.-16     	; 0x1d0a <__mulsf3_pse+0x90>
    1d1a:	fe 2b       	or	r31, r30
    1d1c:	88 0f       	add	r24, r24
    1d1e:	91 1d       	adc	r25, r1
    1d20:	96 95       	lsr	r25
    1d22:	87 95       	ror	r24
    1d24:	97 f9       	bld	r25, 7
    1d26:	08 95       	ret

00001d28 <__udivmodsi4>:
    1d28:	a1 e2       	ldi	r26, 0x21	; 33
    1d2a:	1a 2e       	mov	r1, r26
    1d2c:	aa 1b       	sub	r26, r26
    1d2e:	bb 1b       	sub	r27, r27
    1d30:	fd 01       	movw	r30, r26
    1d32:	0d c0       	rjmp	.+26     	; 0x1d4e <__udivmodsi4_ep>

00001d34 <__udivmodsi4_loop>:
    1d34:	aa 1f       	adc	r26, r26
    1d36:	bb 1f       	adc	r27, r27
    1d38:	ee 1f       	adc	r30, r30
    1d3a:	ff 1f       	adc	r31, r31
    1d3c:	a2 17       	cp	r26, r18
    1d3e:	b3 07       	cpc	r27, r19
    1d40:	e4 07       	cpc	r30, r20
    1d42:	f5 07       	cpc	r31, r21
    1d44:	20 f0       	brcs	.+8      	; 0x1d4e <__udivmodsi4_ep>
    1d46:	a2 1b       	sub	r26, r18
    1d48:	b3 0b       	sbc	r27, r19
    1d4a:	e4 0b       	sbc	r30, r20
    1d4c:	f5 0b       	sbc	r31, r21

00001d4e <__udivmodsi4_ep>:
    1d4e:	66 1f       	adc	r22, r22
    1d50:	77 1f       	adc	r23, r23
    1d52:	88 1f       	adc	r24, r24
    1d54:	99 1f       	adc	r25, r25
    1d56:	1a 94       	dec	r1
    1d58:	69 f7       	brne	.-38     	; 0x1d34 <__udivmodsi4_loop>
    1d5a:	60 95       	com	r22
    1d5c:	70 95       	com	r23
    1d5e:	80 95       	com	r24
    1d60:	90 95       	com	r25
    1d62:	9b 01       	movw	r18, r22
    1d64:	ac 01       	movw	r20, r24
    1d66:	bd 01       	movw	r22, r26
    1d68:	cf 01       	movw	r24, r30
    1d6a:	08 95       	ret

00001d6c <__tablejump2__>:
    1d6c:	ee 0f       	add	r30, r30
    1d6e:	ff 1f       	adc	r31, r31
    1d70:	05 90       	lpm	r0, Z+
    1d72:	f4 91       	lpm	r31, Z
    1d74:	e0 2d       	mov	r30, r0
    1d76:	09 94       	ijmp

00001d78 <atof>:
    1d78:	66 27       	eor	r22, r22
    1d7a:	77 27       	eor	r23, r23
    1d7c:	0c 94 c0 0e 	jmp	0x1d80	; 0x1d80 <strtod>

00001d80 <strtod>:
    1d80:	a0 e0       	ldi	r26, 0x00	; 0
    1d82:	b0 e0       	ldi	r27, 0x00	; 0
    1d84:	e6 ec       	ldi	r30, 0xC6	; 198
    1d86:	fe e0       	ldi	r31, 0x0E	; 14
    1d88:	0c 94 43 10 	jmp	0x2086	; 0x2086 <__prologue_saves__+0xc>
    1d8c:	ec 01       	movw	r28, r24
    1d8e:	6b 01       	movw	r12, r22
    1d90:	61 15       	cp	r22, r1
    1d92:	71 05       	cpc	r23, r1
    1d94:	19 f0       	breq	.+6      	; 0x1d9c <strtod+0x1c>
    1d96:	fb 01       	movw	r30, r22
    1d98:	91 83       	std	Z+1, r25	; 0x01
    1d9a:	80 83       	st	Z, r24
    1d9c:	7e 01       	movw	r14, r28
    1d9e:	ff ef       	ldi	r31, 0xFF	; 255
    1da0:	ef 1a       	sub	r14, r31
    1da2:	ff 0a       	sbc	r15, r31
    1da4:	08 81       	ld	r16, Y
    1da6:	80 2f       	mov	r24, r16
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	0e 94 0e 10 	call	0x201c	; 0x201c <isspace>
    1dae:	89 2b       	or	r24, r25
    1db0:	11 f0       	breq	.+4      	; 0x1db6 <strtod+0x36>
    1db2:	e7 01       	movw	r28, r14
    1db4:	f3 cf       	rjmp	.-26     	; 0x1d9c <strtod+0x1c>
    1db6:	0d 32       	cpi	r16, 0x2D	; 45
    1db8:	39 f4       	brne	.+14     	; 0x1dc8 <strtod+0x48>
    1dba:	7e 01       	movw	r14, r28
    1dbc:	82 e0       	ldi	r24, 0x02	; 2
    1dbe:	e8 0e       	add	r14, r24
    1dc0:	f1 1c       	adc	r15, r1
    1dc2:	09 81       	ldd	r16, Y+1	; 0x01
    1dc4:	11 e0       	ldi	r17, 0x01	; 1
    1dc6:	08 c0       	rjmp	.+16     	; 0x1dd8 <strtod+0x58>
    1dc8:	0b 32       	cpi	r16, 0x2B	; 43
    1dca:	29 f4       	brne	.+10     	; 0x1dd6 <strtod+0x56>
    1dcc:	7e 01       	movw	r14, r28
    1dce:	92 e0       	ldi	r25, 0x02	; 2
    1dd0:	e9 0e       	add	r14, r25
    1dd2:	f1 1c       	adc	r15, r1
    1dd4:	09 81       	ldd	r16, Y+1	; 0x01
    1dd6:	10 e0       	ldi	r17, 0x00	; 0
    1dd8:	e7 01       	movw	r28, r14
    1dda:	21 97       	sbiw	r28, 0x01	; 1
    1ddc:	43 e0       	ldi	r20, 0x03	; 3
    1dde:	50 e0       	ldi	r21, 0x00	; 0
    1de0:	68 e7       	ldi	r22, 0x78	; 120
    1de2:	70 e0       	ldi	r23, 0x00	; 0
    1de4:	ce 01       	movw	r24, r28
    1de6:	0e 94 17 10 	call	0x202e	; 0x202e <strncasecmp_P>
    1dea:	89 2b       	or	r24, r25
    1dec:	c1 f4       	brne	.+48     	; 0x1e1e <strtod+0x9e>
    1dee:	23 96       	adiw	r28, 0x03	; 3
    1df0:	45 e0       	ldi	r20, 0x05	; 5
    1df2:	50 e0       	ldi	r21, 0x00	; 0
    1df4:	63 e7       	ldi	r22, 0x73	; 115
    1df6:	70 e0       	ldi	r23, 0x00	; 0
    1df8:	ce 01       	movw	r24, r28
    1dfa:	0e 94 17 10 	call	0x202e	; 0x202e <strncasecmp_P>
    1dfe:	89 2b       	or	r24, r25
    1e00:	09 f4       	brne	.+2      	; 0x1e04 <strtod+0x84>
    1e02:	25 96       	adiw	r28, 0x05	; 5
    1e04:	c1 14       	cp	r12, r1
    1e06:	d1 04       	cpc	r13, r1
    1e08:	19 f0       	breq	.+6      	; 0x1e10 <strtod+0x90>
    1e0a:	f6 01       	movw	r30, r12
    1e0c:	d1 83       	std	Z+1, r29	; 0x01
    1e0e:	c0 83       	st	Z, r28
    1e10:	11 11       	cpse	r17, r1
    1e12:	f6 c0       	rjmp	.+492    	; 0x2000 <strtod+0x280>
    1e14:	60 e0       	ldi	r22, 0x00	; 0
    1e16:	70 e0       	ldi	r23, 0x00	; 0
    1e18:	80 e8       	ldi	r24, 0x80	; 128
    1e1a:	9f e7       	ldi	r25, 0x7F	; 127
    1e1c:	fa c0       	rjmp	.+500    	; 0x2012 <strtod+0x292>
    1e1e:	43 e0       	ldi	r20, 0x03	; 3
    1e20:	50 e0       	ldi	r21, 0x00	; 0
    1e22:	60 e7       	ldi	r22, 0x70	; 112
    1e24:	70 e0       	ldi	r23, 0x00	; 0
    1e26:	ce 01       	movw	r24, r28
    1e28:	0e 94 17 10 	call	0x202e	; 0x202e <strncasecmp_P>
    1e2c:	89 2b       	or	r24, r25
    1e2e:	59 f4       	brne	.+22     	; 0x1e46 <strtod+0xc6>
    1e30:	c1 14       	cp	r12, r1
    1e32:	d1 04       	cpc	r13, r1
    1e34:	09 f4       	brne	.+2      	; 0x1e38 <strtod+0xb8>
    1e36:	e9 c0       	rjmp	.+466    	; 0x200a <strtod+0x28a>
    1e38:	f2 e0       	ldi	r31, 0x02	; 2
    1e3a:	ef 0e       	add	r14, r31
    1e3c:	f1 1c       	adc	r15, r1
    1e3e:	f6 01       	movw	r30, r12
    1e40:	f1 82       	std	Z+1, r15	; 0x01
    1e42:	e0 82       	st	Z, r14
    1e44:	e2 c0       	rjmp	.+452    	; 0x200a <strtod+0x28a>
    1e46:	20 e0       	ldi	r18, 0x00	; 0
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	a9 01       	movw	r20, r18
    1e4c:	c0 e0       	ldi	r28, 0x00	; 0
    1e4e:	d0 e0       	ldi	r29, 0x00	; 0
    1e50:	f7 01       	movw	r30, r14
    1e52:	80 ed       	ldi	r24, 0xD0	; 208
    1e54:	a8 2e       	mov	r10, r24
    1e56:	a0 0e       	add	r10, r16
    1e58:	89 e0       	ldi	r24, 0x09	; 9
    1e5a:	8a 15       	cp	r24, r10
    1e5c:	30 f1       	brcs	.+76     	; 0x1eaa <strtod+0x12a>
    1e5e:	91 2f       	mov	r25, r17
    1e60:	92 60       	ori	r25, 0x02	; 2
    1e62:	b9 2e       	mov	r11, r25
    1e64:	81 2f       	mov	r24, r17
    1e66:	88 70       	andi	r24, 0x08	; 8
    1e68:	12 ff       	sbrs	r17, 2
    1e6a:	04 c0       	rjmp	.+8      	; 0x1e74 <strtod+0xf4>
    1e6c:	81 11       	cpse	r24, r1
    1e6e:	24 c0       	rjmp	.+72     	; 0x1eb8 <strtod+0x138>
    1e70:	21 96       	adiw	r28, 0x01	; 1
    1e72:	22 c0       	rjmp	.+68     	; 0x1eb8 <strtod+0x138>
    1e74:	81 11       	cpse	r24, r1
    1e76:	21 97       	sbiw	r28, 0x01	; 1
    1e78:	a5 e0       	ldi	r26, 0x05	; 5
    1e7a:	b0 e0       	ldi	r27, 0x00	; 0
    1e7c:	0e 94 32 10 	call	0x2064	; 0x2064 <__muluhisi3>
    1e80:	dc 01       	movw	r26, r24
    1e82:	cb 01       	movw	r24, r22
    1e84:	88 0f       	add	r24, r24
    1e86:	99 1f       	adc	r25, r25
    1e88:	aa 1f       	adc	r26, r26
    1e8a:	bb 1f       	adc	r27, r27
    1e8c:	9c 01       	movw	r18, r24
    1e8e:	ad 01       	movw	r20, r26
    1e90:	2a 0d       	add	r18, r10
    1e92:	31 1d       	adc	r19, r1
    1e94:	41 1d       	adc	r20, r1
    1e96:	51 1d       	adc	r21, r1
    1e98:	28 39       	cpi	r18, 0x98	; 152
    1e9a:	89 e9       	ldi	r24, 0x99	; 153
    1e9c:	38 07       	cpc	r19, r24
    1e9e:	48 07       	cpc	r20, r24
    1ea0:	89 e1       	ldi	r24, 0x19	; 25
    1ea2:	58 07       	cpc	r21, r24
    1ea4:	48 f0       	brcs	.+18     	; 0x1eb8 <strtod+0x138>
    1ea6:	16 60       	ori	r17, 0x06	; 6
    1ea8:	06 c0       	rjmp	.+12     	; 0x1eb6 <strtod+0x136>
    1eaa:	9e ef       	ldi	r25, 0xFE	; 254
    1eac:	a9 12       	cpse	r10, r25
    1eae:	0a c0       	rjmp	.+20     	; 0x1ec4 <strtod+0x144>
    1eb0:	13 fd       	sbrc	r17, 3
    1eb2:	40 c0       	rjmp	.+128    	; 0x1f34 <strtod+0x1b4>
    1eb4:	18 60       	ori	r17, 0x08	; 8
    1eb6:	b1 2e       	mov	r11, r17
    1eb8:	8f ef       	ldi	r24, 0xFF	; 255
    1eba:	e8 1a       	sub	r14, r24
    1ebc:	f8 0a       	sbc	r15, r24
    1ebe:	00 81       	ld	r16, Z
    1ec0:	1b 2d       	mov	r17, r11
    1ec2:	c6 cf       	rjmp	.-116    	; 0x1e50 <strtod+0xd0>
    1ec4:	80 2f       	mov	r24, r16
    1ec6:	8f 7d       	andi	r24, 0xDF	; 223
    1ec8:	85 34       	cpi	r24, 0x45	; 69
    1eca:	a1 f5       	brne	.+104    	; 0x1f34 <strtod+0x1b4>
    1ecc:	80 81       	ld	r24, Z
    1ece:	8d 32       	cpi	r24, 0x2D	; 45
    1ed0:	11 f4       	brne	.+4      	; 0x1ed6 <strtod+0x156>
    1ed2:	10 61       	ori	r17, 0x10	; 16
    1ed4:	06 c0       	rjmp	.+12     	; 0x1ee2 <strtod+0x162>
    1ed6:	8b 32       	cpi	r24, 0x2B	; 43
    1ed8:	21 f0       	breq	.+8      	; 0x1ee2 <strtod+0x162>
    1eda:	31 96       	adiw	r30, 0x01	; 1
    1edc:	61 e0       	ldi	r22, 0x01	; 1
    1ede:	70 e0       	ldi	r23, 0x00	; 0
    1ee0:	04 c0       	rjmp	.+8      	; 0x1eea <strtod+0x16a>
    1ee2:	81 81       	ldd	r24, Z+1	; 0x01
    1ee4:	32 96       	adiw	r30, 0x02	; 2
    1ee6:	62 e0       	ldi	r22, 0x02	; 2
    1ee8:	70 e0       	ldi	r23, 0x00	; 0
    1eea:	80 53       	subi	r24, 0x30	; 48
    1eec:	8a 30       	cpi	r24, 0x0A	; 10
    1eee:	18 f0       	brcs	.+6      	; 0x1ef6 <strtod+0x176>
    1ef0:	e6 1b       	sub	r30, r22
    1ef2:	f7 0b       	sbc	r31, r23
    1ef4:	1f c0       	rjmp	.+62     	; 0x1f34 <strtod+0x1b4>
    1ef6:	60 e0       	ldi	r22, 0x00	; 0
    1ef8:	70 e0       	ldi	r23, 0x00	; 0
    1efa:	60 38       	cpi	r22, 0x80	; 128
    1efc:	9c e0       	ldi	r25, 0x0C	; 12
    1efe:	79 07       	cpc	r23, r25
    1f00:	5c f4       	brge	.+22     	; 0x1f18 <strtod+0x198>
    1f02:	db 01       	movw	r26, r22
    1f04:	aa 0f       	add	r26, r26
    1f06:	bb 1f       	adc	r27, r27
    1f08:	aa 0f       	add	r26, r26
    1f0a:	bb 1f       	adc	r27, r27
    1f0c:	6a 0f       	add	r22, r26
    1f0e:	7b 1f       	adc	r23, r27
    1f10:	66 0f       	add	r22, r22
    1f12:	77 1f       	adc	r23, r23
    1f14:	68 0f       	add	r22, r24
    1f16:	71 1d       	adc	r23, r1
    1f18:	31 96       	adiw	r30, 0x01	; 1
    1f1a:	df 01       	movw	r26, r30
    1f1c:	11 97       	sbiw	r26, 0x01	; 1
    1f1e:	8c 91       	ld	r24, X
    1f20:	80 53       	subi	r24, 0x30	; 48
    1f22:	8a 30       	cpi	r24, 0x0A	; 10
    1f24:	50 f3       	brcs	.-44     	; 0x1efa <strtod+0x17a>
    1f26:	14 ff       	sbrs	r17, 4
    1f28:	03 c0       	rjmp	.+6      	; 0x1f30 <strtod+0x1b0>
    1f2a:	71 95       	neg	r23
    1f2c:	61 95       	neg	r22
    1f2e:	71 09       	sbc	r23, r1
    1f30:	c6 0f       	add	r28, r22
    1f32:	d7 1f       	adc	r29, r23
    1f34:	11 ff       	sbrs	r17, 1
    1f36:	08 c0       	rjmp	.+16     	; 0x1f48 <strtod+0x1c8>
    1f38:	c1 14       	cp	r12, r1
    1f3a:	d1 04       	cpc	r13, r1
    1f3c:	29 f0       	breq	.+10     	; 0x1f48 <strtod+0x1c8>
    1f3e:	cf 01       	movw	r24, r30
    1f40:	01 97       	sbiw	r24, 0x01	; 1
    1f42:	f6 01       	movw	r30, r12
    1f44:	91 83       	std	Z+1, r25	; 0x01
    1f46:	80 83       	st	Z, r24
    1f48:	ca 01       	movw	r24, r20
    1f4a:	b9 01       	movw	r22, r18
    1f4c:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <__floatunsisf>
    1f50:	21 2f       	mov	r18, r17
    1f52:	23 70       	andi	r18, 0x03	; 3
    1f54:	23 30       	cpi	r18, 0x03	; 3
    1f56:	19 f0       	breq	.+6      	; 0x1f5e <strtod+0x1de>
    1f58:	4b 01       	movw	r8, r22
    1f5a:	5c 01       	movw	r10, r24
    1f5c:	06 c0       	rjmp	.+12     	; 0x1f6a <strtod+0x1ea>
    1f5e:	4b 01       	movw	r8, r22
    1f60:	5c 01       	movw	r10, r24
    1f62:	b7 fa       	bst	r11, 7
    1f64:	b0 94       	com	r11
    1f66:	b7 f8       	bld	r11, 7
    1f68:	b0 94       	com	r11
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	a9 01       	movw	r20, r18
    1f70:	c5 01       	movw	r24, r10
    1f72:	b4 01       	movw	r22, r8
    1f74:	0e 94 89 0c 	call	0x1912	; 0x1912 <__cmpsf2>
    1f78:	88 23       	and	r24, r24
    1f7a:	09 f4       	brne	.+2      	; 0x1f7e <strtod+0x1fe>
    1f7c:	3e c0       	rjmp	.+124    	; 0x1ffa <strtod+0x27a>
    1f7e:	d7 ff       	sbrs	r29, 7
    1f80:	06 c0       	rjmp	.+12     	; 0x1f8e <strtod+0x20e>
    1f82:	d1 95       	neg	r29
    1f84:	c1 95       	neg	r28
    1f86:	d1 09       	sbc	r29, r1
    1f88:	0f e8       	ldi	r16, 0x8F	; 143
    1f8a:	10 e0       	ldi	r17, 0x00	; 0
    1f8c:	02 c0       	rjmp	.+4      	; 0x1f92 <strtod+0x212>
    1f8e:	07 ea       	ldi	r16, 0xA7	; 167
    1f90:	10 e0       	ldi	r17, 0x00	; 0
    1f92:	68 01       	movw	r12, r16
    1f94:	f8 e1       	ldi	r31, 0x18	; 24
    1f96:	cf 1a       	sub	r12, r31
    1f98:	d1 08       	sbc	r13, r1
    1f9a:	90 e2       	ldi	r25, 0x20	; 32
    1f9c:	e9 2e       	mov	r14, r25
    1f9e:	f1 2c       	mov	r15, r1
    1fa0:	ce 15       	cp	r28, r14
    1fa2:	df 05       	cpc	r29, r15
    1fa4:	74 f0       	brlt	.+28     	; 0x1fc2 <strtod+0x242>
    1fa6:	f8 01       	movw	r30, r16
    1fa8:	25 91       	lpm	r18, Z+
    1faa:	35 91       	lpm	r19, Z+
    1fac:	45 91       	lpm	r20, Z+
    1fae:	54 91       	lpm	r21, Z
    1fb0:	c5 01       	movw	r24, r10
    1fb2:	b4 01       	movw	r22, r8
    1fb4:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <__mulsf3>
    1fb8:	4b 01       	movw	r8, r22
    1fba:	5c 01       	movw	r10, r24
    1fbc:	ce 19       	sub	r28, r14
    1fbe:	df 09       	sbc	r29, r15
    1fc0:	ef cf       	rjmp	.-34     	; 0x1fa0 <strtod+0x220>
    1fc2:	04 50       	subi	r16, 0x04	; 4
    1fc4:	11 09       	sbc	r17, r1
    1fc6:	f5 94       	asr	r15
    1fc8:	e7 94       	ror	r14
    1fca:	0c 15       	cp	r16, r12
    1fcc:	1d 05       	cpc	r17, r13
    1fce:	41 f7       	brne	.-48     	; 0x1fa0 <strtod+0x220>
    1fd0:	8a 2d       	mov	r24, r10
    1fd2:	88 0f       	add	r24, r24
    1fd4:	8b 2d       	mov	r24, r11
    1fd6:	88 1f       	adc	r24, r24
    1fd8:	8f 3f       	cpi	r24, 0xFF	; 255
    1fda:	49 f0       	breq	.+18     	; 0x1fee <strtod+0x26e>
    1fdc:	20 e0       	ldi	r18, 0x00	; 0
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	a9 01       	movw	r20, r18
    1fe2:	c5 01       	movw	r24, r10
    1fe4:	b4 01       	movw	r22, r8
    1fe6:	0e 94 89 0c 	call	0x1912	; 0x1912 <__cmpsf2>
    1fea:	81 11       	cpse	r24, r1
    1fec:	06 c0       	rjmp	.+12     	; 0x1ffa <strtod+0x27a>
    1fee:	82 e2       	ldi	r24, 0x22	; 34
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	90 93 51 03 	sts	0x0351, r25	; 0x800351 <errno+0x1>
    1ff6:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <errno>
    1ffa:	c5 01       	movw	r24, r10
    1ffc:	b4 01       	movw	r22, r8
    1ffe:	09 c0       	rjmp	.+18     	; 0x2012 <strtod+0x292>
    2000:	60 e0       	ldi	r22, 0x00	; 0
    2002:	70 e0       	ldi	r23, 0x00	; 0
    2004:	80 e8       	ldi	r24, 0x80	; 128
    2006:	9f ef       	ldi	r25, 0xFF	; 255
    2008:	04 c0       	rjmp	.+8      	; 0x2012 <strtod+0x292>
    200a:	60 e0       	ldi	r22, 0x00	; 0
    200c:	70 e0       	ldi	r23, 0x00	; 0
    200e:	80 ec       	ldi	r24, 0xC0	; 192
    2010:	9f e7       	ldi	r25, 0x7F	; 127
    2012:	cd b7       	in	r28, 0x3d	; 61
    2014:	de b7       	in	r29, 0x3e	; 62
    2016:	ec e0       	ldi	r30, 0x0C	; 12
    2018:	0c 94 5f 10 	jmp	0x20be	; 0x20be <__epilogue_restores__+0xc>

0000201c <isspace>:
    201c:	91 11       	cpse	r25, r1
    201e:	0c 94 2f 10 	jmp	0x205e	; 0x205e <__ctype_isfalse>
    2022:	80 32       	cpi	r24, 0x20	; 32
    2024:	19 f0       	breq	.+6      	; 0x202c <isspace+0x10>
    2026:	89 50       	subi	r24, 0x09	; 9
    2028:	85 50       	subi	r24, 0x05	; 5
    202a:	c8 f7       	brcc	.-14     	; 0x201e <isspace+0x2>
    202c:	08 95       	ret

0000202e <strncasecmp_P>:
    202e:	fb 01       	movw	r30, r22
    2030:	dc 01       	movw	r26, r24
    2032:	41 50       	subi	r20, 0x01	; 1
    2034:	50 40       	sbci	r21, 0x00	; 0
    2036:	88 f0       	brcs	.+34     	; 0x205a <strncasecmp_P+0x2c>
    2038:	8d 91       	ld	r24, X+
    203a:	81 34       	cpi	r24, 0x41	; 65
    203c:	1c f0       	brlt	.+6      	; 0x2044 <strncasecmp_P+0x16>
    203e:	8b 35       	cpi	r24, 0x5B	; 91
    2040:	0c f4       	brge	.+2      	; 0x2044 <strncasecmp_P+0x16>
    2042:	80 5e       	subi	r24, 0xE0	; 224
    2044:	65 91       	lpm	r22, Z+
    2046:	61 34       	cpi	r22, 0x41	; 65
    2048:	1c f0       	brlt	.+6      	; 0x2050 <strncasecmp_P+0x22>
    204a:	6b 35       	cpi	r22, 0x5B	; 91
    204c:	0c f4       	brge	.+2      	; 0x2050 <strncasecmp_P+0x22>
    204e:	60 5e       	subi	r22, 0xE0	; 224
    2050:	86 1b       	sub	r24, r22
    2052:	61 11       	cpse	r22, r1
    2054:	71 f3       	breq	.-36     	; 0x2032 <strncasecmp_P+0x4>
    2056:	99 0b       	sbc	r25, r25
    2058:	08 95       	ret
    205a:	88 1b       	sub	r24, r24
    205c:	fc cf       	rjmp	.-8      	; 0x2056 <strncasecmp_P+0x28>

0000205e <__ctype_isfalse>:
    205e:	99 27       	eor	r25, r25
    2060:	88 27       	eor	r24, r24

00002062 <__ctype_istrue>:
    2062:	08 95       	ret

00002064 <__muluhisi3>:
    2064:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__umulhisi3>
    2068:	a5 9f       	mul	r26, r21
    206a:	90 0d       	add	r25, r0
    206c:	b4 9f       	mul	r27, r20
    206e:	90 0d       	add	r25, r0
    2070:	a4 9f       	mul	r26, r20
    2072:	80 0d       	add	r24, r0
    2074:	91 1d       	adc	r25, r1
    2076:	11 24       	eor	r1, r1
    2078:	08 95       	ret

0000207a <__prologue_saves__>:
    207a:	2f 92       	push	r2
    207c:	3f 92       	push	r3
    207e:	4f 92       	push	r4
    2080:	5f 92       	push	r5
    2082:	6f 92       	push	r6
    2084:	7f 92       	push	r7
    2086:	8f 92       	push	r8
    2088:	9f 92       	push	r9
    208a:	af 92       	push	r10
    208c:	bf 92       	push	r11
    208e:	cf 92       	push	r12
    2090:	df 92       	push	r13
    2092:	ef 92       	push	r14
    2094:	ff 92       	push	r15
    2096:	0f 93       	push	r16
    2098:	1f 93       	push	r17
    209a:	cf 93       	push	r28
    209c:	df 93       	push	r29
    209e:	cd b7       	in	r28, 0x3d	; 61
    20a0:	de b7       	in	r29, 0x3e	; 62
    20a2:	ca 1b       	sub	r28, r26
    20a4:	db 0b       	sbc	r29, r27
    20a6:	0f b6       	in	r0, 0x3f	; 63
    20a8:	f8 94       	cli
    20aa:	de bf       	out	0x3e, r29	; 62
    20ac:	0f be       	out	0x3f, r0	; 63
    20ae:	cd bf       	out	0x3d, r28	; 61
    20b0:	09 94       	ijmp

000020b2 <__epilogue_restores__>:
    20b2:	2a 88       	ldd	r2, Y+18	; 0x12
    20b4:	39 88       	ldd	r3, Y+17	; 0x11
    20b6:	48 88       	ldd	r4, Y+16	; 0x10
    20b8:	5f 84       	ldd	r5, Y+15	; 0x0f
    20ba:	6e 84       	ldd	r6, Y+14	; 0x0e
    20bc:	7d 84       	ldd	r7, Y+13	; 0x0d
    20be:	8c 84       	ldd	r8, Y+12	; 0x0c
    20c0:	9b 84       	ldd	r9, Y+11	; 0x0b
    20c2:	aa 84       	ldd	r10, Y+10	; 0x0a
    20c4:	b9 84       	ldd	r11, Y+9	; 0x09
    20c6:	c8 84       	ldd	r12, Y+8	; 0x08
    20c8:	df 80       	ldd	r13, Y+7	; 0x07
    20ca:	ee 80       	ldd	r14, Y+6	; 0x06
    20cc:	fd 80       	ldd	r15, Y+5	; 0x05
    20ce:	0c 81       	ldd	r16, Y+4	; 0x04
    20d0:	1b 81       	ldd	r17, Y+3	; 0x03
    20d2:	aa 81       	ldd	r26, Y+2	; 0x02
    20d4:	b9 81       	ldd	r27, Y+1	; 0x01
    20d6:	ce 0f       	add	r28, r30
    20d8:	d1 1d       	adc	r29, r1
    20da:	0f b6       	in	r0, 0x3f	; 63
    20dc:	f8 94       	cli
    20de:	de bf       	out	0x3e, r29	; 62
    20e0:	0f be       	out	0x3f, r0	; 63
    20e2:	cd bf       	out	0x3d, r28	; 61
    20e4:	ed 01       	movw	r28, r26
    20e6:	08 95       	ret

000020e8 <__umulhisi3>:
    20e8:	a2 9f       	mul	r26, r18
    20ea:	b0 01       	movw	r22, r0
    20ec:	b3 9f       	mul	r27, r19
    20ee:	c0 01       	movw	r24, r0
    20f0:	a3 9f       	mul	r26, r19
    20f2:	70 0d       	add	r23, r0
    20f4:	81 1d       	adc	r24, r1
    20f6:	11 24       	eor	r1, r1
    20f8:	91 1d       	adc	r25, r1
    20fa:	b2 9f       	mul	r27, r18
    20fc:	70 0d       	add	r23, r0
    20fe:	81 1d       	adc	r24, r1
    2100:	11 24       	eor	r1, r1
    2102:	91 1d       	adc	r25, r1
    2104:	08 95       	ret

00002106 <_exit>:
    2106:	f8 94       	cli

00002108 <__stop_program>:
    2108:	ff cf       	rjmp	.-2      	; 0x2108 <__stop_program>
